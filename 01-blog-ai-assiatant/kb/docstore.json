{"docstore/metadata": {"16ba89ae-afb1-41b9-8b68-a0bb40804ec1": {"doc_hash": "e1a285267b5d29da293a63f33204a1b3c869fee0e3bf7b1ba10f6aa168e23d28"}, "a41622d0-5ce0-4a54-aa66-adf556aec1a3": {"doc_hash": "e7f2f542ac60ee936ff88bd374d49ac43d017feaaa5f013e937341695969274f"}, "22a7fc75-99e7-4941-a892-85e21ef0e3af": {"doc_hash": "d76936554db036c6543eaa7360460142bab2363c7b3ef6835271a5962be81b82"}, "4120034d-76ba-46e3-8bca-f866fe245a28": {"doc_hash": "fe7f2b77cf592cfc06701c0de7c080d32c371d998de5605bcb57c1037d52b13f"}, "6019b9d5-4ec0-4014-938b-b2d9d2e333cd": {"doc_hash": "bacabffd1ea3435699082cba37442811e12956701b3344a9a83150d577a21e8a"}, "7fcdfcf4-e998-4585-acce-6b8e74a46f06": {"doc_hash": "f8983989dc4fea55baaa51f5ce6a11da80ba664dc105a57e035a27144fedd0cd"}, "259ac5be-f8ee-4bf4-8b71-c75220a9de76": {"doc_hash": "136ace6f2b5ba5cefd1f1e0ea99e06df3cb11bccd258a1d422d76359767b5990"}, "489d5cb2-62c6-443e-aa71-6bab006a24d9": {"doc_hash": "bf314d0dec2f5799fc20a96df4d578f2d74dd4f6a6708cab6048ee040baf886b"}, "e4f7b0a3-1c41-4b02-80fe-88500bbcb6ba": {"doc_hash": "36b10a2f333005698c92d56f4bbc4f17f6e5dacbb7c20aef2b0dd814c021bdc9"}, "8db00887-b0a1-473b-a4ce-0718face2a46": {"doc_hash": "4d35fce954a27bb73e042ae94b6697b51576127a09394e34da7e9a2fcf0fe211"}, "d5dd1f7e-9420-4538-ad4a-5209993e1381": {"doc_hash": "b7aaa7ecfbb4bcff59229f26903bcb288e3ef4547ccd258c27a14786ef67fba5"}, "cd17128d-326a-4903-a0c5-c77c59478b21": {"doc_hash": "aecd732bbe12d2769ce14ed010b8624b198dc3e1a5bd14f7af87f91c8706b15e"}, "848363e0-a1b6-4dfd-afdc-21ecab16bf38": {"doc_hash": "371300188f9f77545c2f135d5a0d51fa6411992edc92f9996b09c67fa70235ec"}, "e00e35b5-cefc-48dd-90fe-a087fc48bafa": {"doc_hash": "4ba3c563f416bf6fd2c18441a708c3fd592c5499f316a34fd6bdd34fc13c340d"}, "6777dfc7-7c50-4859-b0dd-4ff20ce0a807": {"doc_hash": "2db407e92f1ff89a57f8cad6af40430b5d9e25b01c1e776c2f0c8e17aa4c4426"}, "b20c423c-747a-4fd1-b70b-25fd5541150d": {"doc_hash": "d2be6e05e9b6bbf716e3196c1aaa886839a21dbd1fb69fcc5a531cabb45cdb22"}, "a83f26dc-de07-4ea1-9ac6-fdfa5e21c03b": {"doc_hash": "6d162186ea1427d0ffc431fe3544bfb4b188a706a8633f9e1cb7eeab6d967c04"}, "9850e7da-e939-4679-91de-3b74f083eba0": {"doc_hash": "a1dff1cfad4b64e1e83cb784b722453c347363a3f97f85458359baef932e4428"}, "9a9e45bd-1dd1-4b46-81fd-afca52ddf738": {"doc_hash": "9d10a4b0bd374ae700fff62745538fd08d0aee1e6cda40deb4d01cf9fc1d4710"}, "26d899e5-4ca8-404f-804d-6f4a34198abd": {"doc_hash": "fd8a7988ee796bf04f415ffdf8721e91cdcf86e9b90dd91ff87ab909cbef1c6d"}, "dd557dd9-cde6-4ecc-a6a4-77d05d153c72": {"doc_hash": "662c3949a092c6d839e20ea644fb36c61b58c741e21d1a4dd50d7bafd521ed76"}, "d192491e-17a2-4268-963d-a7198d755427": {"doc_hash": "b4b8710e3c8e0f642e1be6643c8302b615767075036155d9418038b54f6734f2"}, "8470c0a5-1fe8-49d7-8587-0a7d7d9350a2": {"doc_hash": "3db67239cba429f437f747d617fa0c467b8a837f61ca0eb8afa6d402c0634b64"}, "0f62b2ba-cb18-4783-a350-3d8915b98c22": {"doc_hash": "1af26f70b35a1cecd8e3da5d14fc8602be87907c79a593db88aa156b0f5afea3"}, "27841ea7-750a-4e61-8a44-9cbd1f276a72": {"doc_hash": "90261f0d52c8bcabcc96a86d626a2f5494275eeae3f72f3e95a3b1b768330a49"}, "533d490d-66db-4374-b0ad-aa58daebe4d4": {"doc_hash": "db01205a4fb4e61315a162df081d5bd35172133b40956abb1677edc1cd30eb8b"}, "7f04828b-e710-4f22-ac20-fb12b1f6232d": {"doc_hash": "b8624eaa9113366e0549e0d0fbf7b3e9e716d47d1923747bd524ff03ef64bb29"}, "6aa938ae-d19a-446b-a26a-fbf0603194a0": {"doc_hash": "285cc53586ab7fe2da82110794be6e511a726e09fc0081df938c848cca47a274"}, "b11716ba-a1c3-4f99-b18d-699602cf7d0f": {"doc_hash": "ebfe9f54ddc107db2aea6bc90f20528cee90d56b15463c25c0639a8264901fd2"}, "b0afb286-2e3e-458a-9403-6a0df4d391f0": {"doc_hash": "6727b34cce90f78c595b2d69d12defbe87d518778602b78c6849b306cd2e0b5a"}, "3fff583d-c03e-48fd-81b0-b9c508f39652": {"doc_hash": "7ca2299f31f1be80d6cc5b4bdac7c695fc1cd11af1846d10e3b82715c395690e"}, "379627a1-e3ea-410e-9e88-54f3f1eca108": {"doc_hash": "b0212bfbabdaceea14427395ae23b1249369ffc90acd8f6d7f72de8d7953c04c"}, "3d083986-cd90-4bb6-a0d6-2b12c0586475": {"doc_hash": "69f9c3f65aa215dcde8c585d13490c2742ba992de47223f19b7ef15d06021ca2"}, "af8bb432-4b28-4e85-82d6-6d6394cc0c5b": {"doc_hash": "e2d768ef060b2b7afd8c0582960f5e35d145ca20895122d6b8833460016371b1"}, "f49a40a3-e652-4907-baa6-005cb1be6d2a": {"doc_hash": "6842d13d76bff58364a10330b9057a2b3839cd905772e0493b17f19f57d2d681"}, "54e6fc0d-abc1-4deb-a307-e7394dd94cb2": {"doc_hash": "afd4e50d76039b9067834fd8d24e9366595c71856774757403d8cd6452bb279a"}, "0789ce2b-e67e-422b-9524-4c1d621fdd8e": {"doc_hash": "66505291d55c48240d741a672f811d6a2fc67340fdfdb81f777c2c50072ae5c2"}, "d3830bb2-9319-4d36-809b-4bf042a5425a": {"doc_hash": "3e06137416c8fd1e2117ac4bc53cd077d7642c12ea88906d8a3195d4e1e331d8"}, "e8b4be1e-62ae-42fe-b7db-7edaa00ad9d2": {"doc_hash": "970ea4799ce7dd08f70576c03b91f7a6235329d829572a0039292b4b50fc083d"}, "d1e526e4-df9b-4acf-90c0-3ce95904cdf2": {"doc_hash": "dbfe05b18c19fa6eb0630b37ebcf0bfe4fd7c317fe01e897d7328a61eac867ce"}, "dfa88cfb-b069-4aa5-b6e7-927043e99d45": {"doc_hash": "4dec77480d01d8a2496ad47c585a6b8dc2e0eb623cbf7a1bd80da9b9babc04b5"}, "1cbc2fbc-08dc-4e99-b3c9-1edb86059274": {"doc_hash": "028886abab515833833fb7e6a0b1a956600f2e96cf0fd91949fc2df61c1b63b0"}, "5ba294b9-b3e3-406c-a010-7982418f5d37": {"doc_hash": "ce68f79885799fe6d9d2ebc89e8e12bb47c0202a5069d8a948f73f20a0065292"}, "c9255c40-ef20-4645-8caf-887ee7696e8d": {"doc_hash": "167634d83bb92db7fa410a1b2120aed615a5a6bf87c974adf4e19cfb5883f9d9"}, "617de077-cf0a-4492-95e2-2ac6f47ff63c": {"doc_hash": "c062dd0ae3a9aacb94fe6642b672b314ffdd756e865fd6fd5677173941a41bc5"}, "31783ff5-3251-4cec-8961-dda483445836": {"doc_hash": "a6e5c6a387744401e80270ab531ddc32036ecb46710019a280b02c415b450d80"}, "b0e2acee-0b85-4acc-a013-666414387b97": {"doc_hash": "c0e11e6bd3ea6888e3244dc3701f0d07c47f2e07663d2265d0498bb8ef919a43"}, "f5bf5a52-aa63-4423-99ac-4db23fd33d35": {"doc_hash": "6f9b9eba62b6a2694f71a8e456e9bbd1b42e7522d39c8338b282ec1394582460"}, "9936fa3a-7f2b-487c-ae08-2ea27c7cde9f": {"doc_hash": "0b5ecff0a750712361143b2401ef9f2a548b0404dfbee3041d6472af90fa731c"}, "5e6b9e75-ec1f-41e1-b906-de31982fe9b0": {"doc_hash": "b9b3f304ba752efac5d01512476cb1f0682e771222f8256a1393ea7e92487f39"}, "0238e2e0-0416-4376-940b-b1e175b0c8af": {"doc_hash": "af2c13b694af53f4146ee843770023d56d07a7b68c8d304035fdec9fc46b1be3"}, "6c24a568-ea68-4406-b7c6-457c49bc72e2": {"doc_hash": "2a60fc13dd22b3acd39d0b7a1580197d8d83e94b91fde05a6d1d44e2ee103487"}, "04b9ec0d-f234-434e-a7c3-4d85325be579": {"doc_hash": "ec76c64be78d1c85836c65d452c7218b6e3470465eb90e472d6fd3bca4214550"}, "c299da0c-1ebc-41c2-b783-a5be5af2cdb5": {"doc_hash": "ae069bb26dedcc61b194e60d3a79d4f4107c2320d5f79c75a120ea603a93fff6"}, "6d82dc7b-c9b6-441d-8a61-b974258085d3": {"doc_hash": "5922a3af71369e568bdb7961268868e3c333f5002f3b39cb79376eb404990471"}, "f8400d86-cd0a-422c-8497-7097f4e701d0": {"doc_hash": "9f968f2c79976551ef230e509971da53b1b8d3773ea8ff3f26de0aa8a04d1a3b"}, "06cb8027-5654-448c-abf5-55cc62dbbf38": {"doc_hash": "d295a0bc2dfaa67d6b2ae9c259bba45784857318c7bf1df05fc3049175df60ee"}, "5d620880-54b2-480a-850b-f2d1fa63c5c3": {"doc_hash": "c65b28a340aab6d61932e7eaebb04781fc2baed48ef51f142bcefc151500e2ef"}, "838e01ec-713d-4a8f-a0b1-ce1e9660836d": {"doc_hash": "dd7f4dc7f106d1474a96d6cade4c6da3c2c209c719743dca37c20149415311f8"}, "781b4df7-f027-474f-85e7-f04d491d7bbd": {"doc_hash": "2fd62ecef0cf24a69d0d371702a22ea7e67524d35819b9d9fddbaa4c5126db25"}, "6aef757b-2705-4b4c-85de-3705841202fb": {"doc_hash": "ed09e87a2b378215b1dcddf4729f6461d02643d301c261786420ea534b7fabab"}, "93f0d803-f3fe-455d-a437-91ceebe39e03": {"doc_hash": "6352e8d3798673a6ff283a06b5ac28852bf5453bb28421c6757e3e96142fa3d1"}, "169ad65b-6139-4ce3-be60-a81550f8af9e": {"doc_hash": "887ed8f9a23d419d72b8fadf38a76d2be3338a6d15561fb90e21b019bbc3cf65"}, "530319fb-f437-4f72-9d5e-7526e0bb8564": {"doc_hash": "1c551f04e049d811f9b83f8cfd30f443967661616f6ee04a3036c3f68a66c613"}, "4b153848-3b09-4250-922a-a0273dec19dd": {"doc_hash": "f7bf06b833c711938733baac89dc99d30bee654fbe00ec35841dc91f41a74683"}, "b89ae138-d312-4360-a76e-36feae737b7f": {"doc_hash": "c7c20a6009e6781b0772931859bcc06839191f793de8bd525022c13a0524133d"}, "4918253a-db34-4ce0-9b96-785aa7a4659c": {"doc_hash": "316045189d408d41f7f24d80004cb2ad6d13f8398455e0c2f677ac535b9d620f"}, "d643b7d2-4ebd-413d-bd60-586e58d3a387": {"doc_hash": "e5e668681f515ded661a625b07b5ea6fcc03b84490d8d13462f4f85ac1b49e90"}, "56386cb6-8c14-4aa6-8bb6-6085f63062b0": {"doc_hash": "14d9b3ff8dbfd3a5a501d6b6685cd8d46cf9a77a6e4d8257f6c570d9fdec1cb7"}, "03593344-c1fb-45b6-a39b-984c3992b147": {"doc_hash": "f19f61a07ba29ea788a79402bee715464aed30fda242078aa09ba537590c03ca"}, "52e875c2-8342-4bce-bc5f-9920ece1517c": {"doc_hash": "09e888f27429e50c8c357e7d6cff69ddf09257cba1635ad009d48950c2b9df77"}, "f68ab3a8-6c62-4704-95b9-267e36e9bd3e": {"doc_hash": "61687a4376d22e7458cbcb2c8685024e9a01f4c47d0e72d6479ceae298fbbb0e"}, "af91a16d-f4ba-4dc3-b34f-e846b69df9e6": {"doc_hash": "fa676235d3b42fd38c33acc559a22982ca9415055934941eba2c191f3edb708c"}, "e644e1ea-d4be-4740-a876-8fe026651a3a": {"doc_hash": "f0ab8d0d50a7c16090059475ec3fc146a7e832eb6522a4e21d091015849b78e7"}, "bcdd6387-f1c1-4fe9-b5e5-c7940e5e3efa": {"doc_hash": "27f63e4178a95fe27cedf52f3fa29f8cd2de02a030d88aa5d0aa016181600cb7"}, "3d040ded-0cc2-4d2e-bd99-035708c152e1": {"doc_hash": "4f2a16f2a8150f5a8330ee89401a9fe41bb18fa7ccdcea775d8918acf3f6a141"}, "88c74ffa-111f-453a-a2bf-f264e5904c77": {"doc_hash": "c595b6a0c01615607ae231a2ff20aa6c3bab3040907b1ad4705aee40317772e0"}, "69bf4d8c-4782-45f3-a468-74d49873df83": {"doc_hash": "8f1d509f73c29ed503943193d623c37b80bf54d43baeac03273489f587590b34"}, "0d36202a-648c-4c68-be47-b71ed769f8b5": {"doc_hash": "abc944219289158f8895de7be6c7c7c5db11c307b1a6c29d38db959a0963c40d"}, "784ccd52-66a6-4e4d-8340-6048220e91d4": {"doc_hash": "6432efc29a43988d72dd1317067f1b66a272b6b4f976d75120aceab9da87096d"}, "8e109689-d5f9-4bdb-a88e-03925419cac0": {"doc_hash": "c1e8aa8b176ec563f895bba87c134bf14bd22f1b010a924c0b6474cc05fcd741"}, "be0a8aa4-341d-4dae-8e09-171028879662": {"doc_hash": "0e48ca4b45da2864fe80f99abc561fb274a3bc90a373c666bfbff337c5cdfd27"}, "442c6f4a-066d-42b1-a2e2-48e1af44f583": {"doc_hash": "689ac67d5419f71add7d166be5498b7269006f017051b8ce53171530cb5dbc51"}, "456d6a23-92c2-4d4f-895c-49110d44ae7e": {"doc_hash": "172b6abed53fd538a900a4171b08bc76788be898209542d692adc6da01626bd6"}, "25bf98e8-2d7f-4d16-98c9-d97cfaae6cc5": {"doc_hash": "eee4fbd97ee7834587ba326fdcbbc0a2a6bccff1c328e9986bd9da49263d3965"}, "d7661e42-c331-47a9-85db-6167f15394dd": {"doc_hash": "7e3c221c3693b25a671e1e3cc53d4cc6bb4df3f189ee40ae0c9b7b2f4a856b55"}, "99e2e083-ff3e-4077-aa66-d68737386858": {"doc_hash": "a64e6d5c86a4c6897f846564c07b5a4a3397be665af61d8744f830671ccc6815"}, "cad399f2-85f7-424a-9d39-ff5f8dae78ec": {"doc_hash": "cb3d6bf17bebbdb9337bd99aa3a6a0ac50b4c2c6bf11112fd38b34c626171a21"}, "67bdb4d8-d636-49cd-a8bf-4ffabb768f2b": {"doc_hash": "7446498a9994d5f2ee172b0cfd1e55752b1c091697b0a85dd1dac49eb74af4b0"}, "a9c3575a-f0fb-4a1b-931d-6eaa4eabe4a8": {"doc_hash": "2b0282bb03116b7679455942e679e73c0ba4b2838ff93d882a81e761c52c8882"}, "19b42217-41ff-4ffd-9605-ae352b3d28df": {"doc_hash": "d5a15ee5d630ba9c2257a9aeb77baf11a687248d421ab43e8371345b7b42df29"}, "a1645c90-d59d-43b7-8b69-dba53db5c265": {"doc_hash": "bb006c3a0bd47bfeff4d4fb1f8864d8dd4f54a685d419924ceeae713ebc4c1eb"}, "2e70bdf5-483a-4405-ad00-91f1e0be7d82": {"doc_hash": "41acd2114b32ce1a1aebd8c4b61dad457700d412e00e11db860a8138aeba9c24"}, "fbea1b28-cb58-4a28-998c-280f74969772": {"doc_hash": "1908c36f19862d874f896545ec6e9ec7f7c757c9d53e00a13c340c51c2ef5672"}, "d4ed1f0f-4f53-4b79-9551-3406119737b0": {"doc_hash": "8fcd935203725999739da01f0e1f02a74cc830c73a4dd17f044b5e5485a0c15e"}, "132a1cf6-1b50-41ba-8b05-0abb8ae21fdf": {"doc_hash": "21a07ef8fe874b6a3789f93bf32b60a9dc337229e9f426f5c792f8e7d363fa0b"}, "f155ac7c-c2e9-4f94-a98c-55aca5ba6981": {"doc_hash": "2f3c047eab4f839ddd876e69e4703c70e3e73682aeaba813d8f558ca153de1b9"}, "9a77c1a4-7e2f-4219-a16d-9ffdd0dd5542": {"doc_hash": "1317318cdfce53007bfccf9d05feb34c5024e163c90e12ab55c684b3dbd8acc5"}, "3c98bff8-ca97-4771-ac4a-a44f68c8ee6b": {"doc_hash": "85419dbd595c41ae91b80f445a664a8b1ed7fc95634f4186ed27921e34b7cf04"}, "14d9e1da-4499-4fa2-9397-85b6bedf50f7": {"doc_hash": "cf2a66d9edee61992ee2f168ce8b221a96aab37e1f78961db42a621ae8d8e2ca"}, "4fb59aff-ded2-42fe-be81-b240fa7c3639": {"doc_hash": "e1432f38fad37666998dbf2705e59c533f4abdcc754e70bdd3c81a7e46f8e5ba"}, "e27de034-04bf-4483-abfe-0a3a782b6b02": {"doc_hash": "73d7c3e276c0bfff44eb72680c54196f9cc0cf670f5cc5c066160ec3145ff5e6"}, "e9c6edee-b509-4101-8111-1617c70c0ac2": {"doc_hash": "1fa6e3ee3651aefe0d2de1f560aa165d6eda05441e3cfdd6f5857f08f0708084"}, "0cbbfaff-e21e-40e1-afc1-d64219a33373": {"doc_hash": "8d24b3263cacdbc802d8005e461636aba261298094b2bf8e14829c2fe50290a8"}, "ba9aa5bc-0a3b-4f41-a209-acbc0d38ff11": {"doc_hash": "17f9157629550bcc9bad5198ec3057e658e718cf883b3e1a5b1413ac33279104"}, "f74f7195-e059-4a8a-97a1-e657a59b0a27": {"doc_hash": "3abd1b2948e5d9e52b5f70a5447572cffceecd5af5d41279c3a3d5de5df1b198"}, "aa724f7b-41f0-40ed-aa9b-5e650d545a1c": {"doc_hash": "479355f17a0b6bfb55ad0a057d8d50f493e004d40e232f02e06a53e484ac4a9b"}, "d6666747-3eb9-430e-8e64-491ba82ea26f": {"doc_hash": "d3d787225149a3da220c511423dcc9763e135f4d1446e02ca15e40f8b37da487"}, "1ab4fc40-fa27-4849-a153-ace10e32c2f6": {"doc_hash": "965c5915d7b59d89ae8210b1c12e457d9bb4ccc1dca49fba41728eb8746ef087"}, "84db4db8-c9e3-43b4-8b14-7153aaa4bde8": {"doc_hash": "2d26f10d57a270e99d8fd38c5c32e587976fe8af31fbc50f3e892c3b3edfc5ca"}, "5de429b9-7892-4e70-b594-f3814edf8a11": {"doc_hash": "48b3730296f9a549ee7ac542deb2e4637238c7f80eaf40c501c4426589d3a0b4"}, "8a7a76b9-527b-4e53-8015-20f796fa05f9": {"doc_hash": "1b40a69b022cff4bb846aa3095789d464605fecc896cf12066273ae30af7af0d"}, "cb9e1c68-4209-4e61-b3d4-f2029464956e": {"doc_hash": "3a0612d95792aa3055515a0976d571b7c280d967b0972130f06a2ea6a90913ab"}, "56008cbf-4830-419e-a072-23973cb9f38a": {"doc_hash": "e3d527157b9db11663f937fb298041aff76ef6bb6fedc1b3f25f8a9117d4d1f7"}, "e43bb6eb-5a67-49a9-b1aa-168447f11868": {"doc_hash": "935edb5e81664231246c51b064ff3632e50b9d31565f8d780f2139e61d181b80"}, "b7eb2722-b9fc-4e96-837e-3c311a14d922": {"doc_hash": "ecf2140c92c4136692c9410534aada2e1752e6a965cdc19352dd332ebaa48e80"}, "2922b33a-2de8-491a-aa77-eeb1aa649ee4": {"doc_hash": "375f2d0704f2df606e7219ec932392a4500e0a47cfd8b734950dfa192369b0fb"}, "f37d1afd-727e-4df5-bca4-4f27852e6060": {"doc_hash": "39c653a9f9ba90e869b1a072c093be067c016ef257ce2e3ddeb1ab50837b5a55"}, "5cd37e51-9621-4ad2-b857-aca530b20899": {"doc_hash": "02471d0b0a42fc1de12fdf3f67621e6030f8bfb6a6b4863a232de21aeffd3208"}, "389f2c75-8475-445d-87d4-5f40ac7012f4": {"doc_hash": "c2f7ee8ccb312877cd0599e3a4e25ae60cc6a7b39c855d9a737a31baeb9e1fed"}, "607224dd-30c1-40e3-afe3-1a2205542859": {"doc_hash": "343fd7320f916c5755bb5dcb14802a99f69395284477f4aa7716d8bf4d1ccefd"}, "cb2a2d58-0000-4dc0-97c4-3c942287aa85": {"doc_hash": "c6b01b5789ba8cf6177484481f4071eacad476ff45ffbb2c6254968076343cb3"}, "cb422583-53ad-449a-93a7-e499daab257b": {"doc_hash": "3e26004f3d6d4e8155e795eff53671210e7db285fad56aebb9a6e00d6da897e4"}, "8aca293f-d757-46ce-b66a-8321f5422e82": {"doc_hash": "a9482b74294b95b1bd9797278386e1e0f33f5032db771303c6c59567a52a58e2"}, "4e4523ce-d22b-4cfb-9ee1-61bc462a630e": {"doc_hash": "85255b76654f0f37fb5f1732855ffc35e04073d20853e2170bf3aa75f9ef8084"}, "ec1a4890-8bbe-4dc4-ab06-62ba9326de8a": {"doc_hash": "7e1a6af71bec932b362afb98669ce8fa4eab0c5c4c529daa6a7336aa7e70b7b0"}, "5a08ab8c-13cd-4713-a71b-54644cd34614": {"doc_hash": "eb64865fa0df9df791a7cb38641b837aba9af914e6261e178b1d96196da7cea8"}, "c9db68f9-2ac7-49bc-a5c8-e972138b3294": {"doc_hash": "eec48a01eaddd9e5abcad793504ad301c8b9cd19cde50bea77faf3e601a9f7f5"}, "7f3befc3-89d6-450a-9591-b22f30b71b4d": {"doc_hash": "57ed9f95b0cc8a078803600e795806ff1ef03bb4de5f1fcbfa872d83824d26fb"}, "41ad57af-db56-432e-9473-80db7722049f": {"doc_hash": "1e37e5238f8b03ec33de112141bdf3365750bb53d1d9c31c3ec1a366e6674fb3"}, "570497e1-9600-49d0-8517-da7b966b29ef": {"doc_hash": "c1fb3f8c23d2018724169597c187d91a8e57120e318e30c2d6e8c1b258acd585"}, "5a4a4cbe-4336-4c1e-a4d9-7ce32945cb93": {"doc_hash": "821d4dacb4ca5e599cde2664c6bdb077a3d12ddbddedfffbfc892fb225f41573"}, "f54bd317-fca1-409a-a58d-d329d58b2fe5": {"doc_hash": "914cacbb46c5567005f56a70f83de2132c2a9e73c1e32b400dedc5d4ed62dc3f"}, "9edbdfce-5668-495f-b7a7-c438597f6ec1": {"doc_hash": "c3ffba0b1f5e6d51d4931f624cf47dd56d990c9fb07510ed0ff5393188d49e15"}, "ea267aee-3967-404c-a7e9-d002ea1261b4": {"doc_hash": "433c50c251f13e06f4443a24652ff3fe1384912cd9925d558d11eefc7d73706b"}, "7bb12367-2344-408c-981f-7424f080d9e7": {"doc_hash": "232479b8924ac0e7d8c808bdf3a0792d0cbfa742a782d29534c5e808c99c3d1d"}, "159d1e7e-63ec-4219-9d12-5641b70950b0": {"doc_hash": "6a4aa809b245f3b73a68ee3579cf1b5824ee3b098320a8e5f577eef7dddc80da"}, "d5fd6b32-2ec5-4694-bc83-65670fa3dde5": {"doc_hash": "b7375761c7b5049df202d1e1d4ce63933fec04b17800c31ad1fcc96399c8d18a", "ref_doc_id": "16ba89ae-afb1-41b9-8b68-a0bb40804ec1"}, "20f5d863-2928-4fc3-9d80-30e2abd7d2bb": {"doc_hash": "e2934d9f877e3f783af3ba105454ffd49fd1854da2ab998ac4c7f4867387cd7d", "ref_doc_id": "a41622d0-5ce0-4a54-aa66-adf556aec1a3"}, "3d8ec722-df1f-4da4-b0db-1b6d3b4ff52c": {"doc_hash": "7888c915ced586f84799da2eb13cc08378a02984b3b67e1be2d415a55cc86c07", "ref_doc_id": "22a7fc75-99e7-4941-a892-85e21ef0e3af"}, "cbc84ffe-7a9b-4f5c-9b64-00879822f9dc": {"doc_hash": "5f6d857431e4b9cc03bdb2901f527cf74b7f47fbca283d0368a4354d6db5dc0b", "ref_doc_id": "22a7fc75-99e7-4941-a892-85e21ef0e3af"}, "ef18236d-f472-4fa5-99da-649dea88b574": {"doc_hash": "738eb2069c747afaaa202937c14211b53134038f538dcc68e5488b4d8ab6cba4", "ref_doc_id": "4120034d-76ba-46e3-8bca-f866fe245a28"}, "d8811708-a7a8-48ac-b183-f2394b6c53ff": {"doc_hash": "5c31ecc9c4e759bc44fdc51d490269b2318eaec1be4dbe71ef5cbf2b48b65779", "ref_doc_id": "6019b9d5-4ec0-4014-938b-b2d9d2e333cd"}, "b753d218-d568-4bfd-86ad-ca8c6c906b14": {"doc_hash": "4413b9bea9ffb3a9155366d5966b960afd0d1f3bbff0b227af648b0b764d633c", "ref_doc_id": "7fcdfcf4-e998-4585-acce-6b8e74a46f06"}, "bf0d85a2-9c23-44f6-8b8a-9bdaa3bff94d": {"doc_hash": "59f7961b3e13c37d1e939eb2610d156d929558c0d68a4e555ea44f993e6c3de7", "ref_doc_id": "259ac5be-f8ee-4bf4-8b71-c75220a9de76"}, "02bc5bf1-d04b-49fd-a9a5-e61596725546": {"doc_hash": "79c29aa5202c60bba0b6c80a258bc918cebdc0a435ade270890cdaeaeac2ab19", "ref_doc_id": "489d5cb2-62c6-443e-aa71-6bab006a24d9"}, "8dd3b393-32d8-470c-adc5-a36a9a1a69b8": {"doc_hash": "e0a469f1d73aa554efcf448e589dfd598671fe00f0db7e2b50bfdf1ba5c49a89", "ref_doc_id": "e4f7b0a3-1c41-4b02-80fe-88500bbcb6ba"}, "c443c40e-97ec-4c94-85a0-ef6903d34bd1": {"doc_hash": "acac010c548b887ca7810a8586465d504f00df7bae62865f168de260c4cd4fba", "ref_doc_id": "8db00887-b0a1-473b-a4ce-0718face2a46"}, "3cc04899-14b9-4474-8d41-5cb0b467010a": {"doc_hash": "84fd2a955c143744ba14a33ea4f67d3585501bb210b2f2a1d7b69204c803fe89", "ref_doc_id": "d5dd1f7e-9420-4538-ad4a-5209993e1381"}, "f1259519-5803-4e5f-b1d6-c916d9673530": {"doc_hash": "7410d1fa3153b06788330bf9be80b391637580b80be7aae6bf2b916616ee0c38", "ref_doc_id": "cd17128d-326a-4903-a0c5-c77c59478b21"}, "fad4b56b-4079-47a3-9eb6-5263ed90c3d2": {"doc_hash": "c630bfb2ea84aac5251f53925cc1898dfc6305b106b0aa0ecc22c4688dd31a49", "ref_doc_id": "848363e0-a1b6-4dfd-afdc-21ecab16bf38"}, "6f162758-a4a3-4653-a4fd-ed3ff4478886": {"doc_hash": "063467bb6ce8ba9c3b0d925fa57a3439f6eac7fc26b388e9dd996cbd91093e36", "ref_doc_id": "e00e35b5-cefc-48dd-90fe-a087fc48bafa"}, "45670891-a9a8-4df7-b079-43d3b5930036": {"doc_hash": "474417a5d8b1eb115658a610cdb28767714f2f1e45fc12923448581912d17d40", "ref_doc_id": "6777dfc7-7c50-4859-b0dd-4ff20ce0a807"}, "216b39dd-ef82-4b3e-9c2e-bb3e1b3462a4": {"doc_hash": "3374dea9c22c74a285c0fb24ce260012f3d31129d7771502f413ce7505fbe351", "ref_doc_id": "b20c423c-747a-4fd1-b70b-25fd5541150d"}, "b2692c13-e04a-4199-a014-4d4c99a5ddc6": {"doc_hash": "ae86ba84ebbcf8a89a25cd5d46a8555aec1884b759877a3bb43f23dd00ee6677", "ref_doc_id": "a83f26dc-de07-4ea1-9ac6-fdfa5e21c03b"}, "974ee772-6a78-4661-b478-8a12ca496bb9": {"doc_hash": "11f3e004447d2229c42d1def27e5079b218c169cff57380ff2b623a2732fa61c", "ref_doc_id": "9850e7da-e939-4679-91de-3b74f083eba0"}, "757cc912-623d-4754-a085-44a943745fe7": {"doc_hash": "f18d9e6ffba4060db098c3a92b19dae7e618a9038576034545a11e3e81cdbbd0", "ref_doc_id": "9a9e45bd-1dd1-4b46-81fd-afca52ddf738"}, "6d602356-173b-415d-be7d-72b7774fb02b": {"doc_hash": "85793173102daa30984ce9914360a552380402075643b8fe57e620ca030f8441", "ref_doc_id": "26d899e5-4ca8-404f-804d-6f4a34198abd"}, "9ad02b5a-e18f-409f-961f-2feb64cbc6f3": {"doc_hash": "0502e1b754af25a740f8ae89f50408800b1c89fc914484f3017b3a77d6884522", "ref_doc_id": "dd557dd9-cde6-4ecc-a6a4-77d05d153c72"}, "a128c079-867b-45bf-be6a-657dd242a262": {"doc_hash": "64810804f7e00a9175c5b12a37f73a53faafe30913bea39207910328b8c3b50b", "ref_doc_id": "d192491e-17a2-4268-963d-a7198d755427"}, "9bba0cef-56d8-47ed-a9d0-56c4160a9b33": {"doc_hash": "81a9d87048f0c08b898950c0c06b760eb82c1e54efe6b839778f6cfc9f887a7f", "ref_doc_id": "8470c0a5-1fe8-49d7-8587-0a7d7d9350a2"}, "05207965-6db7-4bd2-a920-1ea3551d84ea": {"doc_hash": "30effa41c8da6d63c28e192db373f258844ceb92095582e4206610dcb68be570", "ref_doc_id": "0f62b2ba-cb18-4783-a350-3d8915b98c22"}, "be9efd5a-cf46-4d80-8dc3-738b3c133882": {"doc_hash": "05e81f464b1da0b277f18dcbd19fbfa208ba5797697d4dda06815c557b239b14", "ref_doc_id": "27841ea7-750a-4e61-8a44-9cbd1f276a72"}, "890493a5-7dde-4a6c-a126-c7b2aae40f29": {"doc_hash": "081e986d0cec0d24e663c819602b1b73f29ecb287fdef365a0d608a3ea5acd74", "ref_doc_id": "533d490d-66db-4374-b0ad-aa58daebe4d4"}, "b181769c-85d6-4891-9a91-ea8dc5bbd8b1": {"doc_hash": "191d87ca58af8b6351be5f1e51fb073d3e7024018b667948c022ff3015b52dd0", "ref_doc_id": "7f04828b-e710-4f22-ac20-fb12b1f6232d"}, "59e9aed6-3fa7-4314-bc22-4927536acb43": {"doc_hash": "29a28e36761b013b58c80c19043f52883b99f215436233b262d4df3615014f4c", "ref_doc_id": "6aa938ae-d19a-446b-a26a-fbf0603194a0"}, "e2c39dec-1733-450b-a75d-21d220dbc3c1": {"doc_hash": "a2a16f3f0318cb03a9e89d9ee5581bae46d85ed2a5d4b3f4de6b206229c0cc4c", "ref_doc_id": "b11716ba-a1c3-4f99-b18d-699602cf7d0f"}, "e2dc0bae-2725-4b53-8932-b04801b213da": {"doc_hash": "38c4c07aa2ab1f180a7b0fb57c4bbca74faa38eb9afac9283e796ab594de3c59", "ref_doc_id": "b0afb286-2e3e-458a-9403-6a0df4d391f0"}, "2154df07-a4b1-4354-be9b-1299666f2c9a": {"doc_hash": "0aa9105a3e301f7a286f6fac8b5b79e785407f21384d8e0037a8f5c9cc533910", "ref_doc_id": "3fff583d-c03e-48fd-81b0-b9c508f39652"}, "fae3a583-32e3-4426-aead-f3ff30503893": {"doc_hash": "bb0ff32291e2f3f6d6661ca3c7ed5fd9d759cfe3f237f12dbdbefb71d54ecad5", "ref_doc_id": "379627a1-e3ea-410e-9e88-54f3f1eca108"}, "6f2d4a0a-735d-43ec-8383-66ce3efec99d": {"doc_hash": "b2074152b20463c6954c5c751de78205e142cc548e77bcdad1fe47689d14ff16", "ref_doc_id": "3d083986-cd90-4bb6-a0d6-2b12c0586475"}, "9d12507f-c160-40ce-8d52-052b62108e36": {"doc_hash": "c577310947471edd76e6dec6548c5dfde833347e6563ffbd30eac21b2ea92452", "ref_doc_id": "af8bb432-4b28-4e85-82d6-6d6394cc0c5b"}, "0d594228-3f6a-4895-aa05-473c9d9452a9": {"doc_hash": "8db0175ed61cbbdf008e4d2a9daa4d017f6dda411c16b61e6d6fae841d651b50", "ref_doc_id": "f49a40a3-e652-4907-baa6-005cb1be6d2a"}, "1de43534-1583-44cd-9e89-92aa4eb159fa": {"doc_hash": "adadbe96c037c4e69e3d69dc981fdb89787d07ab31184873d17b1be44ae47405", "ref_doc_id": "54e6fc0d-abc1-4deb-a307-e7394dd94cb2"}, "8520e4d9-f3d8-4f28-a19e-f8fa11d96062": {"doc_hash": "489d0abb504135f75125bd05f7ee31a306e91ee27e76dee1eec3a1d0981471ae", "ref_doc_id": "0789ce2b-e67e-422b-9524-4c1d621fdd8e"}, "d119c5c6-da3c-4c76-8141-4807ee0e0cd7": {"doc_hash": "ac35dac1f5cb2afcc4f042ba9f7bcdc70de0749de1f0f7c96a3a1e3987812066", "ref_doc_id": "d3830bb2-9319-4d36-809b-4bf042a5425a"}, "af439ba4-cabe-4f5c-a932-d97ffb5e8694": {"doc_hash": "745945b164797c580d0c5dd55e822166b93713f5d3997a9039e28ebf7fbab342", "ref_doc_id": "e8b4be1e-62ae-42fe-b7db-7edaa00ad9d2"}, "83056970-e5bd-499c-acb0-0a8b69286fc0": {"doc_hash": "2822307e7b55172163010672f790040c857559b2f05408cf98b54b5f73f56ccd", "ref_doc_id": "d1e526e4-df9b-4acf-90c0-3ce95904cdf2"}, "3e5f6e9a-a012-4886-8b64-aaea581a9400": {"doc_hash": "fcd905845e113282653a6384330386c4c25bbacfa8e224b925fd6497288ea487", "ref_doc_id": "dfa88cfb-b069-4aa5-b6e7-927043e99d45"}, "75df7843-28c0-4292-8a1b-d3602f368d8d": {"doc_hash": "87b46b0f8d71ef722cde7e792d0b4ae90119e95530077873543f6c3dfb432d6c", "ref_doc_id": "1cbc2fbc-08dc-4e99-b3c9-1edb86059274"}, "ddbd990e-fecc-46ce-9211-3593008b5ce2": {"doc_hash": "8ac91d0c0fbc81544d892fa198429dfb07c304071414e90dad2d970148d63d14", "ref_doc_id": "5ba294b9-b3e3-406c-a010-7982418f5d37"}, "c9950a8b-f234-4146-8323-4fc6afe39e72": {"doc_hash": "a84fd23d5bde06f4d693eb7b45bef4c5f60950c143e1ee45856083fa7d488bbd", "ref_doc_id": "c9255c40-ef20-4645-8caf-887ee7696e8d"}, "f8912097-4eaf-4bf4-aac1-4ea92fe955fd": {"doc_hash": "ee8f377725f5d48af8d18a0ee6a39de553996878b40f9ee766ca71248c58027e", "ref_doc_id": "617de077-cf0a-4492-95e2-2ac6f47ff63c"}, "96518087-e613-428e-8dde-21d9e6a28fd6": {"doc_hash": "619406affa8fbafe71d2ff298cf81161324107c8fba39514779bb68e7529373c", "ref_doc_id": "31783ff5-3251-4cec-8961-dda483445836"}, "188d7463-3ea4-43cf-b882-350336167b88": {"doc_hash": "a12d763486b1531efc51df1960885f18a9487d5010d022499ba220701eb07402", "ref_doc_id": "b0e2acee-0b85-4acc-a013-666414387b97"}, "6363a797-e854-4f63-921a-42acf74c159d": {"doc_hash": "84706ccb5e44c583b8d79aab34b460ef8fac8de4a97a0761a9a65bdcfb512c5f", "ref_doc_id": "f5bf5a52-aa63-4423-99ac-4db23fd33d35"}, "a2a6ae95-d3b9-425e-b8c7-e6ad04943e7f": {"doc_hash": "b7e95a74b45bbd1f661d3ca257406a9b42f6309598eafeedea246d8c3dc08a16", "ref_doc_id": "9936fa3a-7f2b-487c-ae08-2ea27c7cde9f"}, "fdb4be78-aecf-49b4-9c20-526edd1bcb62": {"doc_hash": "7732c30bac8b9a8aeef9f950f0aa9d0d182347a70cd5132f1ebb92162a7808da", "ref_doc_id": "5e6b9e75-ec1f-41e1-b906-de31982fe9b0"}, "d84439e1-8cc2-4a9e-96aa-f526eae268cd": {"doc_hash": "0a900cc10913f8878e5e33c22632c1cc9cec5c87e77a9fb32546fb0372f37d68", "ref_doc_id": "0238e2e0-0416-4376-940b-b1e175b0c8af"}, "f13f1f6e-7ec0-47f3-9404-1a0f0b9c2d06": {"doc_hash": "9d6ba5f873d9d05889d6a7b5c3f5c55b655973d3d2c925527fa5ee963fb3c6d2", "ref_doc_id": "6c24a568-ea68-4406-b7c6-457c49bc72e2"}, "b9ab5cc2-a2b9-49d8-8dfc-9d6dfc64d132": {"doc_hash": "e9555a780ab78c15a3fb4d1ccc8d601d26b52eb0e9719a326f177779285da368", "ref_doc_id": "04b9ec0d-f234-434e-a7c3-4d85325be579"}, "df706406-7ac4-4d19-b374-432b5423e099": {"doc_hash": "868f0a6371ade83718656beb0e9b6ec4737a2b78e5f24fa7e3ae7c1cb7018de8", "ref_doc_id": "c299da0c-1ebc-41c2-b783-a5be5af2cdb5"}, "72075545-360f-4f95-b410-3937b04db244": {"doc_hash": "af4b2e9d7ed55677e997be11d8abbe8aedd1a7ba396df0396204716e76dfbd5b", "ref_doc_id": "6d82dc7b-c9b6-441d-8a61-b974258085d3"}, "2c65d021-7bdb-4560-a589-5b9009a09e67": {"doc_hash": "e74112a4ff2fbce8d9c01eff9160c9bd5663f406100d88103533e6be31c63b83", "ref_doc_id": "f8400d86-cd0a-422c-8497-7097f4e701d0"}, "2c5a27bd-3997-4f51-8f02-d7b02df60f16": {"doc_hash": "628d1033055cc5be899666a9bd11ba6d1a588ca43bf7873bd42cb602989f2ccd", "ref_doc_id": "06cb8027-5654-448c-abf5-55cc62dbbf38"}, "f591a6e6-0912-4caa-a3dd-a8ecaf24cc4b": {"doc_hash": "e4ef72939ed6596f409cf2ac772c4832388b76f7295171923ec306e125942875", "ref_doc_id": "5d620880-54b2-480a-850b-f2d1fa63c5c3"}, "2e1752f9-5040-4706-9dac-e77d7c376e76": {"doc_hash": "777c6238f58e6520fd2c6e65442961bf445b5baaf4d387d84bb319cb857df199", "ref_doc_id": "838e01ec-713d-4a8f-a0b1-ce1e9660836d"}, "0b0fb3d4-337b-4713-9d09-d67bdb98b372": {"doc_hash": "1a9b424d2f103173c125d893285492b27cf51fd5d00e13dba1a6934043616b6b", "ref_doc_id": "781b4df7-f027-474f-85e7-f04d491d7bbd"}, "cfff6798-af44-462e-a88e-fdb72cdd053e": {"doc_hash": "a35e3b2a256f13d1ac11432624d557065f965b79017ed6adccc9292033fca05e", "ref_doc_id": "6aef757b-2705-4b4c-85de-3705841202fb"}, "a4c590bf-3aca-42af-8546-66241fc59004": {"doc_hash": "41e1060e8b5d50279d3b9a241f9b65569989c837428443656c684745ba352b7d", "ref_doc_id": "93f0d803-f3fe-455d-a437-91ceebe39e03"}, "3f699fd8-fa21-46d3-807a-caae1df13f57": {"doc_hash": "476cb00647bf08281fbc3e4eece271f0607292736809d3249575c6263d8d5587", "ref_doc_id": "169ad65b-6139-4ce3-be60-a81550f8af9e"}, "4a503199-4a12-4813-ba4c-735e18c9f451": {"doc_hash": "b291d3d35d08808ab442b09efcba88a25ed585f5f7cbc4798d68e18751bd2aa9", "ref_doc_id": "530319fb-f437-4f72-9d5e-7526e0bb8564"}, "2e7fc0d2-2bf8-49c8-9de2-e0b3edb63ab9": {"doc_hash": "1eeb010fbe0d6449bb7602b1fa9a8bb0e5bdd78bce09eb0af0ab47a627753e7c", "ref_doc_id": "4b153848-3b09-4250-922a-a0273dec19dd"}, "82f1ab77-c5e9-4b39-a93a-acf57edeb8d6": {"doc_hash": "222aa948f909ebd10c176cf5cda1f08d05bfa6b4cf0d02af643c98676113bd70", "ref_doc_id": "b89ae138-d312-4360-a76e-36feae737b7f"}, "b597de2e-68f6-40c2-8a06-88021253370a": {"doc_hash": "85d3cd2c4cc6194f09e7b4101b3cc48f361ac47e5713cd11915c41ce9f7afa7f", "ref_doc_id": "4918253a-db34-4ce0-9b96-785aa7a4659c"}, "639048d9-c24f-4680-b64f-e1f608a232f8": {"doc_hash": "0fd9a9d89539845579f574ef288a02afa512d9c31d5d5cf932534b677b56fb04", "ref_doc_id": "d643b7d2-4ebd-413d-bd60-586e58d3a387"}, "2fa1383d-11fd-43da-aa36-a2495640907f": {"doc_hash": "52cf344a156db074987611ca6312a9f1e4d21b8cc30fe192171f14c761dd0641", "ref_doc_id": "56386cb6-8c14-4aa6-8bb6-6085f63062b0"}, "b341b476-aee5-46e4-a8fc-e4849caabc1d": {"doc_hash": "f98a3bc4937b4bd62b1707e5ba780ca7873cbfaedf968d84e3de337b794699b1", "ref_doc_id": "03593344-c1fb-45b6-a39b-984c3992b147"}, "ad426243-3edc-4210-9101-e57c2d2896c9": {"doc_hash": "f45bbc28f85ac18e78fa1424cce028b6a695c66727d53082681d1d54bace2db1", "ref_doc_id": "52e875c2-8342-4bce-bc5f-9920ece1517c"}, "4781c58f-470e-467d-b2e1-88a4d6c3a508": {"doc_hash": "6d885cdfed22832da2c0892e25ece34dea8db9a2d574139f1826fd0ac9fe0e6f", "ref_doc_id": "f68ab3a8-6c62-4704-95b9-267e36e9bd3e"}, "fc16ae55-1fe8-4f12-ae2f-3874f325b13c": {"doc_hash": "d5cb8c483e0866780acd0fd95295b3ed592bd0ba4cc493bd89127109d559cb5b", "ref_doc_id": "af91a16d-f4ba-4dc3-b34f-e846b69df9e6"}, "f5cddbb2-4e8d-4f83-9ec6-b9947ca8bd28": {"doc_hash": "177dabbb77b7a4481bd83b8d1669a22176f1b29c03a231413185233fbf5e1d45", "ref_doc_id": "e644e1ea-d4be-4740-a876-8fe026651a3a"}, "1d4f13bd-4d14-4602-ac6d-cd0ae918c989": {"doc_hash": "9b257309ecb9198dc279b09be406c669bb1dff41608548d23a444f494864782e", "ref_doc_id": "bcdd6387-f1c1-4fe9-b5e5-c7940e5e3efa"}, "6d4ba6c4-5fdc-43a9-9f9d-fa04622770e2": {"doc_hash": "1942dc7946eb1b98600a5cc17c9ea7a06b2c3d40840dae430043a818adbac803", "ref_doc_id": "3d040ded-0cc2-4d2e-bd99-035708c152e1"}, "0015ed86-0850-48f9-9e41-888c6e9a411e": {"doc_hash": "22693a3fbb839bccc90803cf713e97682302ac38c65444d401a9b307fd1a5305", "ref_doc_id": "88c74ffa-111f-453a-a2bf-f264e5904c77"}, "641ff123-3660-4228-b549-d0b1cdaf4e6a": {"doc_hash": "87dd651c829c23d77355cee59b2715ca48cfc3570e4687b9d4c16ca6c57b6c5f", "ref_doc_id": "69bf4d8c-4782-45f3-a468-74d49873df83"}, "e20270d5-ed4e-494c-8b79-9db1a0a0c35b": {"doc_hash": "7048e7ca423162507aa4d8daf822b0238a6ffdc1f14b124c820530bec79d9b25", "ref_doc_id": "0d36202a-648c-4c68-be47-b71ed769f8b5"}, "798be441-f4f4-4f28-9790-b06d4e6f5f74": {"doc_hash": "3d5b1b748e388ae43158c7ab7735435331b802d66874952df9b71ae53f003f60", "ref_doc_id": "784ccd52-66a6-4e4d-8340-6048220e91d4"}, "9824f763-2143-4c00-b27e-ba8447a02b5b": {"doc_hash": "35c5b83d8edae8f7e0f8e0c76ec7cafc638082e7bdde28787ac5d1b304460cf4", "ref_doc_id": "8e109689-d5f9-4bdb-a88e-03925419cac0"}, "0ed30b6d-e050-4b7b-b0c2-c3686bacf8b9": {"doc_hash": "8531272144e7a39d211b1a05356aae3341dfef4e15dfbba4788843ab45a2b800", "ref_doc_id": "be0a8aa4-341d-4dae-8e09-171028879662"}, "4826b065-56d8-49c7-a208-348f8758b9ba": {"doc_hash": "2a0318704a7bdbb3c4b780430b474aab196898b4b905c02e0f39635dda4f16b3", "ref_doc_id": "442c6f4a-066d-42b1-a2e2-48e1af44f583"}, "4d36d302-803a-4107-b63c-56ea5ac89295": {"doc_hash": "bcd6e9def74e78180fefc65cf054fed0d2dbe4c11d0ebc92dea329af7c70305b", "ref_doc_id": "456d6a23-92c2-4d4f-895c-49110d44ae7e"}, "2cf833da-e926-4b77-9c99-334451d5d6d5": {"doc_hash": "46d79d62d37e3e599eaf22948c2146f88fa2014cc96d33c719fcf95c896b7b1b", "ref_doc_id": "25bf98e8-2d7f-4d16-98c9-d97cfaae6cc5"}, "e17e57af-3662-4cd0-87b2-6ed03bce68f6": {"doc_hash": "25e9ea5152d980c5edf1af971923ef95517961222f54dee8bf1b74f542a65459", "ref_doc_id": "d7661e42-c331-47a9-85db-6167f15394dd"}, "97b88142-b7e8-44e6-b582-ea887b54a6fb": {"doc_hash": "6d57962c0c36e019e9a01484bb7e10369ee036a0636b65fc37421ebc639fd92d", "ref_doc_id": "99e2e083-ff3e-4077-aa66-d68737386858"}, "5c1dfcdc-f2d8-4a56-b53b-f4fbeb6a6d60": {"doc_hash": "3d7e9089e37d341a7f282cfc76902f003c84efc3d3b15c43b8438f04db89f700", "ref_doc_id": "cad399f2-85f7-424a-9d39-ff5f8dae78ec"}, "8028d491-3d1e-4aa2-b06d-c6cb1bf3ec31": {"doc_hash": "0f416f95267b126487a89918e3ea9e202f6169f5c34c776b530c5292422850dc", "ref_doc_id": "67bdb4d8-d636-49cd-a8bf-4ffabb768f2b"}, "e9a7e783-5682-4394-bc34-647b4c0465f0": {"doc_hash": "4d34a97274e010732bdbac2396a1a02bd1d862b0364f842f105f7dd02619219c", "ref_doc_id": "a9c3575a-f0fb-4a1b-931d-6eaa4eabe4a8"}, "f39a84fe-2119-4eca-83b4-60b792eb714f": {"doc_hash": "3a92b4248658d1e554ff9f613ea9738f6e4a8a0ebe36a582ba7dee86e462bb70", "ref_doc_id": "19b42217-41ff-4ffd-9605-ae352b3d28df"}, "6f0c669f-7a10-4b66-8186-64403ae8b472": {"doc_hash": "7e823c9a73e2c79a01e057d8ea61385aff5b8f7b94cd3ba21c61ec5f07e52439", "ref_doc_id": "a1645c90-d59d-43b7-8b69-dba53db5c265"}, "3c00b2c4-d83b-487c-b073-faa4236b73ae": {"doc_hash": "b1e7de37101e4f432e77fca45fb4d6e5fc001b90ab0c7dc9329a218e81c349fd", "ref_doc_id": "a1645c90-d59d-43b7-8b69-dba53db5c265"}, "97e3483a-7d8f-41bf-9a3b-4dd6c8c8f3a3": {"doc_hash": "391c7b8f51d49ddccaad0b9eac85c73684d664802e7a37154fa1e369db29f975", "ref_doc_id": "a1645c90-d59d-43b7-8b69-dba53db5c265"}, "70853f1a-1634-4b4e-afa2-0dcd5f8f2945": {"doc_hash": "d29299ac8cda918bcf07bcb509eee743a2e628e28482eaddcdbf214ce7cdb085", "ref_doc_id": "2e70bdf5-483a-4405-ad00-91f1e0be7d82"}, "b7d2f1b9-d088-46e0-b36b-8a123a879e7f": {"doc_hash": "a42f6343fc4f2cff0fc4ed7e8b003576568a280b51a487b493a34c3a62578bcb", "ref_doc_id": "fbea1b28-cb58-4a28-998c-280f74969772"}, "82dec902-c62d-4aca-a27b-660785531335": {"doc_hash": "83b1271737b48262077687310975c443f31dbcc4926423c994dfdb70bb8a10dd", "ref_doc_id": "fbea1b28-cb58-4a28-998c-280f74969772"}, "26d18597-fd6f-4ddf-a60a-fdd9a97b4cd8": {"doc_hash": "b746a1ef86d1a02d3deef28056509b5c1f0ff684c5162e14d431b8c8f2a7b42a", "ref_doc_id": "d4ed1f0f-4f53-4b79-9551-3406119737b0"}, "856ca02a-0d46-4064-b8b4-0ebe676ad5bc": {"doc_hash": "1207e057174033deac3a32927a7771ec67d9fe8abccec5deba8ddcf4deff2af9", "ref_doc_id": "d4ed1f0f-4f53-4b79-9551-3406119737b0"}, "36f661ae-69f7-4df9-abf7-1b1686815cf0": {"doc_hash": "bdb7297c16acb82236d16b4c5a405b62dd4608fb7dc75056d2970edcfb2b10f9", "ref_doc_id": "d4ed1f0f-4f53-4b79-9551-3406119737b0"}, "9cb8d6fe-5e94-4d0a-8757-80f54c55edc4": {"doc_hash": "8dbd0c25cd608cfa3755a2d4c5fcd3f4bfc880f576598b3d59106a7256738de1", "ref_doc_id": "132a1cf6-1b50-41ba-8b05-0abb8ae21fdf"}, "0e338248-0ca6-409b-9490-954fd3418a82": {"doc_hash": "911fbde607f6afe5b448dcfd3f2ecde49f1a830d26e862236b8c5ccdeb856de1", "ref_doc_id": "f155ac7c-c2e9-4f94-a98c-55aca5ba6981"}, "b57e5c60-02fb-4f32-9769-6b5a74025a4c": {"doc_hash": "116f8fde2bcdbcd3ead2e309cf4e38a7591279b1499b8ae6437374f31515da4d", "ref_doc_id": "9a77c1a4-7e2f-4219-a16d-9ffdd0dd5542"}, "8c08473b-1ed8-40b3-ab77-f65fa2007f88": {"doc_hash": "61ae0074128d73861bac3a4682b988cf51d07e5524d4cc99d5203f2dad6a52c0", "ref_doc_id": "3c98bff8-ca97-4771-ac4a-a44f68c8ee6b"}, "738ced3c-77b3-465d-a927-243d06d5c544": {"doc_hash": "01e2ab4071dcac95528e499f704b2b71556ed7cdd81d65337cd86195327fca35", "ref_doc_id": "14d9e1da-4499-4fa2-9397-85b6bedf50f7"}, "f07f87f5-1afe-4f83-ba83-95de478ee1c4": {"doc_hash": "23d34b232658a5f303a8aeb15388e107d431b4cb16bd1d0b76192928e5d84c1c", "ref_doc_id": "4fb59aff-ded2-42fe-be81-b240fa7c3639"}, "9a3daed2-bc53-4d66-a91f-6e628187e7fd": {"doc_hash": "ec606005c6b0325196b039a278c5ea13ef0913823edc1926435704641ec99887", "ref_doc_id": "e27de034-04bf-4483-abfe-0a3a782b6b02"}, "fb4d892d-a610-4ca7-a33f-9eccb3b7f453": {"doc_hash": "1bde6941b587b66b12e48b93cae991ab851370248015c39ac7e7849dc179c632", "ref_doc_id": "e9c6edee-b509-4101-8111-1617c70c0ac2"}, "29d73faf-0607-4c27-84ea-b18b1a5cd632": {"doc_hash": "a5cd6c10cbdb41f7ce2b354a1ccad46f16097f1eec591198d7687095a0b09f11", "ref_doc_id": "0cbbfaff-e21e-40e1-afc1-d64219a33373"}, "9ccb34e9-2c64-43ae-9d74-21e7b3a1b20a": {"doc_hash": "12088edc484650309ed691318853a4457020e56e301f0350cb4860dd51819ef3", "ref_doc_id": "ba9aa5bc-0a3b-4f41-a209-acbc0d38ff11"}, "a6457415-ec74-4622-a9a7-11f5137b3c29": {"doc_hash": "ae9d27a5c36dccd266a8d0f7faea82f7f10290ca212729e1f8def2efc892f782", "ref_doc_id": "f74f7195-e059-4a8a-97a1-e657a59b0a27"}, "45374ec0-83f0-42e4-8e78-e72ec0a07316": {"doc_hash": "94b9eba3fa52eae63186afaaaefcf7a5b01ba7a06827834e3370d3d4dd3445ad", "ref_doc_id": "aa724f7b-41f0-40ed-aa9b-5e650d545a1c"}, "58d272df-4b03-409e-8ba8-cb41c9fe546e": {"doc_hash": "5c530ff24d6f97e46976ecb93b73f66d9351071eba9944a54d3ba389435019cf", "ref_doc_id": "d6666747-3eb9-430e-8e64-491ba82ea26f"}, "f3ec63c7-3b2a-42b3-99f9-105780a9d8f7": {"doc_hash": "97162025223a15f5f9abdb8650dfe745f155f1cac3c9f2a283605a566266da70", "ref_doc_id": "1ab4fc40-fa27-4849-a153-ace10e32c2f6"}, "bca25276-dc78-45b6-ab8f-c75102eca0ca": {"doc_hash": "1dc8f162ddf84d695047a32da3231750dd025cafaa0a50d66dd8ede60d4747c5", "ref_doc_id": "1ab4fc40-fa27-4849-a153-ace10e32c2f6"}, "e06f7fb3-4d22-4f4a-ba79-1bc9bea6c4a0": {"doc_hash": "958fcb08d8eea667139322b2bba1ff9a3ad8d48be2021efd78af1ccfd2840ebe", "ref_doc_id": "1ab4fc40-fa27-4849-a153-ace10e32c2f6"}, "d50ca402-2158-4ebd-ac9d-c654feeefffd": {"doc_hash": "70490f505e48a68844557b7752528b7b622da34519d397909980aabe08de6ba3", "ref_doc_id": "84db4db8-c9e3-43b4-8b14-7153aaa4bde8"}, "85bfb1a4-88aa-4f7c-9aa9-63d5c2d01a25": {"doc_hash": "e1aad6d934cb3de9a21da0eb1f3e735f70e53b3a8d19031931239c1c4f3d4c91", "ref_doc_id": "5de429b9-7892-4e70-b594-f3814edf8a11"}, "e3f7f78e-eecb-4e8a-a948-6c9555c00928": {"doc_hash": "f8c923b21a34d4dbd9883156702ebd8d15c4891cf1d145ee855fcf8690a0f318", "ref_doc_id": "8a7a76b9-527b-4e53-8015-20f796fa05f9"}, "3dbb325a-3961-47f6-b1f6-f30a1f07d47d": {"doc_hash": "94fa5ac55edc271f29c4324a6c195b8196601f4a473fe298ea33ec46a285ad02", "ref_doc_id": "cb9e1c68-4209-4e61-b3d4-f2029464956e"}, "17e88fac-7f5f-4fe3-a8d4-9316d8fb3801": {"doc_hash": "1deae9677ad345579fc75ee5179687029cbf00bda89dcc9a16ec7d69de2ed6d8", "ref_doc_id": "56008cbf-4830-419e-a072-23973cb9f38a"}, "63217bee-58e9-4bc1-865d-98418b0e9da2": {"doc_hash": "1cb0c9ad4a75eef404242a1ae9f11517a2bceed7549a008089de46d5242cce92", "ref_doc_id": "e43bb6eb-5a67-49a9-b1aa-168447f11868"}, "b886c905-bcea-4ee3-aba9-7ab75149538f": {"doc_hash": "c084916b741ab770c3c2022bf86d2844cf30a3585b733e66a30913f5c97ca4d2", "ref_doc_id": "b7eb2722-b9fc-4e96-837e-3c311a14d922"}, "f3728820-8d11-4de2-9fda-9e86dde06085": {"doc_hash": "f1c614c33caa8ed1cbf9700bc3d0232af417ccd16702b032d8939ffcaf0da567", "ref_doc_id": "2922b33a-2de8-491a-aa77-eeb1aa649ee4"}, "3983fd76-81b5-470d-9e9e-2f37df8f9c2b": {"doc_hash": "1f12078b53f441a5e545fff1eafd65a6a298f54cf3daedec0637492d55bf8512", "ref_doc_id": "f37d1afd-727e-4df5-bca4-4f27852e6060"}, "03a070b8-881f-42b7-95c0-573ce57274bc": {"doc_hash": "3b535de99de3e290a31d7ce93091031a044cbc86c3de20ddd66a6cce48cb97b8", "ref_doc_id": "5cd37e51-9621-4ad2-b857-aca530b20899"}, "da1891cf-271a-41ef-b888-bb9aa255ac7b": {"doc_hash": "f389c4fd737879aba915cae87a21b256bb40a627e4d057302d2263dbdd5e3be9", "ref_doc_id": "389f2c75-8475-445d-87d4-5f40ac7012f4"}, "9b296380-1b68-4ad9-88ce-1648362b175a": {"doc_hash": "81cd1a5b5471b9641e2fd6e1cd3922dc312dbbdb34553459f1b0f51ed0cf6c7e", "ref_doc_id": "607224dd-30c1-40e3-afe3-1a2205542859"}, "96fed465-7783-4922-a0f7-d6e65f806136": {"doc_hash": "c78ad7bf139138ec0fcf0ed0bc0f95c0d8295c6db7cd04fabb9173d05b54d7b9", "ref_doc_id": "cb2a2d58-0000-4dc0-97c4-3c942287aa85"}, "634c3fe9-27a1-49a3-a830-da87c356d905": {"doc_hash": "e497db46a82307ee043853ec353b4f4b918b74ee76a13c8e911113c73001fceb", "ref_doc_id": "cb422583-53ad-449a-93a7-e499daab257b"}, "f2043159-94ab-4494-bf09-156d1d6bf39f": {"doc_hash": "51be957c90e7d96ceb3167cbe04d9ef6f77afe1c961ab340ff494a0aac54f6bd", "ref_doc_id": "8aca293f-d757-46ce-b66a-8321f5422e82"}, "e38fa34b-fa4e-4b24-a96b-986be8e74004": {"doc_hash": "ccddfb15a38849e1139433272b087318aaeb49d8f654292261439d92b78efe68", "ref_doc_id": "4e4523ce-d22b-4cfb-9ee1-61bc462a630e"}, "383d988d-0ee7-4cf8-ada8-4a1c812a6700": {"doc_hash": "a69712af3759a6bd2161a6eba93bbb4335ea47266b5f3377faa355af3950ea41", "ref_doc_id": "ec1a4890-8bbe-4dc4-ab06-62ba9326de8a"}, "1f66bf9e-2d92-4643-af5c-0c2770a363a2": {"doc_hash": "0229326d4f247144719abb260f6aa0dba6aa675fd5c1f514cc752573dce6d4df", "ref_doc_id": "5a08ab8c-13cd-4713-a71b-54644cd34614"}, "49a91a70-5d36-464a-bc60-e5ec420e6340": {"doc_hash": "804592da07100d36fcb2f6a669804d688dcd98d526e2da03851ecc1bd4fc1209", "ref_doc_id": "c9db68f9-2ac7-49bc-a5c8-e972138b3294"}, "e4da969f-b9e1-45e2-b6b7-9cb840dcf511": {"doc_hash": "640c450dc66364a5fbfa1a2e0e49466a5c066d186ee949587f476dd009d2959d", "ref_doc_id": "7f3befc3-89d6-450a-9591-b22f30b71b4d"}, "6a60acc7-dce9-4d89-b12c-602afe592465": {"doc_hash": "9dd812b7929770a019723f6000d3eba2d27f61c630fd69683e39228e364116a0", "ref_doc_id": "41ad57af-db56-432e-9473-80db7722049f"}, "ba583341-04b7-4d03-bbb0-74fef69f88d4": {"doc_hash": "72aa1a1ee916719b85145e3bc64d62fada9bd6bd27144eceaf10250fc9c81b30", "ref_doc_id": "570497e1-9600-49d0-8517-da7b966b29ef"}, "cf6207db-f6f6-4e1e-a552-1e0d78b11c12": {"doc_hash": "15006ddb60254caa89887f55b83b6d657e30e10a891f99837001d95fa89a828b", "ref_doc_id": "5a4a4cbe-4336-4c1e-a4d9-7ce32945cb93"}, "7ac749c2-25dc-427e-bbf6-7bc153884d75": {"doc_hash": "244aa9f96b5324254c7650d36ee4f46cfcc15202d1e2b347d0b29864797b37c6", "ref_doc_id": "f54bd317-fca1-409a-a58d-d329d58b2fe5"}, "59fd3378-7f78-4b76-a992-e661390475ec": {"doc_hash": "afef9e3c92e6dfb12fc2162b4a21118d1e46428be274b2b16e57b15f48387f45", "ref_doc_id": "9edbdfce-5668-495f-b7a7-c438597f6ec1"}, "08d86abf-0785-4394-9ee8-248da5617653": {"doc_hash": "1a31cf538eaf371f07976dcd425d71fd5e93b7af12b678c895d0222f543119df", "ref_doc_id": "ea267aee-3967-404c-a7e9-d002ea1261b4"}, "b59a014a-440f-4089-bff1-ece70fc41bcd": {"doc_hash": "3661355cfc56f57f9055916077bb5adf55444b1bf755048cb52f24cba16efafc", "ref_doc_id": "7bb12367-2344-408c-981f-7424f080d9e7"}, "1c1ab13f-305d-4740-b58e-f8fba23a49a2": {"doc_hash": "9eeff2db15a0af0d8d101e93de217f572593f1d34f26baa8db2c78f1b0780850", "ref_doc_id": "159d1e7e-63ec-4219-9d12-5641b70950b0"}}, "docstore/data": {"d5fd6b32-2ec5-4694-bc83-65670fa3dde5": {"__data__": {"id_": "d5fd6b32-2ec5-4694-bc83-65670fa3dde5", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "16ba89ae-afb1-41b9-8b68-a0bb40804ec1", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e1a285267b5d29da293a63f33204a1b3c869fee0e3bf7b1ba10f6aa168e23d28", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "20f5d863-2928-4fc3-9d80-30e2abd7d2bb", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e2934d9f877e3f783af3ba105454ffd49fd1854da2ab998ac4c7f4867387cd7d", "class_name": "RelatedNodeInfo"}}, "hash": "b7375761c7b5049df202d1e1d4ce63933fec04b17800c31ad1fcc96399c8d18a", "text": "What You'll Use\n\n  * A trial Snowflake Account with `ACCOUNTADMIN` access\n  * A Matillion account, provisioned through snowflake's partner connect", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "20f5d863-2928-4fc3-9d80-30e2abd7d2bb": {"__data__": {"id_": "20f5d863-2928-4fc3-9d80-30e2abd7d2bb", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a41622d0-5ce0-4a54-aa66-adf556aec1a3", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e7f2f542ac60ee936ff88bd374d49ac43d017feaaa5f013e937341695969274f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d5fd6b32-2ec5-4694-bc83-65670fa3dde5", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b7375761c7b5049df202d1e1d4ce63933fec04b17800c31ad1fcc96399c8d18a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3d8ec722-df1f-4da4-b0db-1b6d3b4ff52c", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7888c915ced586f84799da2eb13cc08378a02984b3b67e1be2d415a55cc86c07", "class_name": "RelatedNodeInfo"}}, "hash": "e2934d9f877e3f783af3ba105454ffd49fd1854da2ab998ac4c7f4867387cd7d", "text": "What You'll Learn\n\n  * How to source 3rd party data from Snowflake data marketplace\n  * How to use Matillion's GUI to build end-to-end transformation pipeline\n  * How to use Matillion to extract real time data from public APIs\n  * How to leverage Matillion scale up/down Snowflake's virtual warehouses", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3d8ec722-df1f-4da4-b0db-1b6d3b4ff52c": {"__data__": {"id_": "3d8ec722-df1f-4da4-b0db-1b6d3b4ff52c", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22a7fc75-99e7-4941-a892-85e21ef0e3af", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "d76936554db036c6543eaa7360460142bab2363c7b3ef6835271a5962be81b82", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "20f5d863-2928-4fc3-9d80-30e2abd7d2bb", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e2934d9f877e3f783af3ba105454ffd49fd1854da2ab998ac4c7f4867387cd7d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cbc84ffe-7a9b-4f5c-9b64-00879822f9dc", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "5f6d857431e4b9cc03bdb2901f527cf74b7f47fbca283d0368a4354d6db5dc0b", "class_name": "RelatedNodeInfo"}}, "hash": "7888c915ced586f84799da2eb13cc08378a02984b3b67e1be2d415a55cc86c07", "text": "What You'll Build\n\n  * An end to end data transformation pipeline for Financial Services data leveraging Matillion and Snowflake, leveraging different data sources - joining, transforming, orchestrating them all through user friendly, and easily managed GUI services\n\nYou are a stock portfolio manager of a team of 10 traders !!! Each of your\ntraders trade stocks in 10 separate industries. You have with you available 10\nyears of historical data of trades that your team performed, sitting in an S3\nbucket - you know what stocks they traded (BUY or SELL), and at what price.\n\nYou would like to aggregate their Profit & Loss, and even get a real time\naggregated view of total realized and unrealized gains/loss of each of your\ntraders. To accomplish this, we will follow the following steps:\n\n  1. Acquire stocks historical data, freely provided by Zepl, from snowflake data marketplace. This will create a new database in your snowflake account.\n  2. Launch a Matillion ETL instance through snowflake partner connect.\n  3. Use Matillion to :\n\n  * Ingest your traders' historical data sitting in a S3 bucket, into a Snowflake table.\n  * Develop a transformation pipeline to create each trader's PnL as of today, by joining with stock data from Zepl\n  * Leverage Yahoo Finance API to get real time stock data\n\nThe 10,000 foot view of what we will build today:\n\n!2_Lab_Overview\n\nSneak Peek of the orchestration job that will accomplish all this, nested with\n2 transformation jobs within it:\n\n!2_sneak_peek\n\nLogin to your snowflake account. For a detailed UI walkthrough, please refer\n[here](https://docs.snowflake.com/en/user-guide/ui-snowsight-gs.html#getting-\nstarted-with-snowsight).\n\nAs the `ACCOUNTADMIN` role, navigate to Marketplace, and search for \"zepl\".\nClick on the tile.\n\n!3_zepl\n\nNext:\n\n  1. Click on \"Get Data\" on the right.\n  2. A pop-up screen opens: prefix the database name with \"ZEPL_\" so the name becomes `ZEPL_US_STOCKS_DAILY`\n  3. Click on \"Get Data\" in the center.\n\n!3_get_zepl\n\nSo what is happening here? Zepl has granted access to this data from their\nSnowflake account to yours. You're creating a new database in your account for\nthis data to live - but the best part is that no data is going to move between\naccounts! When you query, you'll really be querying the data that lives in the\nZepl account. If they change the data, you'll automatically see those changes.\nNo need to define schemas, move data, or create a data pipeline either!\n\nClick on Query Data to access the newly created database.\n\n!3_query_datal\n\nA new worksheet tab opens up, pre-populated with sample queries. The newly\ncreated database has 3 tables. Feel free to click on them and browse what\ntheir schema looks like, and preview the data they have.\n\n!3_zepl_worksheet\n\nCongrats ! You now have decades worth of stock data acquired in minutes !\n\nOne more thing: we need to locate and note down our snowflake account\ninformation for subsequent steps. To locate snowflake account information,\nnavigate to **Admin \u2192 Accounts** , and click on the link icon next to the\nAccount name to copy the account name URL to your clipboard (The **text that\nprefixes .snowflakecomputing.com** is the account information needed to\nconnect Matillion to Snowflake). Paste it in your worksheet, we will need it\nin section 5.\n\nIn the screenshot below, the account text we are look for is: `bjjihzu-\nji91805`\n\n!3_account_id\n\n  1. Navigate to Admin \u2013> Partner Connect, then click on the **\" Matillion ETL\"** tile\n\n!4_pc_metl\n\n  2. All fields are pre-populated, **give additional \u2018Optional Grant ' to ****`ZEPL_US_STOCKS_DAILY`** **database** (created in previous section), then **click Connect**\n\n!4_og\n\n!4_metl_connect\n\n  3. Once the partner account has been created, **Click Activate**\n\n!4_activate\n\nYou will be redirected to the Matillion ETL web console. Your username and\npassword will be auto-generated and sent to the same email you provided to\nlaunch your Snowflake trial account.\n\n  1. Once logged in to Matillion, you will be prompted to join a project.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cbc84ffe-7a9b-4f5c-9b64-00879822f9dc": {"__data__": {"id_": "cbc84ffe-7a9b-4f5c-9b64-00879822f9dc", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "22a7fc75-99e7-4941-a892-85e21ef0e3af", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "d76936554db036c6543eaa7360460142bab2363c7b3ef6835271a5962be81b82", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3d8ec722-df1f-4da4-b0db-1b6d3b4ff52c", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7888c915ced586f84799da2eb13cc08378a02984b3b67e1be2d415a55cc86c07", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ef18236d-f472-4fa5-99da-649dea88b574", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "738eb2069c747afaaa202937c14211b53134038f538dcc68e5488b4d8ab6cba4", "class_name": "RelatedNodeInfo"}}, "hash": "5f6d857431e4b9cc03bdb2901f527cf74b7f47fbca283d0368a4354d6db5dc0b", "text": "In the screenshot below, the account text we are look for is: `bjjihzu-\nji91805`\n\n!3_account_id\n\n  1. Navigate to Admin \u2013> Partner Connect, then click on the **\" Matillion ETL\"** tile\n\n!4_pc_metl\n\n  2. All fields are pre-populated, **give additional \u2018Optional Grant ' to ****`ZEPL_US_STOCKS_DAILY`** **database** (created in previous section), then **click Connect**\n\n!4_og\n\n!4_metl_connect\n\n  3. Once the partner account has been created, **Click Activate**\n\n!4_activate\n\nYou will be redirected to the Matillion ETL web console. Your username and\npassword will be auto-generated and sent to the same email you provided to\nlaunch your Snowflake trial account.\n\n  1. Once logged in to Matillion, you will be prompted to join a project. Click **Create Project** to get started.\n\n!5_metl_cp\n\n  2. Within the **Project Group** dropdown select **\" Partner Connect\"**, add a new name for the project (for the purpose of this lab we will name it **\" TraderPnL\"**). You can leave Project Description blank, and the check-box's with the default settings. Click **Next**\n\n!5_project_name\n\n  3. In the **AWS Connection** set the **\" Environment Name\"** (for the purpose of this lab we will name it **\" Lab\"**). Click Next\n\n!5_lab\n\n  4. Enter your Snowflake Connection details here. The Account field is the same text you saved from Snowflake UI in section 3. Also enter your Snowflake account \"Username\" and \"Password\". Click Next.\n\n!5_metl_sf_connect\n\n  5. Now we will set the Snowflake Defaults. Select the following default values:  \nDefault Role: `ACCOUNTADMIN`  \nDefault Warehouse: `PC_MATILLION_WH`  \nDefault Database: `PC_MATILLION_DB`  \nDefault Schema: `PUBLIC`\n\nClick **Test** , to test and verify the connection. Once you receive\n**success** response, you are properly connected to Snowflake. Click\n**Finish** , and now the real fun begins!\n\n!5_sf_defaults\n\nWe will now create our first orchestration job. The job will consist of first\nloading the trading history from AWS S3 to a single Snowflake table. To\nefficiently work with the data, we will modify the warehouse to the\nappropriate size using the Alter Warehouse component. We will then create two\nseparate transformation jobs to perform complex calculations and joins and\ncreate new tables back in Snowflake. Finally, we will scale down our warehouse\nwhen job completes. By the end of it, the orchestration job should look like\nthis:\n\n!2_sneak_peek\n\nLets get started!!\n\nWithin the Project Explorer on the left hand side, right-click and select\n**Add Orchestration Job**.\n\n!6_add_orch\n\nName your job **\" VHOL_orchestration\"** and click \"OK\". You will be prompted\nto switch to the new job, click **\" Yes\"**. You should now see a blank\nworkspace (new tab)\n\n!6_orch_name\n\nThe following steps will walk through adding different components to the\nworkspace to build our data pipeline. The first step is to load trading data\nfrom S3 using the **S3 Load Generator** component.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ef18236d-f472-4fa5-99da-649dea88b574": {"__data__": {"id_": "ef18236d-f472-4fa5-99da-649dea88b574", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4120034d-76ba-46e3-8bca-f866fe245a28", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "fe7f2b77cf592cfc06701c0de7c080d32c371d998de5605bcb57c1037d52b13f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cbc84ffe-7a9b-4f5c-9b64-00879822f9dc", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "5f6d857431e4b9cc03bdb2901f527cf74b7f47fbca283d0368a4354d6db5dc0b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d8811708-a7a8-48ac-b183-f2394b6c53ff", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "5c31ecc9c4e759bc44fdc51d490269b2318eaec1be4dbe71ef5cbf2b48b65779", "class_name": "RelatedNodeInfo"}}, "hash": "738eb2069c747afaaa202937c14211b53134038f538dcc68e5488b4d8ab6cba4", "text": "S3 Load Generator\n\n  1. From the Components section on the left hand side, expand the Wizards folder. Find the S3 Load Generator component.\n\n!6_s3_lg\n\n  2. Drag and drop the S3 Load Generator component onto the workspace as the first step after the Start component.\n  3. A S3 Load Generator menu will automatically pop up. Click the ... button to explore S3 bucket\n  4. Copy and paste the S3 bucket into the wizard: `s3://mtln-techworkshops/VHOL_Trades/`\n\nClick **Go** to explore the contents of the bucket, you should see several CSV\nfiles - these are trade history data of 10 traders, trading in 10 different\nindustries. Highlight the file name `ARYA_SWINFRA.csv` and click **Ok**.\n\n!6_s3_files\n\n  5. You can now sample the dataset by clicking **Get Sample** , it will return a 50 row sample of the dataset. Click **Next**.\n  6. Matillion will guess the schema on the dataset, you can make any modifications to the configuration. For the purpose of this lab, we will keep the configuration settings as **Default**. Click **Next**\n\n!6_file_schema\n\n  7. Click **Create & Run**, this will render two components on the VHOL_orchestration canvas (Create Table and S3 Load).\n\n!6_create_run\n\n_Note if you click test you may receive a permission error on the S3 bucket.\nYou can ignore this for the lab, and move on to the next step. Don 't worry\nabout any errors at this point, we will resolve them in the upcoming steps._\n\n  8. Link the **Start** component to the **Create Table** component.\n\n!6_start_ct\n\n  9. Click on the **Create Table** component, in the Properties Tab you will see several parameters. Note the **Create/Replace** parameter by default is set to Create. Click the ... button and change it to `Replace` from the dropdown menu.\n\n!6_replace\n\n  10. Now we will modify the size of each column. In the properties tab, click on the ... button for the **Columns** parameter. Update the Size for each Column name as shown in figure below, then click Ok.\n\n!6_column_size\n\n  11. Change the component name and table name to `TRADES_HISTORY`, by clicking on the ... button in the Properties tab\n\n!6_comp_name_TH\n\n  12. Right click on the TRADES_HISTORY component and select **Run Component**. This will create a new table in your Snowflake account !\n\n!6_run_comp\n\n  13. Next, Select the S3 Load component, and change the Name in the Properties tab to **LOAD TRADES_HISTORY**.\n  14. Change the **S3 Object Prefix** by clicking on the ... button to select the VHOL_Trades directory, and then click OK.\n\n!6_s3_prefix\n\n  15. Change the **Pattern** parameter bu clicking on the ... button, and change to `.*`. Click OK.\n  16. Change the **Target Table** parameter by clicking on ... button, and select TRADES_HISTORY from the drop down, click OK.\n  17. The LOAD TRADE_HISTORY component Properties should now reflect as shown below, all other fields should be left as default.\n\n!6_load_history\n\n  18. Right click on the LOAD TRADE_HISTORY component and run it by clicking **Run Component**.\n  19. Check back in your Snowflake console to confirm the TRADES_HISTORY table was created, and data loaded - 1.7 million rows, and compressed to < 10 MB !\n\n!6_sf_th", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d8811708-a7a8-48ac-b183-f2394b6c53ff": {"__data__": {"id_": "d8811708-a7a8-48ac-b183-f2394b6c53ff", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6019b9d5-4ec0-4014-938b-b2d9d2e333cd", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "bacabffd1ea3435699082cba37442811e12956701b3344a9a83150d577a21e8a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ef18236d-f472-4fa5-99da-649dea88b574", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "738eb2069c747afaaa202937c14211b53134038f538dcc68e5488b4d8ab6cba4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b753d218-d568-4bfd-86ad-ca8c6c906b14", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "4413b9bea9ffb3a9155366d5966b960afd0d1f3bbff0b227af648b0b764d633c", "class_name": "RelatedNodeInfo"}}, "hash": "5c31ecc9c4e759bc44fdc51d490269b2318eaec1be4dbe71ef5cbf2b48b65779", "text": "Alter Warehouse\n\nThe next step of the orchestration is to scale up Snowflake's Virtual\nWarehouse to accommodate resource heavy transformation jobs.\n\n  1. Find the Alter Warehouse component from the Components pane.\n  2. Drag and drop the component as the last step, connected to the LOAD TRADES_HISTORY component. Click on the component to edit its Properties.\n  3. Rename of the component to `Size Up Warehouse to M`.\n  4. Change the **Command Type** to Set.\n  5. A new field will appear, edit Properties to add a new line with Property set to **WAREHOUSE_SIZE** and Value set to `MEDIUM`.\n\n!6_WH_M\n\n  6. Your orchestration job should now look like this:\n\n!6_end\n\nThe trading history data from S3 gives a listing of ten traders with both BUY\nand SELL actions. In this transformation job, the transactions will be\naggregated to find out the number of shares bought/sold and for how much. With\nthose figures, the net # of shares and value will be calculated, and a table\nwill be created, enriched with each traders' average price for each stock. The\nbelow figure shows the end product of the transformation pipeline we will\ncreate in this section:\n\n!7_1_job_view", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b753d218-d568-4bfd-86ad-ca8c6c906b14": {"__data__": {"id_": "b753d218-d568-4bfd-86ad-ca8c6c906b14", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7fcdfcf4-e998-4585-acce-6b8e74a46f06", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f8983989dc4fea55baaa51f5ce6a11da80ba664dc105a57e035a27144fedd0cd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d8811708-a7a8-48ac-b183-f2394b6c53ff", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "5c31ecc9c4e759bc44fdc51d490269b2318eaec1be4dbe71ef5cbf2b48b65779", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bf0d85a2-9c23-44f6-8b8a-9bdaa3bff94d", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "59f7961b3e13c37d1e939eb2610d156d929558c0d68a4e555ea44f993e6c3de7", "class_name": "RelatedNodeInfo"}}, "hash": "4413b9bea9ffb3a9155366d5966b960afd0d1f3bbff0b227af648b0b764d633c", "text": "Let's get started!\n\n  1. Within the Project Explorer, right-click and select **Add Transformation Job**.\n\n!7_2_add_tran\n\n  2. Set the title to `VHOL_CURRENT_POSITION`, and click Ok.\n  3. Next prompt will ask you to switch to the new job, click NO.\n  4. From the explorer, drop the newly created job as the next step after the Alter Warehouse component within the previously created orchestration job (VHOL_orchestration) and complete the connection, as shown below:\n\n!7_3_orch_view\n\n  5. Double click the new transformation job VHOL_CURRENT_POSITION. A new tab gets opened with a blank canvas. We will now build a transformation pipeline.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bf0d85a2-9c23-44f6-8b8a-9bdaa3bff94d": {"__data__": {"id_": "bf0d85a2-9c23-44f6-8b8a-9bdaa3bff94d", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "259ac5be-f8ee-4bf4-8b71-c75220a9de76", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "136ace6f2b5ba5cefd1f1e0ea99e06df3cb11bccd258a1d422d76359767b5990", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b753d218-d568-4bfd-86ad-ca8c6c906b14", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "4413b9bea9ffb3a9155366d5966b960afd0d1f3bbff0b227af648b0b764d633c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "02bc5bf1-d04b-49fd-a9a5-e61596725546", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "79c29aa5202c60bba0b6c80a258bc918cebdc0a435ade270890cdaeaeac2ab19", "class_name": "RelatedNodeInfo"}}, "hash": "59f7961b3e13c37d1e939eb2610d156d929558c0d68a4e555ea44f993e6c3de7", "text": "Table Input \\- Read\nTRADES_HISTORY\n\nFind/search the **Table Input** component in the component palette under Data\n> Read folder and drop it on the blank canvas, then set it up with the\nappropriate properties below:\n\nName: `TRADES_HISTORY`  \nDatabase: [Environment Default]  \nSchema: [Environment Default]  \nTarget Table: `TRADES_HISTORY`  \nColumn Names: Select all columns by clicking the ... button\n\n!7_4_Table_Input", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "02bc5bf1-d04b-49fd-a9a5-e61596725546": {"__data__": {"id_": "02bc5bf1-d04b-49fd-a9a5-e61596725546", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "489d5cb2-62c6-443e-aa71-6bab006a24d9", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "bf314d0dec2f5799fc20a96df4d578f2d74dd4f6a6708cab6048ee040baf886b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bf0d85a2-9c23-44f6-8b8a-9bdaa3bff94d", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "59f7961b3e13c37d1e939eb2610d156d929558c0d68a4e555ea44f993e6c3de7", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8dd3b393-32d8-470c-adc5-a36a9a1a69b8", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e0a469f1d73aa554efcf448e589dfd598671fe00f0db7e2b50bfdf1ba5c49a89", "class_name": "RelatedNodeInfo"}}, "hash": "79c29aa5202c60bba0b6c80a258bc918cebdc0a435ade270890cdaeaeac2ab19", "text": "Filter \\- Filter Buy\nactions\n\nNow, let's add a second step to filter the data based on the type action.\n\n  1. Find/Search the Filter component in the component list under Data > Transform folder and drop it on the canvas, connect it to the TRADES_HISTORY component.\n  2. Click on the component and update the **Name** property to `ACTION = BUY`\n  3. Then use the Filter Conditions property wizard, add a line with the following settings:\n\nInput Column: `ACTION` Qualifier: `Is` Comparator: `Equal to` Value: `BUY`\n\nYour Transformation Job should now look like this:\n\n!7_5_Filter", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8dd3b393-32d8-470c-adc5-a36a9a1a69b8": {"__data__": {"id_": "8dd3b393-32d8-470c-adc5-a36a9a1a69b8", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e4f7b0a3-1c41-4b02-80fe-88500bbcb6ba", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "36b10a2f333005698c92d56f4bbc4f17f6e5dacbb7c20aef2b0dd814c021bdc9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "02bc5bf1-d04b-49fd-a9a5-e61596725546", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "79c29aa5202c60bba0b6c80a258bc918cebdc0a435ade270890cdaeaeac2ab19", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c443c40e-97ec-4c94-85a0-ef6903d34bd1", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "acac010c548b887ca7810a8586465d504f00df7bae62865f168de260c4cd4fba", "class_name": "RelatedNodeInfo"}}, "hash": "e0a469f1d73aa554efcf448e589dfd598671fe00f0db7e2b50bfdf1ba5c49a89", "text": "Calculator\n\nNow we will add a calculator to calculate the amount of investment in each buy\ntransaction:\n\n  1. Find/Search the CALCULATOR component under **Data > Transform** folder and link it to the ACTION = BUY component created in the previous step.\n  2. Click on the component and name it `TOTAL_PAID`\n  3. Edit the Calculations property and use the expression builder to create the calculation:\n\n  * Add a new field with \"+\" button, name it TOTAL_PAID\n  * Build the expression: `-(\"NUM_SHARES\" * \"PRICE\")`\n\n!7_6_Calc\n\nClicl OK. Your transformation job should now look like this:\n\n!7_7_calc_view", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c443c40e-97ec-4c94-85a0-ef6903d34bd1": {"__data__": {"id_": "c443c40e-97ec-4c94-85a0-ef6903d34bd1", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8db00887-b0a1-473b-a4ce-0718face2a46", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "4d35fce954a27bb73e042ae94b6697b51576127a09394e34da7e9a2fcf0fe211", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8dd3b393-32d8-470c-adc5-a36a9a1a69b8", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e0a469f1d73aa554efcf448e589dfd598671fe00f0db7e2b50bfdf1ba5c49a89", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3cc04899-14b9-4474-8d41-5cb0b467010a", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "84fd2a955c143744ba14a33ea4f67d3585501bb210b2f2a1d7b69204c803fe89", "class_name": "RelatedNodeInfo"}}, "hash": "acac010c548b887ca7810a8586465d504f00df7bae62865f168de260c4cd4fba", "text": "Aggregate\n\nNext we will sum up the investments made in each stock by aggregating.\n\n  1. Let's add an Aggregate component from the palette under **Data > Transform** folder and link it to the previous Calculator component.\n  2. Click on the component to edit the Properties:  \nName: `BUY_AGG`  \nGroupings: `TRADER, SYMBOL`\n\n  3. Open the Aggregations field wizard and add 2 lines then configure them like this:  \n **Source Column: Aggregation Type  \n** TOTAL_PAID: `Sum`  \nNUM_SHARES: `Sum`\n\n!7_8_agg\n\nClicl OK. Your transformation job should now look like this:\n\n!7_9_agg_view", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3cc04899-14b9-4474-8d41-5cb0b467010a": {"__data__": {"id_": "3cc04899-14b9-4474-8d41-5cb0b467010a", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d5dd1f7e-9420-4538-ad4a-5209993e1381", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b7aaa7ecfbb4bcff59229f26903bcb288e3ef4547ccd258c27a14786ef67fba5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c443c40e-97ec-4c94-85a0-ef6903d34bd1", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "acac010c548b887ca7810a8586465d504f00df7bae62865f168de260c4cd4fba", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f1259519-5803-4e5f-b1d6-c916d9673530", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7410d1fa3153b06788330bf9be80b391637580b80be7aae6bf2b916616ee0c38", "class_name": "RelatedNodeInfo"}}, "hash": "84fd2a955c143744ba14a33ea4f67d3585501bb210b2f2a1d7b69204c803fe89", "text": "We will now copy & paste the Filter, Calculator, and Aggregate components\nto create a similar pipeline, but for SELL filter.\n\n  1. Right-click on each of the components and select copy.\n  2. Paste the component by right clicking on a blank area in the canvas, and selecting paste. Connect the new components as shown below. Your Transformation Job show now looks like this:\n\n!7_10_cp\n\n  3. Update the properties of the new components with the information below:  \n3.1 Filter:\n\n  * Name: `ACTION = SELL`\n  * Filter Conditions: \n    * Input Column: `ACTION`\n    * Qualifier: `Is`\n    * Comparator: `Equal to`\n    * Value: `BUY`\n\n!7_11_filter\n\n3.2 Calculator:\n\n  * Name: `TOTAL_GAIN`\n  * Add a new field with \"+\" button, name it TOTAL_GAIN\n  * Build the expression: `(\"NUM_SHARES\" * \"PRICE\")`\n\n!7_12_calc\n\n3.3 Aggregate:\n\n  * Name: `SELL_AGG`\n  * Groupings: `TRADER, SYMBOL`\n  * Aggregations: `TOTAL_GAIN, Sum, NUM_SHARES, Sum`\n\n!7_13_agg\n\nWe are now going to join the 2 flows together.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f1259519-5803-4e5f-b1d6-c916d9673530": {"__data__": {"id_": "f1259519-5803-4e5f-b1d6-c916d9673530", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cd17128d-326a-4903-a0c5-c77c59478b21", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "aecd732bbe12d2769ce14ed010b8624b198dc3e1a5bd14f7af87f91c8706b15e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3cc04899-14b9-4474-8d41-5cb0b467010a", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "84fd2a955c143744ba14a33ea4f67d3585501bb210b2f2a1d7b69204c803fe89", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fad4b56b-4079-47a3-9eb6-5263ed90c3d2", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c630bfb2ea84aac5251f53925cc1898dfc6305b106b0aa0ecc22c4688dd31a49", "class_name": "RelatedNodeInfo"}}, "hash": "7410d1fa3153b06788330bf9be80b391637580b80be7aae6bf2b916616ee0c38", "text": "Join \\- Join the BUY\nand SELL aggregations into a single dataset\n\n  1. Find/Search the Join component under Data > Join folder and drag and drop it as the last step of the job. Connect the Join component to both the BUY_AGG and SELL_AGG.\n  2. Click on the Join component to edit the Properties:\n\n  * Name: `Join BUY and SELL Transactions`\n  * Main Table: `BUY_AGG`\n  * Main Table Alias: `buy`\n  * Joins: `SELL_AGG, sell, Inner`\n  * Join Expressions \u2013> buy_Inner_sell: `\"buy\".\"TRADER\" = \"sell\".\"TRADER\" and \"buy\".\"SYMBOL\" = \"sell\".\"SYMBOL\"`\n  * Output Columns: \n    * buy.TRADER: `TRADER`\n    * buy.SYMBOL: `SYMBOL`\n    * buy.sum_TOTAL_PAID: `sum_INVESTMENT`\n    * buy.sum_NUM_SHARES: `sum_SHARESBOUGHT`\n    * sell.sum_TOTAL_GAIN: `sum_RETURN`\n    * sell.sum_NUM_SHARES: `sum_SHARESSOLD`\n\n!7_14_join\n\nYour Transformation Job should now look like this.\n\n!7_15_join_view", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fad4b56b-4079-47a3-9eb6-5263ed90c3d2": {"__data__": {"id_": "fad4b56b-4079-47a3-9eb6-5263ed90c3d2", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "848363e0-a1b6-4dfd-afdc-21ecab16bf38", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "371300188f9f77545c2f135d5a0d51fa6411992edc92f9996b09c67fa70235ec", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f1259519-5803-4e5f-b1d6-c916d9673530", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7410d1fa3153b06788330bf9be80b391637580b80be7aae6bf2b916616ee0c38", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6f162758-a4a3-4653-a4fd-ed3ff4478886", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "063467bb6ce8ba9c3b0d925fa57a3439f6eac7fc26b388e9dd996cbd91093e36", "class_name": "RelatedNodeInfo"}}, "hash": "c630bfb2ea84aac5251f53925cc1898dfc6305b106b0aa0ecc22c4688dd31a49", "text": "Calculate the amount of investment in each buy transaction\n\nAdd a new Calculator component to the canvas and set up with the below values\n( _use the same steps than in previous Calculator components to set up the\nexpressions_ ).\n\n  * Name: `NET_SHARES NET_VALUE`\n  * Include Input Columns: Yes\n  * Expressions: \n    * NET_SHARES: `\"sum_SHARESBOUGHT\" - \"sum_SHARESSOLD\"`\n    * NET_VALUE: `\"sum_INVESTMENT\" + \"sum_RETURN\"`\n\n!7_16_calc", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f162758-a4a3-4653-a4fd-ed3ff4478886": {"__data__": {"id_": "6f162758-a4a3-4653-a4fd-ed3ff4478886", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e00e35b5-cefc-48dd-90fe-a087fc48bafa", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "4ba3c563f416bf6fd2c18441a708c3fd592c5499f316a34fd6bdd34fc13c340d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fad4b56b-4079-47a3-9eb6-5263ed90c3d2", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c630bfb2ea84aac5251f53925cc1898dfc6305b106b0aa0ecc22c4688dd31a49", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "45670891-a9a8-4df7-b079-43d3b5930036", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "474417a5d8b1eb115658a610cdb28767714f2f1e45fc12923448581912d17d40", "class_name": "RelatedNodeInfo"}}, "hash": "063467bb6ce8ba9c3b0d925fa57a3439f6eac7fc26b388e9dd996cbd91093e36", "text": "Calculate the average price of stocks traded\n\nAdd another Calculator component to the job and configure it as follows.\n\n  * Name: `AVG_PRICE`\n  * Include Input Columns: Yes\n  * Expressions: \n    * AVG_PRICE: `-(\"NET_VALUE\" / \"NET_SHARES\")`\n\n!7_17_avg", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "45670891-a9a8-4df7-b079-43d3b5930036": {"__data__": {"id_": "45670891-a9a8-4df7-b079-43d3b5930036", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6777dfc7-7c50-4859-b0dd-4ff20ce0a807", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "2db407e92f1ff89a57f8cad6af40430b5d9e25b01c1e776c2f0c8e17aa4c4426", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6f162758-a4a3-4653-a4fd-ed3ff4478886", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "063467bb6ce8ba9c3b0d925fa57a3439f6eac7fc26b388e9dd996cbd91093e36", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "216b39dd-ef82-4b3e-9c2e-bb3e1b3462a4", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3374dea9c22c74a285c0fb24ce260012f3d31129d7771502f413ce7505fbe351", "class_name": "RelatedNodeInfo"}}, "hash": "474417a5d8b1eb115658a610cdb28767714f2f1e45fc12923448581912d17d40", "text": "Rewrite Table\n\nAdd a last component to the job to write the result of the transformation to\nthe CURRENT_POSITION table.\n\nFind/Search the Rewrite Table component and drag and drop it as the last\ncomponent in the flow. Connect to the AVG_PRICE calculator, and edit the\nproperties as below:\n\n  * Target Table: `CURRENT_POSITION`\n  * Warehouse: [Environment Default]\n  * Database: [Environment Default]\n  * Schema: [Environment Default]\n  * Target Table: `CURRENT_POSITION`\n\n!7_18_table\n\nThe job flow should look like this now:\n\n!7_19_flow", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "216b39dd-ef82-4b3e-9c2e-bb3e1b3462a4": {"__data__": {"id_": "216b39dd-ef82-4b3e-9c2e-bb3e1b3462a4", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b20c423c-747a-4fd1-b70b-25fd5541150d", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "d2be6e05e9b6bbf716e3196c1aaa886839a21dbd1fb69fcc5a531cabb45cdb22", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "45670891-a9a8-4df7-b079-43d3b5930036", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "474417a5d8b1eb115658a610cdb28767714f2f1e45fc12923448581912d17d40", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b2692c13-e04a-4199-a014-4d4c99a5ddc6", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ae86ba84ebbcf8a89a25cd5d46a8555aec1884b759877a3bb43f23dd00ee6677", "class_name": "RelatedNodeInfo"}}, "hash": "3374dea9c22c74a285c0fb24ce260012f3d31129d7771502f413ce7505fbe351", "text": "Execute this job\n\nRight click anywhere on the job and select **Run Job**. To preview the result\nof the job:\n\n  * Click on the last component (Write to CURRENT_POSITION)\n  * Open the Sample tab\n  * Hit the **Data** button\n  * Data will be sampled and previewed in the pane below\n\n!7_20_sample\n\nYou can now go back and validate the CURRENT_POSITION table is generated in\nSnowflake:\n\n!7_21_sf\n\nCongratulations, you're done with building and running the first\ntransformation job!\n\nThe previous Transformation job provided a snapshot of every trader, based on\nthe BUY and SELL transactions which took place. This job will take it a step\nfurther by calculating the profit or loss each trader is experiencing by\nstock, as well as the cumulative profit or loss, based on their entire\nportfolio. The below figure shows the end product of the transformation\npipeline we will create in this section.\n\n!8_flow\n\nLet's get started!\n\n  1. Within the Projects Explorer, right click and select **Add Transformation Job** , title it **VHOL_PNL_xform** and drop it as the last step step after the **VHOL_CURRENT_POSITION** transformation component in the VHOL_orchestration job.\n  2. Double click on the newly created **VHOL_PNL_xform** component to wwitch back to the new workspace to start building the job.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b2692c13-e04a-4199-a014-4d4c99a5ddc6": {"__data__": {"id_": "b2692c13-e04a-4199-a014-4d4c99a5ddc6", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a83f26dc-de07-4ea1-9ac6-fdfa5e21c03b", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "6d162186ea1427d0ffc431fe3544bfb4b188a706a8633f9e1cb7eeab6d967c04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "216b39dd-ef82-4b3e-9c2e-bb3e1b3462a4", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3374dea9c22c74a285c0fb24ce260012f3d31129d7771502f413ce7505fbe351", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "974ee772-6a78-4661-b478-8a12ca496bb9", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "11f3e004447d2229c42d1def27e5079b218c169cff57380ff2b623a2732fa61c", "class_name": "RelatedNodeInfo"}}, "hash": "ae86ba84ebbcf8a89a25cd5d46a8555aec1884b759877a3bb43f23dd00ee6677", "text": "Table Input \\- Read\n**STOCK_HISTORY**\n\n  1. Find the Table Input component and drop it into the canvas. Click on the component to configure as per the table below.\n\nNote that we are switching database to point to **ZEPL_US_STOCKS_DAILY** to\nget the **STOCK_HISTORY** table.\n\nName: `STOCK_HISTORY`  \nDatabase: `ZEPL_US_STOCKS_DAILY`  \nTarget Table: `STOCK_HISTORY`  \nColumn Names: `Select all columns`\n\n!8_stock_history", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "974ee772-6a78-4661-b478-8a12ca496bb9": {"__data__": {"id_": "974ee772-6a78-4661-b478-8a12ca496bb9", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9850e7da-e939-4679-91de-3b74f083eba0", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a1dff1cfad4b64e1e83cb784b722453c347363a3f97f85458359baef932e4428", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b2692c13-e04a-4199-a014-4d4c99a5ddc6", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ae86ba84ebbcf8a89a25cd5d46a8555aec1884b759877a3bb43f23dd00ee6677", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "757cc912-623d-4754-a085-44a943745fe7", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f18d9e6ffba4060db098c3a92b19dae7e618a9038576034545a11e3e81cdbbd0", "class_name": "RelatedNodeInfo"}}, "hash": "11f3e004447d2229c42d1def27e5079b218c169cff57380ff2b623a2732fa61c", "text": "Filter \\- Only include\nthe most recent close date for the stock\n\nWe will filter to only include the most recent clost date for the stock.\n\n  1. Right-click on the canvas and select Manage Job Variables.\n\n!8_filter\n\n  2. Fill out the Manage Job Variables as follows, using the !8_add to add a new variable as follows:\n\nName: `yest_date`  \nType: `DateTime`  \nBehavior: `Shared`  \nVisibility: `Public`  \nValue: `1900-01-01`\n\n!8_stock_jv\n\n  3. Click **Ok**\n  4. Drag and drop a filter component as the next step after the STOCK_HISTORY table input. Fill out the filter properties as follows:\n\nName: `FILTER ON YEST_DATE`\n\n  5. Update the Filter Conditions and Combine Conditions as follows:\n\n**FILTER CONDITIONS:**\n\nInput Column: `DATE`  \nQualifier: `Is`  \nComparartor: `Equal to`  \nValue: `${yest_date.now().add(\"days\", -1).format(\"yyyy-MM-dd\")} `\n\n**Note** If you are doing this lab offline (not on the webinar day),\nsubtracting -1 days may or may not work. You basically have to subtract enough\ndays so that the resultant date is a date when the stock market was open. So\nif you're doing this lab on Monday, subtract -3 days so that the date becomes\nFriday (assuming the stock market was open on Friday)\n\nCombine Conditions: `AND`\n\n**Note** that we entered sets the variable yest_date to yesterday's date, in a\nyyyy-mm-dd format.\n\n!8_yest_date\n\n  6. **Sample** the data by switching to the Sample tab and clicking !8_data to validate the filter is working correctly, with the DATE field reflecting yesterday's date.\n\n!8_sample.png\n\n  7. Locate the Table Input component and drag and drop it to the above-right of the FILTER ON YEST_DATE Filter component. Click on the component and edit the Properties as follows:", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "757cc912-623d-4754-a085-44a943745fe7": {"__data__": {"id_": "757cc912-623d-4754-a085-44a943745fe7", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a9e45bd-1dd1-4b46-81fd-afca52ddf738", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "9d10a4b0bd374ae700fff62745538fd08d0aee1e6cda40deb4d01cf9fc1d4710", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "974ee772-6a78-4661-b478-8a12ca496bb9", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "11f3e004447d2229c42d1def27e5079b218c169cff57380ff2b623a2732fa61c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6d602356-173b-415d-be7d-72b7774fb02b", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "85793173102daa30984ce9914360a552380402075643b8fe57e620ca030f8441", "class_name": "RelatedNodeInfo"}}, "hash": "f18d9e6ffba4060db098c3a92b19dae7e618a9038576034545a11e3e81cdbbd0", "text": "Table Input \\- Read\nCURRENT_POSITION\n\nName: `CURRENT_POSITION`  \nTarget Table: `CURRENT_POSITION`  \nColumn Names: `Select all columns`\n\n!8_current_pos\n\n  1. Locate the Join component, drag and drop into the workspace and connect the previous Filter and Table Input components. The flow should look like this:\n\n!8_flow_join", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d602356-173b-415d-be7d-72b7774fb02b": {"__data__": {"id_": "6d602356-173b-415d-be7d-72b7774fb02b", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "26d899e5-4ca8-404f-804d-6f4a34198abd", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "fd8a7988ee796bf04f415ffdf8721e91cdcf86e9b90dd91ff87ab909cbef1c6d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "757cc912-623d-4754-a085-44a943745fe7", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f18d9e6ffba4060db098c3a92b19dae7e618a9038576034545a11e3e81cdbbd0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9ad02b5a-e18f-409f-961f-2feb64cbc6f3", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0502e1b754af25a740f8ae89f50408800b1c89fc914484f3017b3a77d6884522", "class_name": "RelatedNodeInfo"}}, "hash": "85793173102daa30984ce9914360a552380402075643b8fe57e620ca030f8441", "text": "Join \\- Join\nyestserday's stock close with the CURRENT_POSITION dataset\n\n  1. Click on the Join component to edit its properties as follows:\n\nName: `Join CURRENT_POSITION and STOCK_HISTORY`  \nMain Table: `CURRENT_POSITION`  \nMain Table Alias: `current_position`  \nJoins: `FILTER ON YEST_DATE` , `stock_history` , `Left`\n\n  2. Edit the Join Expressions property to add the following:\n\n**Join Expressions:  \n** current_position_Left_stock_history: `\"current_position\".\"SYMBOL\" =\n\"stock_history\".\"SYMBOL\"`\n\n!8_join_expressions\n\n  3. Update the Output Columns property to add the following:\n\n**Output Columns:  \n** current_position.TRADER: `TRADER`  \ncurrent_position.SYMBOL: `SYMBOL`  \ncurrent_position.sum_INVESTMENT: `sum_INVESTMENT`  \ncurrent_position.sum_SHARESBOUGHT: `sum_SHARESBOUGHT`  \ncurrent_position.sum_RETURN: `sum_RETURN`  \ncurrent_position.sum_SHARESSOLD: `NET_SHARES`  \ncurrent_position.NET_SHARES: `NET_SHARES`  \ncurrent_position.NET_VALUE: `NET_VALUE`  \ncurrent_position.AVG_PRICE: `AVG_PRICE`  \nstock_history.CLOSE: `CLOSE`\n\n!8_output_col\n\n  4. Click **OK**\n\n!8_join_prop\n\nThe job flow now looks like this:\n\n!8_join_flow\n\nLet's now calculate the realized and unrealized gains/losses for each trader.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ad02b5a-e18f-409f-961f-2feb64cbc6f3": {"__data__": {"id_": "9ad02b5a-e18f-409f-961f-2feb64cbc6f3", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dd557dd9-cde6-4ecc-a6a4-77d05d153c72", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "662c3949a092c6d839e20ea644fb36c61b58c741e21d1a4dd50d7bafd521ed76", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6d602356-173b-415d-be7d-72b7774fb02b", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "85793173102daa30984ce9914360a552380402075643b8fe57e620ca030f8441", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a128c079-867b-45bf-be6a-657dd242a262", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "64810804f7e00a9175c5b12a37f73a53faafe30913bea39207910328b8c3b50b", "class_name": "RelatedNodeInfo"}}, "hash": "0502e1b754af25a740f8ae89f50408800b1c89fc914484f3017b3a77d6884522", "text": "Calculator \\- Calculate\nRealized & Unrealized Gains\n\n  1. Locate the calculator component. Drag and drop it to the end of the flow and connect it to the Join component.\n\n!8_calc\n\n  2. Click on the Calculator component and edit the Properties as follows:\n\nName: `GAINS`  \nInclude Input Columns: `Yes`\n\n  3. Edit the Calculations property, and add the following expressions.\n\n**Expressions:  \n** UNREAL_GAINS: `(\"NET_SHARES\" * \"CLOSE\") - (\"NET_SHARES\" * \"AVG_PRICE\")`  \nREAL_GAINS: `CASE WHEN \"NET_SHARES\" = 0 THEN \"NET_VALUE\" ELSE \"sum_INVESTMENT\"\n- (\"sum_SHARESSOLD\" * \"AVG_PRICE\") END`\n\n!8_real\n\n!8_unreal\n\n!8_gains_flow\n\nThe flow should now look like this:\n\n!8_gains_flow2\n\n  4. Now, let's write the results to a new table called TRADER_PNL_TODAY using the Rewrite Table component.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a128c079-867b-45bf-be6a-657dd242a262": {"__data__": {"id_": "a128c079-867b-45bf-be6a-657dd242a262", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d192491e-17a2-4268-963d-a7198d755427", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b4b8710e3c8e0f642e1be6643c8302b615767075036155d9418038b54f6734f2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9ad02b5a-e18f-409f-961f-2feb64cbc6f3", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0502e1b754af25a740f8ae89f50408800b1c89fc914484f3017b3a77d6884522", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9bba0cef-56d8-47ed-a9d0-56c4160a9b33", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "81a9d87048f0c08b898950c0c06b760eb82c1e54efe6b839778f6cfc9f887a7f", "class_name": "RelatedNodeInfo"}}, "hash": "64810804f7e00a9175c5b12a37f73a53faafe30913bea39207910328b8c3b50b", "text": "Rewrite Table\n\n  1. Locate the Rewrite Tablecomponent and drag and drop into the workspace. Link it to the GAINS calculator, and click to edit the Properties as follows:\n\nName: `TRADER_PNL_TODAY`  \nTarget Table: `TRADER_PNL_TODAY`\n\n!8_pnl_today\n\nThe flow should now look like this:\n\n!8_pnl_flow\n\n  2. Now, locate a Aggregate component to it connect to the Calculator GAINS component, creating a parallel flow.\n\n!8_para_flow", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9bba0cef-56d8-47ed-a9d0-56c4160a9b33": {"__data__": {"id_": "9bba0cef-56d8-47ed-a9d0-56c4160a9b33", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8470c0a5-1fe8-49d7-8587-0a7d7d9350a2", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3db67239cba429f437f747d617fa0c467b8a837f61ca0eb8afa6d402c0634b64", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a128c079-867b-45bf-be6a-657dd242a262", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "64810804f7e00a9175c5b12a37f73a53faafe30913bea39207910328b8c3b50b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "05207965-6db7-4bd2-a920-1ea3551d84ea", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "30effa41c8da6d63c28e192db373f258844ceb92095582e4206610dcb68be570", "class_name": "RelatedNodeInfo"}}, "hash": "81a9d87048f0c08b898950c0c06b760eb82c1e54efe6b839778f6cfc9f887a7f", "text": "Aggregate \\- Sum up the\ngains, both realized and unrealized by each trader\n\n  1. Click on the Aggregate component and edit the Properties as follows:\n\nName: `SUM GAINS PER TRADER`  \nGroupings: `TRADER`  \nAggregations: `UNREAL_GAINS, Sum` , `REAL_GAINS, Sum`\n\n!8_agg_prop\n\nThe flow should now look like this:\n\n!8_agg_flow\n\nFinally, we are going to create a view to store this last aggregation result.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "05207965-6db7-4bd2-a920-1ea3551d84ea": {"__data__": {"id_": "05207965-6db7-4bd2-a920-1ea3551d84ea", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0f62b2ba-cb18-4783-a350-3d8915b98c22", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1af26f70b35a1cecd8e3da5d14fc8602be87907c79a593db88aa156b0f5afea3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9bba0cef-56d8-47ed-a9d0-56c4160a9b33", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "81a9d87048f0c08b898950c0c06b760eb82c1e54efe6b839778f6cfc9f887a7f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "be9efd5a-cf46-4d80-8dc3-738b3c133882", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "05e81f464b1da0b277f18dcbd19fbfa208ba5797697d4dda06815c557b239b14", "class_name": "RelatedNodeInfo"}}, "hash": "30effa41c8da6d63c28e192db373f258844ceb92095582e4206610dcb68be570", "text": "Create View \\- Write\nthe trader and gains fields to a new view in Snowflake\n\n  1. Locate the Rewrite Table component and drag and drop it to connect to the SUM GAINS PER TRADER Aggregate component.\n  2. Click on the component and edit the Properties as follows:\n\nName: `TRADER_PNL_TOTAL_VIEW`  \nTarget Table: `TRADER_PNL_TOTAL_VIEW`\n\n!8_rewrite_today\n\nThe final flow of the job, should look like this:\n\n!8_today_flow\n\nYou can check the datasets either with the Matillion sample function or go to\nSnowflake UI. There should be two tables created TRADER_PNL_TODAY and\nTRADER_PNL_TOTAL_VIEW.\n\n!8_snowflake_today", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "be9efd5a-cf46-4d80-8dc3-738b3c133882": {"__data__": {"id_": "be9efd5a-cf46-4d80-8dc3-738b3c133882", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "27841ea7-750a-4e61-8a44-9cbd1f276a72", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "90261f0d52c8bcabcc96a86d626a2f5494275eeae3f72f3e95a3b1b768330a49", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "05207965-6db7-4bd2-a920-1ea3551d84ea", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "30effa41c8da6d63c28e192db373f258844ceb92095582e4206610dcb68be570", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "890493a5-7dde-4a6c-a126-c7b2aae40f29", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "081e986d0cec0d24e663c819602b1b73f29ecb287fdef365a0d608a3ea5acd74", "class_name": "RelatedNodeInfo"}}, "hash": "05e81f464b1da0b277f18dcbd19fbfa208ba5797697d4dda06815c557b239b14", "text": "Completing the Orchestration Job:\n\nReturn back to the VHOL_orchestration job, and drag and drop an **Alter\nWarehouse** component as the final step, linked to the VHOL_PNL_xform\nTransformation component.\n\n_Pro tip: you can also COPY and PASTE the other Alter Warehouse component to\njust edit it._\n\nEdit the component to reflect as follows:\n\nName:\n\n|\n\n`Size Down Warehouse to XS`  \n  \n---|---  \n  \nCommandType:\n\n|\n\n`Set`  \n  \nProperties:\n\n|\n\n`WAREHOUSE_SIZE XSMALL`  \n  \nThis will scale down your Virtual Warehouse after the orchestration job is\ncompleted.\n\n!8_alter_final\n\nYour final pipeline result should now look like this:\n\n!8_final_flow\n\nRight click anywhere on the workspace click **Run Job** to run the job and\nenjoy seeing the data being loaded, transformed, while scaling up and down\nSnowflake warehouse dynamically!\n\nThe portfolio manager wants up-to-date stock information to know exactly where\ntheir realized and unrealized gains stand. Utilizing Matillion's Universal\nConnectivity feature they can pull real-time market prices and make the\ncalculation.\n\n  1. Begin by right-clicking in the Project Explorer and select Add Orchestration job to create a new Orchestration job. Name it Yahoo_Orch.\n  2. Righ click on the canvas, and click Manage Grid Variables.\n\n!9_1\n\n  3. Create a Grid Variable called `gv_tickers`, with a single column (`gvc_tickers`) populated with: AAPL and SBUX.\n\n!9_2\n\n  4. Click **Next** to add the columns AAPL and SBUX.\n\n!9_3\n\n  5. Click on **Project** dropdown and select **Manage Environment Variables**\n\n!9-4\n\n  6. Create a Environment Variable called `ev_tickerlist` using the following properties:\n\nName:\n\n|\n\n`ev_tickerlist`  \n  \n---|---  \n  \nType:\n\n|\n\n`text`  \n  \nBehavior:\n\n|\n\n`Copied`  \n  \nValue:\n\n|\n\n`AAPL%2CGOOG`  \n  \n!9-5\n\n  6. Drag and drop the **Query Result to Grid** component as the first step in the flow. Fill out the component as follows:\n\nName:\n\n|\n\n`Tickers to Grid`  \n  \n---|---  \n  \nBasic/Advanced\n\n|\n\n`Advanced`  \n  \nSQL Query\n\n|\n\n`SELECT DISTINCT(\"SYMBOL\") FROM \"TRADES_HISTORY\" WHERE \"TRADER\" = 'CERSEI'\nLIMIT 10`  \n  \nGrid Variable\n\n|\n\n`gv_tickers`  \n  \nGrid Variable Mapping\n\n|\n\n`gvc_tickers: SYMBOL`  \n  \n!9-6\n\n!9-7", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "890493a5-7dde-4a6c-a126-c7b2aae40f29": {"__data__": {"id_": "890493a5-7dde-4a6c-a126-c7b2aae40f29", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "533d490d-66db-4374-b0ad-aa58daebe4d4", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "db01205a4fb4e61315a162df081d5bd35172133b40956abb1677edc1cd30eb8b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "be9efd5a-cf46-4d80-8dc3-738b3c133882", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "05e81f464b1da0b277f18dcbd19fbfa208ba5797697d4dda06815c557b239b14", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b181769c-85d6-4891-9a91-ea8dc5bbd8b1", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "191d87ca58af8b6351be5f1e51fb073d3e7024018b667948c022ff3015b52dd0", "class_name": "RelatedNodeInfo"}}, "hash": "081e986d0cec0d24e663c819602b1b73f29ecb287fdef365a0d608a3ea5acd74", "text": "Python Script\n\nWe will incorporate a Python script to \"unpack\" the Grid Variable set in the\nnext step. With the stock symbols saved to a variable called loc_TICKERS, a\nloop will be performed to reformat a query parameter needed for a call to the\nYahoo! Finance quote endpoint.\n\n  1. Locate the **Python Script** component and drop as the last step in the flow:\n\n!9-8\n\n  2. Update the Python Script component with the following:\n\n**Script** :\n\n    \n    \n    print (context.getGridVariable('gv_tickers'))\n    loc_TICKERS = context.getGridVariable('gv_tickers')\n    \n    api_param = ''\n    \n    for layer1 in loc_TICKERS:\n      for each in layer1:\n        api_param = api_param + each + '%2C'\n        #print(each) validate unpackaging of array\n        \n    api_param = api_param[:-3]\n    print(api_param)\n    \n    context.updateVariable('ev_tickerlist', api_param)\n    \n    print(ev_tickerlist)\n    \n    \n\n**Interpeter:**`Python 3`", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b181769c-85d6-4891-9a91-ea8dc5bbd8b1": {"__data__": {"id_": "b181769c-85d6-4891-9a91-ea8dc5bbd8b1", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7f04828b-e710-4f22-ac20-fb12b1f6232d", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b8624eaa9113366e0549e0d0fbf7b3e9e716d47d1923747bd524ff03ef64bb29", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "890493a5-7dde-4a6c-a126-c7b2aae40f29", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "081e986d0cec0d24e663c819602b1b73f29ecb287fdef365a0d608a3ea5acd74", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "59e9aed6-3fa7-4314-bc22-4927536acb43", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "29a28e36761b013b58c80c19043f52883b99f215436233b262d4df3615014f4c", "class_name": "RelatedNodeInfo"}}, "hash": "191d87ca58af8b6351be5f1e51fb073d3e7024018b667948c022ff3015b52dd0", "text": "API-Extract \\- Pull\nCurrent Stock Price Data\n\n  1. From the Projects drop down in the top left, select **Manage API Profiles** > **Manage Extract Profiles**.\n\n!9-9\n\n  2. Add a new **Extract Profile** using the information below:\n\n**Profile Name:**`YahooFinance`\n\n!9-10\n\n  3. Click **Ok** and select **New Endpoint** , and update with the following information:\n\n**Endpoint Name:**`QuotesByTicker`\n\n  4. Click **Next**.\n  5. Set the Endpoint Configuration GET to the following URI: `https://yfapi.net/v6/finance/quote`\n  6. Select the **Params** tab and update with the following:\n\n**Params:**\n\n| |  \n---|---|---  \n  \n`lang`\n\n|\n\n`en`\n\n|\n\n`Query`  \n  \n`region`\n\n|\n\n`US`\n\n|\n\n`Query`  \n  \n`symbols`\n\n|\n\n`AAPL,BTC-USD,EURUSD=X`\n\n|\n\n`Query`  \n  \n`X-API-KEY`\n\n|\n\n**`SEE NOTE BELOW`**\n\n|\n\n`Header`  \n  \n**NOTE:** Your X-API-KEY must be obtained from Yahoo Finance API (This can be\nretrieved by following the instructions\nHERE)\n\n  7. Click **Next** and **Finish** to complete creating the Endpoint.\n  8. Locate the **API Extract** component and place is after the **Python Script** component.\n\n!9-11\n\n  9. Update the component as follows:\n\n|  \n---|---  \n  \nProfile\n\n|\n\n`YahooFinance`  \n  \nData Source\n\n|\n\n`QuotesByTicker`  \n  \nQuery Params\n\n|\n\n`lang - en`  \n  \n|\n\n`region - US`  \n  \n|\n\n`symbols - ${ev_tickerlist}`  \n  \nHeader Params\n\n|\n\n**`YOUR API KEY`**  \n  \nLocation\n\n|\n\n`Select the default S3 bucket provided by Partner Connect`  \n  \nTable\n\n|\n\n`VHOL_YAHOORAW`  \n  \n  10. Now we will create a new Transformation Job - Yahoo Transform - which will sit as the next step after the Yahoo Orchestration job just worked on.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59e9aed6-3fa7-4314-bc22-4927536acb43": {"__data__": {"id_": "59e9aed6-3fa7-4314-bc22-4927536acb43", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6aa938ae-d19a-446b-a26a-fbf0603194a0", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "285cc53586ab7fe2da82110794be6e511a726e09fc0081df938c848cca47a274", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b181769c-85d6-4891-9a91-ea8dc5bbd8b1", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "191d87ca58af8b6351be5f1e51fb073d3e7024018b667948c022ff3015b52dd0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e2c39dec-1733-450b-a75d-21d220dbc3c1", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a2a16f3f0318cb03a9e89d9ee5581bae46d85ed2a5d4b3f4de6b206229c0cc4c", "class_name": "RelatedNodeInfo"}}, "hash": "29a28e36761b013b58c80c19043f52883b99f215436233b262d4df3615014f4c", "text": "Transformation - Yahoo Transform\n\n  1. Within the Projects Explorer, right click and select **Add Transformation Job**. Name it Yahoo_transform.\n  2. Create a new Table Input component and update as follows:\n\n| |  \n---|---|---  \n  \nName\n\n|\n\n`VHOL_YAHOORAW`\n\n|  \n  \nTarget Table\n\n|\n\n`VHOL_YAHOORAW`\n\n|  \n  \nColumn Names\n\n|\n\n`Data Value`\n\n|  \n  \n!9-12", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2c39dec-1733-450b-a75d-21d220dbc3c1": {"__data__": {"id_": "e2c39dec-1733-450b-a75d-21d220dbc3c1", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b11716ba-a1c3-4f99-b18d-699602cf7d0f", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ebfe9f54ddc107db2aea6bc90f20528cee90d56b15463c25c0639a8264901fd2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "59e9aed6-3fa7-4314-bc22-4927536acb43", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "29a28e36761b013b58c80c19043f52883b99f215436233b262d4df3615014f4c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e2dc0bae-2725-4b53-8932-b04801b213da", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "38c4c07aa2ab1f180a7b0fb57c4bbca74faa38eb9afac9283e796ab594de3c59", "class_name": "RelatedNodeInfo"}}, "hash": "a2a16f3f0318cb03a9e89d9ee5581bae46d85ed2a5d4b3f4de6b206229c0cc4c", "text": "Extract Nested Data \\-\nWe will flatten the semi structured format & extract the values needed\n\n  1. Find the **Extract Nested Data** Component and drag and drop it after the Table Input.\n  2. Update the component as follows:\n\n| |  \n---|---|---  \n  \nName\n\n|\n\n`Extract Nested Data`\n\n|  \n  \nInclude Input Column\n\n|\n\n`No`\n\n|  \n  \nColumns: Select **Autofill** , to populate all the available columns and\nselect the following values:\n\n`displayName, regularMarketPrice, symbol`\n\n!9-13", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e2dc0bae-2725-4b53-8932-b04801b213da": {"__data__": {"id_": "e2dc0bae-2725-4b53-8932-b04801b213da", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0afb286-2e3e-458a-9403-6a0df4d391f0", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "6727b34cce90f78c595b2d69d12defbe87d518778602b78c6849b306cd2e0b5a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e2c39dec-1733-450b-a75d-21d220dbc3c1", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a2a16f3f0318cb03a9e89d9ee5581bae46d85ed2a5d4b3f4de6b206229c0cc4c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2154df07-a4b1-4354-be9b-1299666f2c9a", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0aa9105a3e301f7a286f6fac8b5b79e785407f21384d8e0037a8f5c9cc533910", "class_name": "RelatedNodeInfo"}}, "hash": "38c4c07aa2ab1f180a7b0fb57c4bbca74faa38eb9afac9283e796ab594de3c59", "text": "We will now read TRADER_PNL_TODAY from our previous transformation job.\n\n  1. Locate the **Table Input** component and place is underneath the previous Table Input. And update the properties as follows:\n\n| |  \n---|---|---  \n  \nName:\n\n|\n\n`TRADER_PNL_TODAY`\n\n|  \n  \nTarget Table:\n\n|\n\n`TRADER_PNL_TODAY`\n\n|  \n  \nColumn Names:\n\n|\n\nSelect all columns\n\n|  \n  \n!9-14", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2154df07-a4b1-4354-be9b-1299666f2c9a": {"__data__": {"id_": "2154df07-a4b1-4354-be9b-1299666f2c9a", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3fff583d-c03e-48fd-81b0-b9c508f39652", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7ca2299f31f1be80d6cc5b4bdac7c695fc1cd11af1846d10e3b82715c395690e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e2dc0bae-2725-4b53-8932-b04801b213da", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "38c4c07aa2ab1f180a7b0fb57c4bbca74faa38eb9afac9283e796ab594de3c59", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fae3a583-32e3-4426-aead-f3ff30503893", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "bb0ff32291e2f3f6d6661ca3c7ed5fd9d759cfe3f237f12dbdbefb71d54ecad5", "class_name": "RelatedNodeInfo"}}, "hash": "0aa9105a3e301f7a286f6fac8b5b79e785407f21384d8e0037a8f5c9cc533910", "text": "Now we will only filter for Cersei's trades by using the Filter component.\n\n  1. Locate the **Filter** component and connect it to the table input from the previous step. And update the properties as follows:\n\n| |  \n---|---|---  \n  \nName:\n\n|\n\n`Cersei's Trades`\n\n|  \n  \nInput Column:\n\n|\n\n`Trader`\n\n|  \n  \nQualifier:\n\n|\n\n`Is`\n\n|  \n  \nComparator:\n\n|\n\n`Value`\n\n|  \n  \nValue:\n\n|\n\n`CERSEI`\n\n|  \n  \n!9-15", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fae3a583-32e3-4426-aead-f3ff30503893": {"__data__": {"id_": "fae3a583-32e3-4426-aead-f3ff30503893", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "379627a1-e3ea-410e-9e88-54f3f1eca108", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b0212bfbabdaceea14427395ae23b1249369ffc90acd8f6d7f72de8d7953c04c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2154df07-a4b1-4354-be9b-1299666f2c9a", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0aa9105a3e301f7a286f6fac8b5b79e785407f21384d8e0037a8f5c9cc533910", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6f2d4a0a-735d-43ec-8383-66ce3efec99d", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b2074152b20463c6954c5c751de78205e142cc548e77bcdad1fe47689d14ff16", "class_name": "RelatedNodeInfo"}}, "hash": "bb0ff32291e2f3f6d6661ca3c7ed5fd9d759cfe3f237f12dbdbefb71d54ecad5", "text": "Now we will join Cersei's trades with the Yahoo API data using the Join\ncomponent.\n\n  1. Locate the **Join** component and connect to the Extract Nested Data and Cersei's Trades, and update the properties as follows:\n\n| |  \n---|---|---  \n  \nName:\n\n|\n\nJoin\n\n|  \n  \nMain Table:\n\n|\n\n`Cersei's Trades`\n\n|  \n  \nMain Table Alias:\n\n|\n\n`cersei`\n\n|  \n  \nJoins:\n\n|\n\n`Joins Table - Extract Nested Data`\n\n|  \n|\n\n`Join Alias - trades`\n\n|  \n|\n\n`Join Type - Inner`\n\n|  \n  \n**Join Expressions:**\n\n| |  \n---|---|---  \n  \ncersei_inner_trades\n\n|\n\n`\"cersei\".\"SYMBOL\" = \"trades\".\"symbol\"`\n\n|  \n  \n**Output Columns:**\n\n| |  \n---|---|---  \n  \n`cersei.TRADER`\n\n|\n\n`TRADER`\n\n|  \n  \n`cersei.SYMBOL`\n\n|\n\n`SYMBOL`\n\n|  \n  \n`trades.regularMarketPrice`\n\n|\n\n`MARKETPRICE`\n\n|  \n  \n`cersei.AVG_PRICE`\n\n|\n\n`AVG_PRICE`\n\n|  \n  \n`cersei.NET_SHAERES`\n\n|\n\n`# SHARES`\n\n|  \n  \n!9-16", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f2d4a0a-735d-43ec-8383-66ce3efec99d": {"__data__": {"id_": "6f2d4a0a-735d-43ec-8383-66ce3efec99d", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3d083986-cd90-4bb6-a0d6-2b12c0586475", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "69f9c3f65aa215dcde8c585d13490c2742ba992de47223f19b7ef15d06021ca2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fae3a583-32e3-4426-aead-f3ff30503893", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "bb0ff32291e2f3f6d6661ca3c7ed5fd9d759cfe3f237f12dbdbefb71d54ecad5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9d12507f-c160-40ce-8d52-052b62108e36", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c577310947471edd76e6dec6548c5dfde833347e6563ffbd30eac21b2ea92452", "class_name": "RelatedNodeInfo"}}, "hash": "b2074152b20463c6954c5c751de78205e142cc548e77bcdad1fe47689d14ff16", "text": "Calculate the Win / Loss Logic\n\n  1. Drag and drop the Calculator component as the last step of the flow and update as follows:\n\n| |  \n---|---|---  \n  \nName:\n\n|\n\n`Calculator`\n\n|  \n  \nExpressions:\n\n|  \n---|---  \n  \n`MARKET_VALUE`\n\n|\n\n`\"# SHARES\" * \"MARKETPLACE\"`  \n  \n`PORTFOLIO_VALUE`\n\n|\n\n`\"AVG_PRICE\" * \"# SHARES\"`  \n  \n`UNREALIZED_GAINS`\n\n|\n\n`(\"AVG_PRICE\" * \"# SHARES\") - (\"# SHARES\" * \"MARKETPLACE\")`  \n  \n!9-17\n\nFinally, we will write Cersei's profits back to Snowflake using the\n**Rewrite** component, and update as follows:\n\n|  \n---|---  \n  \nName:\n\n|\n\n`CERSEI PROFITS`  \n  \nTarget Table:\n\n|\n\n`CERSEI PROFITS`  \n  \nYour final flow should now look like this:\n\n!9-18\n\nWhat this shows is the stock, quantity, and the real time average price of\neach stock. The resulting table is how much realized gains Cersei can expect\nbased on the quantity of shares she owns. You can check the data in Snowflake\nto see that it was written correctly:\n\n!9-19\n\nCongrats! You have successfully developed a well-orchestrated data engineering\npipeline!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9d12507f-c160-40ce-8d52-052b62108e36": {"__data__": {"id_": "9d12507f-c160-40ce-8d52-052b62108e36", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "af8bb432-4b28-4e85-82d6-6d6394cc0c5b", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e2d768ef060b2b7afd8c0582960f5e35d145ca20895122d6b8833460016371b1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6f2d4a0a-735d-43ec-8383-66ce3efec99d", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b2074152b20463c6954c5c751de78205e142cc548e77bcdad1fe47689d14ff16", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0d594228-3f6a-4895-aa05-473c9d9452a9", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "8db0175ed61cbbdf008e4d2a9daa4d017f6dda411c16b61e6d6fae841d651b50", "class_name": "RelatedNodeInfo"}}, "hash": "c577310947471edd76e6dec6548c5dfde833347e6563ffbd30eac21b2ea92452", "text": "What we have covered\n\n  * Source 3rd party data from Snowflake data marketplace\n  * Use Matillion's GUI to build end-to-end transformation pipeline\n  * Leverage Matillion scale up/down Snowflake's virtual warehouses\n\nUsing Matillion ETL for Snowflake we were able to easily extract data from S3,\nperform complex joins, filter and aggregate through an intuitive, browser\nbased, easy to use UI. If we were to have used traditional ETL tools, it would\nhave required a lot code, resources, and time to complete.\n\nMatillion ETL makes data engineering easier by allowing you to build your data\npipelines more efficiently with a low-code/no-code platform built for the Data\nCloud. We can build complex data pipelines to scale up and down within\nSnowflake based on your workload profile.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0d594228-3f6a-4895-aa05-473c9d9452a9": {"__data__": {"id_": "0d594228-3f6a-4895-aa05-473c9d9452a9", "embedding": null, "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f49a40a3-e652-4907-baa6-005cb1be6d2a", "node_type": "4", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "6842d13d76bff58364a10330b9057a2b3839cd905772e0493b17f19f57d2d681", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9d12507f-c160-40ce-8d52-052b62108e36", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c577310947471edd76e6dec6548c5dfde833347e6563ffbd30eac21b2ea92452", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1de43534-1583-44cd-9e89-92aa4eb159fa", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "adadbe96c037c4e69e3d69dc981fdb89787d07ab31184873d17b1be44ae47405", "class_name": "RelatedNodeInfo"}}, "hash": "8db0175ed61cbbdf008e4d2a9daa4d017f6dda411c16b61e6d6fae841d651b50", "text": "Related Resources\n\n  * Snowflake Docs\n  * Matillion Docs", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1de43534-1583-44cd-9e89-92aa4eb159fa": {"__data__": {"id_": "1de43534-1583-44cd-9e89-92aa4eb159fa", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "54e6fc0d-abc1-4deb-a307-e7394dd94cb2", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "afd4e50d76039b9067834fd8d24e9366595c71856774757403d8cd6452bb279a", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0d594228-3f6a-4895-aa05-473c9d9452a9", "node_type": "1", "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "8db0175ed61cbbdf008e4d2a9daa4d017f6dda411c16b61e6d6fae841d651b50", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8520e4d9-f3d8-4f28-a19e-f8fa11d96062", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "489d0abb504135f75125bd05f7ee31a306e91ee27e76dee1eec3a1d0981471ae", "class_name": "RelatedNodeInfo"}}, "hash": "adadbe96c037c4e69e3d69dc981fdb89787d07ab31184873d17b1be44ae47405", "text": "Prerequisites\n\n  * Familiarity with Python\n  * Familiarity with the DataFrame API\n  * Familiarity with Snowflake\n  * Familiarity with Git repositories and GitHub", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8520e4d9-f3d8-4f28-a19e-f8fa11d96062": {"__data__": {"id_": "8520e4d9-f3d8-4f28-a19e-f8fa11d96062", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0789ce2b-e67e-422b-9524-4c1d621fdd8e", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "66505291d55c48240d741a672f811d6a2fc67340fdfdb81f777c2c50072ae5c2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1de43534-1583-44cd-9e89-92aa4eb159fa", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "adadbe96c037c4e69e3d69dc981fdb89787d07ab31184873d17b1be44ae47405", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d119c5c6-da3c-4c76-8141-4807ee0e0cd7", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ac35dac1f5cb2afcc4f042ba9f7bcdc70de0749de1f0f7c96a3a1e3987812066", "class_name": "RelatedNodeInfo"}}, "hash": "489d0abb504135f75125bd05f7ee31a306e91ee27e76dee1eec3a1d0981471ae", "text": "What You'll Learn\n\nYou will learn about the following Snowflake features during this Quickstart:\n\n  * Snowflake's Table Format\n  * Data ingestion with COPY\n  * Schema inference\n  * Data sharing/marketplace (instead of ETL)\n  * Streams for incremental processing (CDC)\n  * Streams on views\n  * Python UDFs (with third-party packages)\n  * Python Stored Procedures\n  * Snowpark DataFrame API\n  * Snowpark Python programmability\n  * Warehouse elasticity (dynamic scaling)\n  * Visual Studio Code Snowflake native extension (PuPr, Git integration)\n  * SnowCLI (PuPr)\n  * Tasks (with Stream triggers)\n  * Task Observability\n  * GitHub Actions (CI/CD) integration", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d119c5c6-da3c-4c76-8141-4807ee0e0cd7": {"__data__": {"id_": "d119c5c6-da3c-4c76-8141-4807ee0e0cd7", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d3830bb2-9319-4d36-809b-4bf042a5425a", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3e06137416c8fd1e2117ac4bc53cd077d7642c12ea88906d8a3195d4e1e331d8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8520e4d9-f3d8-4f28-a19e-f8fa11d96062", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "489d0abb504135f75125bd05f7ee31a306e91ee27e76dee1eec3a1d0981471ae", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "af439ba4-cabe-4f5c-a932-d97ffb5e8694", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "745945b164797c580d0c5dd55e822166b93713f5d3997a9039e28ebf7fbab342", "class_name": "RelatedNodeInfo"}}, "hash": "ac35dac1f5cb2afcc4f042ba9f7bcdc70de0749de1f0f7c96a3a1e3987812066", "text": "What You'll Need\n\nYou will need the following things before beginning:\n\n  * Snowflake account \n    * **A Snowflake Account**\n    * **A Snowflake user created with ACCOUNTADMIN permissions**. This user will be used to get things setup in Snowflake.\n    * **Anaconda Terms & Conditions accepted**. See Getting Started section in Third-Party Packages.\n  * GitHub account \n    * **A GitHub account**. If you don't already have a GitHub account you can create one for free. Visit the Join GitHub page to get started.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "af439ba4-cabe-4f5c-a932-d97ffb5e8694": {"__data__": {"id_": "af439ba4-cabe-4f5c-a932-d97ffb5e8694", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e8b4be1e-62ae-42fe-b7db-7edaa00ad9d2", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "970ea4799ce7dd08f70576c03b91f7a6235329d829572a0039292b4b50fc083d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d119c5c6-da3c-4c76-8141-4807ee0e0cd7", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ac35dac1f5cb2afcc4f042ba9f7bcdc70de0749de1f0f7c96a3a1e3987812066", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "83056970-e5bd-499c-acb0-0a8b69286fc0", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "2822307e7b55172163010672f790040c857559b2f05408cf98b54b5f73f56ccd", "class_name": "RelatedNodeInfo"}}, "hash": "745945b164797c580d0c5dd55e822166b93713f5d3997a9039e28ebf7fbab342", "text": "What You'll Build\n\nDuring this Quickstart you will accomplish the following things:\n\n  * Load Parquet data to Snowflake using schema inference\n  * Setup access to Snowflake Marketplace data\n  * Create a Python UDF to convert temperature\n  * Create a data engineering pipeline with Python stored procedures to incrementally process data\n  * Orchestrate the pipelines with tasks\n  * Monitor the pipelines with Snowsight\n  * Deploy the Snowpark Python stored procedures via a CI/CD pipeline", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "83056970-e5bd-499c-acb0-0a8b69286fc0": {"__data__": {"id_": "83056970-e5bd-499c-acb0-0a8b69286fc0", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d1e526e4-df9b-4acf-90c0-3ce95904cdf2", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "dbfe05b18c19fa6eb0630b37ebcf0bfe4fd7c317fe01e897d7328a61eac867ce", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "af439ba4-cabe-4f5c-a932-d97ffb5e8694", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "745945b164797c580d0c5dd55e822166b93713f5d3997a9039e28ebf7fbab342", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3e5f6e9a-a012-4886-8b64-aaea581a9400", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "fcd905845e113282653a6384330386c4c25bbacfa8e224b925fd6497288ea487", "class_name": "RelatedNodeInfo"}}, "hash": "2822307e7b55172163010672f790040c857559b2f05408cf98b54b5f73f56ccd", "text": "Fork the Quickstart Repository and Enable GitHub Actions\n\nYou'll need to create a fork of the repository for this Quickstart in your\nGitHub account. Visit the [Data Engineering Pipelines with Snowpark Python\nassociated GitHub Repository](https://github.com/Snowflake-Labs/sfguide-data-\nengineering-with-snowpark-python) and click on the \"Fork\" button near the top\nright. Complete any required fields and click \"Create Fork\".\n\nBy default GitHub Actions disables any workflows (or CI/CD pipelines) defined\nin the forked repository. This repository contains a workflow to deploy your\nSnowpark Python UDF and stored procedures, which we'll use later on. So for\nnow enable this workflow by opening your forked repository in GitHub, clicking\non the `Actions` tab near the top middle of the page, and then clicking on the\n`I understand my workflows, go ahead and enable them` green button.\n\n!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3e5f6e9a-a012-4886-8b64-aaea581a9400": {"__data__": {"id_": "3e5f6e9a-a012-4886-8b64-aaea581a9400", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "dfa88cfb-b069-4aa5-b6e7-927043e99d45", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "4dec77480d01d8a2496ad47c585a6b8dc2e0eb623cbf7a1bd80da9b9babc04b5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "83056970-e5bd-499c-acb0-0a8b69286fc0", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "2822307e7b55172163010672f790040c857559b2f05408cf98b54b5f73f56ccd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "75df7843-28c0-4292-8a1b-d3602f368d8d", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "87b46b0f8d71ef722cde7e792d0b4ae90119e95530077873543f6c3dfb432d6c", "class_name": "RelatedNodeInfo"}}, "hash": "fcd905845e113282653a6384330386c4c25bbacfa8e224b925fd6497288ea487", "text": "Create GitHub Codespace\n\nFor this Quickstart we will be using [GitHub\nCodespaces](https://docs.github.com/en/codespaces/overview) for our\ndevelopment environment. Codespaces offer a hosted development environment\nwith a hosted, web-based VS Code environment. GitHub currently offers [60\nhours for free each month](https://github.com/features/codespaces) when using\na 2 node environment, which should be more than enough for this lab.\n\nTo create a GitHub Codespace, click on the green ` Code` button from the\nGitHub repository homepage. In the Code popup, click on the `Codespaces` tab\nand then on the green `Create codespace on main`.\n\n!\n\nThis will open a new tab and begin setting up your codespace. This will take a\nfew minutes as it sets up the entire environment for this Quickstart. Here is\nwhat is being done for you:\n\n  * Creating a container for your environment\n  * Installing Anaconda (miniconda)\n  * SnowSQL setup \n    * Installing SnowSQL\n    * Creating a directory and default config file for SnowSQL\n  * Anaconda setup \n    * Creating the Anaconda environment\n    * Installing the Snowpark Python library\n    * Installing the SnowCLI Python CLI\n  * VS Code setup \n    * Installing VS Code\n    * Configuring VS Code for the Python Anaconda environment\n    * Installing the Snowflake VS Code extension\n  * Starting a hosted, web-based VS Code editor\n\nOnce the codepsace has been created and started you should see a hosted web-\nbased version of VS Code with your forked repository set up! Just a couple\nmore things and we're ready to start.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "75df7843-28c0-4292-8a1b-d3602f368d8d": {"__data__": {"id_": "75df7843-28c0-4292-8a1b-d3602f368d8d", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1cbc2fbc-08dc-4e99-b3c9-1edb86059274", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "028886abab515833833fb7e6a0b1a956600f2e96cf0fd91949fc2df61c1b63b0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3e5f6e9a-a012-4886-8b64-aaea581a9400", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "fcd905845e113282653a6384330386c4c25bbacfa8e224b925fd6497288ea487", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ddbd990e-fecc-46ce-9211-3593008b5ce2", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "8ac91d0c0fbc81544d892fa198429dfb07c304071414e90dad2d970148d63d14", "class_name": "RelatedNodeInfo"}}, "hash": "87b46b0f8d71ef722cde7e792d0b4ae90119e95530077873543f6c3dfb432d6c", "text": "Configure Snowflake Credentials\n\nWe will not be directly using [the SnowSQL command line\nclient](https://docs.snowflake.com/en/user-guide/snowsql.html) for this\nQuickstart, but we will be storing our Snowflake connection details in the\nSnowSQL config file located at `~/.snowsql/config`. A default config file was\ncreated for you during the codespace setup.\n\nThe easiest way to edit the default `~/.snowsql/config` file is directly from\nVS Code in your codespace. Type `Command-P`, type (or paste)\n`~/.snowsql/config` and hit return. The SnowSQL config file should now be\nopen. You just need to edit the file and replace the `accountname`,\n`username`, and `password` with your values. Then save and close the file.\n\n**Note:** The SnowCLI tool (and by extension this Quickstart) currently does\nnot work with Key Pair authentication. It simply grabs your username and\npassword details from the shared SnowSQL config file.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ddbd990e-fecc-46ce-9211-3593008b5ce2": {"__data__": {"id_": "ddbd990e-fecc-46ce-9211-3593008b5ce2", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5ba294b9-b3e3-406c-a010-7982418f5d37", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ce68f79885799fe6d9d2ebc89e8e12bb47c0202a5069d8a948f73f20a0065292", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "75df7843-28c0-4292-8a1b-d3602f368d8d", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "87b46b0f8d71ef722cde7e792d0b4ae90119e95530077873543f6c3dfb432d6c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "c9950a8b-f234-4146-8323-4fc6afe39e72", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a84fd23d5bde06f4d693eb7b45bef4c5f60950c143e1ee45856083fa7d488bbd", "class_name": "RelatedNodeInfo"}}, "hash": "8ac91d0c0fbc81544d892fa198429dfb07c304071414e90dad2d970148d63d14", "text": "Verify Your Anaconda Environment is Activated\n\nDuring the codespace setup we created an Anaconda environment named\n`snowflake-demo`. And when VS Code started up it should have automatically\nactivated the environment in your terminal. You should see something like this\nin the terminal, and in particular you should see `(snowflake-demo)` before\nyour bash prompt.\n\n!\n\nIf for some reason it wasn't activiated simply run `conda activate snowflake-\ndemo` in your terminal.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "c9950a8b-f234-4146-8323-4fc6afe39e72": {"__data__": {"id_": "c9950a8b-f234-4146-8323-4fc6afe39e72", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c9255c40-ef20-4645-8caf-887ee7696e8d", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "167634d83bb92db7fa410a1b2120aed615a5a6bf87c974adf4e19cfb5883f9d9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ddbd990e-fecc-46ce-9211-3593008b5ce2", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "8ac91d0c0fbc81544d892fa198429dfb07c304071414e90dad2d970148d63d14", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f8912097-4eaf-4bf4-aac1-4ea92fe955fd", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ee8f377725f5d48af8d18a0ee6a39de553996878b40f9ee766ca71248c58027e", "class_name": "RelatedNodeInfo"}}, "hash": "a84fd23d5bde06f4d693eb7b45bef4c5f60950c143e1ee45856083fa7d488bbd", "text": "Snowflake Extensions for VS Code\n\nYou can run SQL queries against Snowflake in many different ways (through the\nSnowsight UI, SnowSQL, etc.) but for this Quickstart we'll be using the\nSnowflake extension for VS Code. For a brief overview of Snowflake's native\nextension for VS Code, please check out our [VS Code Marketplace Snowflake\nextension\npage](https://marketplace.visualstudio.com/items?itemName=snowflake.snowflake-\nvsc).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f8912097-4eaf-4bf4-aac1-4ea92fe955fd": {"__data__": {"id_": "f8912097-4eaf-4bf4-aac1-4ea92fe955fd", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "617de077-cf0a-4492-95e2-2ac6f47ff63c", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c062dd0ae3a9aacb94fe6642b672b314ffdd756e865fd6fd5677173941a41bc5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "c9950a8b-f234-4146-8323-4fc6afe39e72", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a84fd23d5bde06f4d693eb7b45bef4c5f60950c143e1ee45856083fa7d488bbd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "96518087-e613-428e-8dde-21d9e6a28fd6", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "619406affa8fbafe71d2ff298cf81161324107c8fba39514779bb68e7529373c", "class_name": "RelatedNodeInfo"}}, "hash": "ee8f377725f5d48af8d18a0ee6a39de553996878b40f9ee766ca71248c58027e", "text": "Run the Script\n\nTo set up all the objects we'll need in Snowflake for this Quickstart you'll\nneed to run the `steps/01_setup_snowflake.sql` script.\n\nStart by clicking on the Snowflake extension in the left navigation bar in VS\nCode. Then login to your Snowflake account with a user that has ACCOUNTADMIN\npermissions. Once logged in to Snowflake, open the\n`steps/01_setup_snowflake.sql` script in VS Code by going back to the file\nExplorer in the left navigation bar.\n\nTo run all the queries in this script, use the \"Execute All Statements\" button\nin the upper right corner of the editor window. Or, if you want to run them in\nchunks, you can highlight the ones you want to run and press CMD/CTRL+Enter.\n\nDuring this step we will be loading the raw Tasty Bytes POS and Customer\nloyalty data from raw Parquet files in `s3://sfquickstarts/data-engineering-\nwith-snowpark-python/` to our `RAW_POS` and `RAW_CUSTOMER` schemas in\nSnowflake. And you are going to be orchestrating this process from your laptop\nin Python using the Snowpark Python API. To put this in context, we are on\nstep **#2** in our data flow overview:\n\n!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96518087-e613-428e-8dde-21d9e6a28fd6": {"__data__": {"id_": "96518087-e613-428e-8dde-21d9e6a28fd6", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "31783ff5-3251-4cec-8961-dda483445836", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a6e5c6a387744401e80270ab531ddc32036ecb46710019a280b02c415b450d80", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f8912097-4eaf-4bf4-aac1-4ea92fe955fd", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ee8f377725f5d48af8d18a0ee6a39de553996878b40f9ee766ca71248c58027e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "188d7463-3ea4-43cf-b882-350336167b88", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a12d763486b1531efc51df1960885f18a9487d5010d022499ba220701eb07402", "class_name": "RelatedNodeInfo"}}, "hash": "619406affa8fbafe71d2ff298cf81161324107c8fba39514779bb68e7529373c", "text": "Run the Script\n\nTo load the raw data, execute the `steps/02_load_raw.py` script. This can be\ndone a number of ways in VS Code, from a terminal or directly by VS Code. For\nthis demo you will need to execute the Python scripts from the terminal. So go\nback to the terminal in VS Code, make sure that your `snowflake-demo` conda\nenvironment is active, then run the following commands (which assume that your\nterminal has the root of your repository open):\n\n    \n    \n    cd steps\n    python 02_load_raw.py\n    \n\nWhile that is running, please open the script in VS Code and continue on this\npage to understand what is happening.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "188d7463-3ea4-43cf-b882-350336167b88": {"__data__": {"id_": "188d7463-3ea4-43cf-b882-350336167b88", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b0e2acee-0b85-4acc-a013-666414387b97", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c0e11e6bd3ea6888e3244dc3701f0d07c47f2e07663d2265d0498bb8ef919a43", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "96518087-e613-428e-8dde-21d9e6a28fd6", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "619406affa8fbafe71d2ff298cf81161324107c8fba39514779bb68e7529373c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6363a797-e854-4f63-921a-42acf74c159d", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "84706ccb5e44c583b8d79aab34b460ef8fac8de4a97a0761a9a65bdcfb512c5f", "class_name": "RelatedNodeInfo"}}, "hash": "a12d763486b1531efc51df1960885f18a9487d5010d022499ba220701eb07402", "text": "Running Snowpark Python Locally\n\nIn this step you will be running the Snowpark Python code locally from your\nlaptop. At the bottom of the script is a block of code that is used for local\ndebugging (under the `if __name__ == \"__main__\":` block):\n\n    \n    \n    # For local debugging\n    if __name__ == \"__main__\":\n        # Add the utils package to our path and import the snowpark_utils function\n        import os, sys\n        current_dir = os.getcwd()\n        parent_dir = os.path.dirname(current_dir)\n        sys.path.append(parent_dir)\n    \n        from utils import snowpark_utils\n        session = snowpark_utils.get_snowpark_session()\n    \n        load_all_raw_tables(session)\n    #    validate_raw_tables(session)\n    \n        session.close()\n    \n\nA few things to point out here. First, the Snowpark session is being created\nin the `utils/snowpark_utils.py` module. It has multiple methods for obtaining\nyour credentials, and for this Quickstart it pulls them from the SnowSQL\nconfig file located at `~/.snowsql/config`. For more details please check out\nthe code for the [utils/snowpark_utils.py\nmodule](https://github.com/Snowflake-Labs/sfguide-data-engineering-with-\nsnowpark-python/blob/main/utils/snowpark_utils.py).\n\nThen after getting the Snowpark session it calls the\n`load_all_raw_tables(session)` method which does the heavy lifting. The next\nfew sections will point out the key parts.\n\nFinally, almost all of the Python scripts in this Quickstart include a local\ndebugging block. Later on we will create Snowpark Python stored procedures and\nUDFs and those Python scripts will have a similar block. So this pattern is\nimportant to understand.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6363a797-e854-4f63-921a-42acf74c159d": {"__data__": {"id_": "6363a797-e854-4f63-921a-42acf74c159d", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f5bf5a52-aa63-4423-99ac-4db23fd33d35", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "6f9b9eba62b6a2694f71a8e456e9bbd1b42e7522d39c8338b282ec1394582460", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "188d7463-3ea4-43cf-b882-350336167b88", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a12d763486b1531efc51df1960885f18a9487d5010d022499ba220701eb07402", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a2a6ae95-d3b9-425e-b8c7-e6ad04943e7f", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b7e95a74b45bbd1f661d3ca257406a9b42f6309598eafeedea246d8c3dc08a16", "class_name": "RelatedNodeInfo"}}, "hash": "84706ccb5e44c583b8d79aab34b460ef8fac8de4a97a0761a9a65bdcfb512c5f", "text": "Viewing What Happened in Snowflake\n\nThe [Query History](https://docs.snowflake.com/en/user-guide/ui-snowsight-\nactivity.html#query-history) in Snowflake is a very power feature, that logs\nevery query run against your Snowflake account, no matter which tool or\nprocess initiated it. And this is especially helpful when working with client\ntools and APIs.\n\nThe Python script you just ran did a small amount of work locally, basically\njust orchestrating the process by looping through each table and issuing the\ncommand to Snowflake to load the data. But all of the heavy lifting ran inside\nSnowflake! This push-down is a hallmark of the Snowpark API and allows you to\nleverage the scalability and compute power of Snowflake!\n\nLog in to your Snowflake account and take a quick look at the SQL that was\ngenerated by the Snowpark API. This will help you better understand what the\nAPI is doing and will help you debug any issues you may run into.\n\n!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a2a6ae95-d3b9-425e-b8c7-e6ad04943e7f": {"__data__": {"id_": "a2a6ae95-d3b9-425e-b8c7-e6ad04943e7f", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9936fa3a-7f2b-487c-ae08-2ea27c7cde9f", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0b5ecff0a750712361143b2401ef9f2a548b0404dfbee3041d6472af90fa731c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6363a797-e854-4f63-921a-42acf74c159d", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "84706ccb5e44c583b8d79aab34b460ef8fac8de4a97a0761a9a65bdcfb512c5f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fdb4be78-aecf-49b4-9c20-526edd1bcb62", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7732c30bac8b9a8aeef9f950f0aa9d0d182347a70cd5132f1ebb92162a7808da", "class_name": "RelatedNodeInfo"}}, "hash": "b7e95a74b45bbd1f661d3ca257406a9b42f6309598eafeedea246d8c3dc08a16", "text": "Schema Inference\n\nOne very helpful feature in Snowflake is the ability to infer the schema of\nfiles in a stage that you wish to work with. This is accomplished in SQL with\nthe [`INFER_SCHEMA()`](https://docs.snowflake.com/en/sql-\nreference/functions/infer_schema.html) function. The Snowpark Python API does\nthis for you automatically when you call the `session.read()` method. Here is\nthe code snippet:\n\n    \n    \n        # we can infer schema using the parquet read option\n        df = session.read.option(\"compression\", \"snappy\") \\\n                                .parquet(location)", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fdb4be78-aecf-49b4-9c20-526edd1bcb62": {"__data__": {"id_": "fdb4be78-aecf-49b4-9c20-526edd1bcb62", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5e6b9e75-ec1f-41e1-b906-de31982fe9b0", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b9b3f304ba752efac5d01512476cb1f0682e771222f8256a1393ea7e92487f39", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a2a6ae95-d3b9-425e-b8c7-e6ad04943e7f", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b7e95a74b45bbd1f661d3ca257406a9b42f6309598eafeedea246d8c3dc08a16", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d84439e1-8cc2-4a9e-96aa-f526eae268cd", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0a900cc10913f8878e5e33c22632c1cc9cec5c87e77a9fb32546fb0372f37d68", "class_name": "RelatedNodeInfo"}}, "hash": "7732c30bac8b9a8aeef9f950f0aa9d0d182347a70cd5132f1ebb92162a7808da", "text": "Data Ingestion with COPY\n\nIn order to load the data into a Snowflake table we will use the\n`copy_into_table()` method on a DataFrame. This method will create the target\ntable in Snowflake using the inferred schema (if it doesn't exist), and then\ncall the highly optimized Snowflake [`COPY INTO `\nCommand](https://docs.snowflake.com/en/sql-reference/sql/copy-into-\ntable.html). Here is the code snippet:\n\n    \n    \n        df.copy_into_table(\"{}\".format(tname))", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d84439e1-8cc2-4a9e-96aa-f526eae268cd": {"__data__": {"id_": "d84439e1-8cc2-4a9e-96aa-f526eae268cd", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0238e2e0-0416-4376-940b-b1e175b0c8af", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "af2c13b694af53f4146ee843770023d56d07a7b68c8d304035fdec9fc46b1be3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fdb4be78-aecf-49b4-9c20-526edd1bcb62", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7732c30bac8b9a8aeef9f950f0aa9d0d182347a70cd5132f1ebb92162a7808da", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f13f1f6e-7ec0-47f3-9404-1a0f0b9c2d06", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "9d6ba5f873d9d05889d6a7b5c3f5c55b655973d3d2c925527fa5ee963fb3c6d2", "class_name": "RelatedNodeInfo"}}, "hash": "0a900cc10913f8878e5e33c22632c1cc9cec5c87e77a9fb32546fb0372f37d68", "text": "Snowflake's Table Format\n\nOne of the major advantages of Snowflake is being able to eliminate the need\nto manage a file-based data lake. And Snowflake was designed for this purpose\nfrom the beginning. In the step we are loading the raw data into a structured\nSnowflake managed table. But Snowflake tables can natively support structured\nand semi-structured data, and are stored in Snowflake's mature cloud table\nformat (which predates Hudi, Delta or Iceberg).\n\nOnce loaded into Snowflake the data will be securely stored and managed,\nwithout the need to worry about securing and managing raw files. Additionally\nthe data, whether raw or structured, can be transformed and queried in\nSnowflake using SQL or the language of your choice, without needing to manage\nseparate compute services like Spark.\n\nThis is a huge advantage for Snowflake customers.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f13f1f6e-7ec0-47f3-9404-1a0f0b9c2d06": {"__data__": {"id_": "f13f1f6e-7ec0-47f3-9404-1a0f0b9c2d06", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6c24a568-ea68-4406-b7c6-457c49bc72e2", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "2a60fc13dd22b3acd39d0b7a1580197d8d83e94b91fde05a6d1d44e2ee103487", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d84439e1-8cc2-4a9e-96aa-f526eae268cd", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0a900cc10913f8878e5e33c22632c1cc9cec5c87e77a9fb32546fb0372f37d68", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b9ab5cc2-a2b9-49d8-8dfc-9d6dfc64d132", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e9555a780ab78c15a3fb4d1ccc8d601d26b52eb0e9719a326f177779285da368", "class_name": "RelatedNodeInfo"}}, "hash": "9d6ba5f873d9d05889d6a7b5c3f5c55b655973d3d2c925527fa5ee963fb3c6d2", "text": "Warehouse Elasticity (Dynamic Scaling)\n\nWith Snowflake there is only one type of user defined compute cluster, the\nVirtual Warehouse,\nregardless of the language you use to process that data (SQL, Python, Java,\nScala, Javascript, etc.). This makes working with data much simpler in\nSnowflake. And governance of the data is completely separated from the compute\ncluster, in other words there is no way to get around Snowflake governance\nregardless of the warehouse settings or language being used.\n\nAnd these virtual warehouses can be dynamically scaled, in under a second for\nmost sized warehouses! This means that in your code you can dynamically resize\nthe compute environment to increase the amount of capacity to run a section of\ncode in a fraction of the time, and then dynamically resized again to reduce\nthe amount of capacity. And because of our per-second billing (with a sixty\nsecond minimum) you won't pay any extra to run that section of code in a\nfraction of the time!\n\nLet's see how easy that is done. Here is the code snippet:\n\n    \n    \n        _ = session.sql(\"ALTER WAREHOUSE HOL_WH SET WAREHOUSE_SIZE = XLARGE WAIT_FOR_COMPLETION = TRUE\").collect()\n    \n        # Some data processing code\n    \n        _ = session.sql(\"ALTER WAREHOUSE HOL_WH SET WAREHOUSE_SIZE = XSMALL\").collect()\n    \n\nPlease also note that we included the `WAIT_FOR_COMPLETION` parameter in the\nfirst `ALTER WAREHOUSE` statement. Setting this parameter to `TRUE` will block\nthe return of the `ALTER WAREHOUSE` command until the resize has finished\nprovisioning all its compute resources. This way we make sure that the full\ncluster is available before processing any data with it.\n\nWe will use this pattern a few more times during this Quickstart, so it's\nimportant to understand.\n\nDuring this step we will be \"loading\" the raw weather data to Snowflake. But\n\"loading\" is the really the wrong word here. Because we're using Snowflake's\nunique data sharing capability we don't actually need to copy the data to our\nSnowflake account with a custom ETL process. Instead we can directly access\nthe weather data shared by Weather Source in the Snowflake Data Marketplace.\nTo put this in context, we are on step **#3** in our data flow overview:\n\n!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b9ab5cc2-a2b9-49d8-8dfc-9d6dfc64d132": {"__data__": {"id_": "b9ab5cc2-a2b9-49d8-8dfc-9d6dfc64d132", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "04b9ec0d-f234-434e-a7c3-4d85325be579", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ec76c64be78d1c85836c65d452c7218b6e3470465eb90e472d6fd3bca4214550", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f13f1f6e-7ec0-47f3-9404-1a0f0b9c2d06", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "9d6ba5f873d9d05889d6a7b5c3f5c55b655973d3d2c925527fa5ee963fb3c6d2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "df706406-7ac4-4d19-b374-432b5423e099", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "868f0a6371ade83718656beb0e9b6ec4737a2b78e5f24fa7e3ae7c1cb7018de8", "class_name": "RelatedNodeInfo"}}, "hash": "e9555a780ab78c15a3fb4d1ccc8d601d26b52eb0e9719a326f177779285da368", "text": "Snowflake Data Marketplace\n\nWeather Source is a leading provider of global weather and climate data and\ntheir OnPoint Product Suite provides businesses with the necessary weather and\nclimate data to quickly generate meaningful and actionable insights for a wide\nrange of use cases across industries. Let's connect to the `Weather Source\nLLC: frostbyte` feed from Weather Source in the Snowflake Data Marketplace by\nfollowing these steps:\n\n  * Login to Snowsight\n  * Click on the `Marketplace` link in the left navigation bar\n  * Enter \"Weather Source LLC: frostbyte\" in the search box and click return\n  * Click on the \"Weather Source LLC: frostbyte\" listing tile\n  * Click the blue \"Get\" button \n    * Expand the \"Options\" dialog\n    * Change the \"Database name\" to read \"FROSTBYTE_WEATHERSOURCE\" (all capital letters)\n    * Select the \"HOL_ROLE\" role to have access to the new database\n  * Click on the blue \"Get\" button\n\nThat's it... we don't have to do anything from here to keep this data updated.\nThe provider will do that for us and data sharing means we are always seeing\nwhatever they have published. How amazing is that? Just think of all the\nthings you didn't have do here to get access to an always up-to-date, third-\nparty dataset!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "df706406-7ac4-4d19-b374-432b5423e099": {"__data__": {"id_": "df706406-7ac4-4d19-b374-432b5423e099", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c299da0c-1ebc-41c2-b783-a5be5af2cdb5", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ae069bb26dedcc61b194e60d3a79d4f4107c2320d5f79c75a120ea603a93fff6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b9ab5cc2-a2b9-49d8-8dfc-9d6dfc64d132", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e9555a780ab78c15a3fb4d1ccc8d601d26b52eb0e9719a326f177779285da368", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "72075545-360f-4f95-b410-3937b04db244", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "af4b2e9d7ed55677e997be11d8abbe8aedd1a7ba396df0396204716e76dfbd5b", "class_name": "RelatedNodeInfo"}}, "hash": "868f0a6371ade83718656beb0e9b6ec4737a2b78e5f24fa7e3ae7c1cb7018de8", "text": "Run the Script\n\nOpen the `steps/03_load_weather.sql` script in VS Code from the file Explorer\nin the left navigation bar, and run the script. Notice how easy it is to query\ndata shared through the Snowflake Marketplace! You access it just like any\nother table or view in Snowflake:\n\n    \n    \n    SELECT * FROM FROSTBYTE_WEATHERSOURCE.ONPOINT_ID.POSTAL_CODES LIMIT 100;\n    \n\nDuring this step we will be creating a view to simplify the raw POS schema by\njoining together 6 different tables and picking only the columns we need. But\nwhat's really cool is that we're going to define that view with the Snowpark\nDataFrame API! Then we're going to create a Snowflake stream on that view so\nthat we can incrementally process changes to any of the POS tables. To put\nthis in context, we are on step **#4** in our data flow overview:\n\n!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "72075545-360f-4f95-b410-3937b04db244": {"__data__": {"id_": "72075545-360f-4f95-b410-3937b04db244", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6d82dc7b-c9b6-441d-8a61-b974258085d3", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "5922a3af71369e568bdb7961268868e3c333f5002f3b39cb79376eb404990471", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "df706406-7ac4-4d19-b374-432b5423e099", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "868f0a6371ade83718656beb0e9b6ec4737a2b78e5f24fa7e3ae7c1cb7018de8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2c65d021-7bdb-4560-a589-5b9009a09e67", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e74112a4ff2fbce8d9c01eff9160c9bd5663f406100d88103533e6be31c63b83", "class_name": "RelatedNodeInfo"}}, "hash": "af4b2e9d7ed55677e997be11d8abbe8aedd1a7ba396df0396204716e76dfbd5b", "text": "Run the Script\n\nTo create the view and stream, execute the `steps/04_create_pos_view.py`\nscript. Like we did in step 2, let's execute it from the terminal. So go back\nto the terminal in VS Code, make sure that your `snowflake-demo` conda\nenvironment is active, then run the following commands (which assume that your\nterminal has the root of your repository open):\n\n    \n    \n    cd steps\n    python 04_create_pos_view.py\n    \n\nWhile that is running, please open the script in VS Code and continue on this\npage to understand what is happening.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c65d021-7bdb-4560-a589-5b9009a09e67": {"__data__": {"id_": "2c65d021-7bdb-4560-a589-5b9009a09e67", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f8400d86-cd0a-422c-8497-7097f4e701d0", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "9f968f2c79976551ef230e509971da53b1b8d3773ea8ff3f26de0aa8a04d1a3b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "72075545-360f-4f95-b410-3937b04db244", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "af4b2e9d7ed55677e997be11d8abbe8aedd1a7ba396df0396204716e76dfbd5b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2c5a27bd-3997-4f51-8f02-d7b02df60f16", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "628d1033055cc5be899666a9bd11ba6d1a588ca43bf7873bd42cb602989f2ccd", "class_name": "RelatedNodeInfo"}}, "hash": "e74112a4ff2fbce8d9c01eff9160c9bd5663f406100d88103533e6be31c63b83", "text": "Snowpark DataFrame API\n\nThe first thing you'll notice in the `create_pos_view()` function is that we\ndefine the Snowflake view using the Snowpark DataFrame API. After defining the\nfinal DataFrame, which captures all the logic we want in the view, we can\nsimply call the Snowpark `create_or_replace_view()` method. Here's the final\nline from the `create_pos_view()` function:\n\n    \n    \n        final_df.create_or_replace_view('POS_FLATTENED_V')\n    \n\nFor more details about the Snowpark Python DataFrame API, please check out our\n[Working with DataFrames in Snowpark\nPython](https://docs.snowflake.com/en/developer-guide/snowpark/python/working-\nwith-dataframes.html) page.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2c5a27bd-3997-4f51-8f02-d7b02df60f16": {"__data__": {"id_": "2c5a27bd-3997-4f51-8f02-d7b02df60f16", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "06cb8027-5654-448c-abf5-55cc62dbbf38", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "d295a0bc2dfaa67d6b2ae9c259bba45784857318c7bf1df05fc3049175df60ee", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2c65d021-7bdb-4560-a589-5b9009a09e67", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e74112a4ff2fbce8d9c01eff9160c9bd5663f406100d88103533e6be31c63b83", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f591a6e6-0912-4caa-a3dd-a8ecaf24cc4b", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e4ef72939ed6596f409cf2ac772c4832388b76f7295171923ec306e125942875", "class_name": "RelatedNodeInfo"}}, "hash": "628d1033055cc5be899666a9bd11ba6d1a588ca43bf7873bd42cb602989f2ccd", "text": "Streams for Incremental Processing (CDC)\n\nSnowflake makes processing data incrementally very easy. Traditionally the\ndata engineer had to keep track of a high watermark (usually a datetime\ncolumn) in order to process only new records in a table. This involved\ntracking and persisting that watermark somewhere and then using it in any\nquery against the source table. But with Snowflake streams all the heavy\nlifting is done for you by Snowflake. For more details please check out our\n[Change Tracking Using Table Streams](https://docs.snowflake.com/en/user-\nguide/streams.html) user guide.\n\nAll you need to do is create a [`STREAM`](https://docs.snowflake.com/en/sql-\nreference/sql/create-stream.html) object in Snowflake against your base table\nor view, then query that stream just like any table in Snowflake. The stream\nwill return only the changed records since the last DML option your performed.\nTo help you work with the changed records, Snowflake streams will supply the\nfollowing metadata columns along with the base table or view columns:\n\n  * METADATA$ACTION\n  * METADATA$ISUPDATE\n  * METADATA$ROW_ID\n\nFor more details about these stream metadata columns please check out the\n[Stream Columns](https://docs.snowflake.com/en/user-guide/streams-\nintro.html#stream-columns) section in our documentation.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f591a6e6-0912-4caa-a3dd-a8ecaf24cc4b": {"__data__": {"id_": "f591a6e6-0912-4caa-a3dd-a8ecaf24cc4b", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5d620880-54b2-480a-850b-f2d1fa63c5c3", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c65b28a340aab6d61932e7eaebb04781fc2baed48ef51f142bcefc151500e2ef", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2c5a27bd-3997-4f51-8f02-d7b02df60f16", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "628d1033055cc5be899666a9bd11ba6d1a588ca43bf7873bd42cb602989f2ccd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2e1752f9-5040-4706-9dac-e77d7c376e76", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "777c6238f58e6520fd2c6e65442961bf445b5baaf4d387d84bb319cb857df199", "class_name": "RelatedNodeInfo"}}, "hash": "e4ef72939ed6596f409cf2ac772c4832388b76f7295171923ec306e125942875", "text": "Streams on views\n\nWhat's really cool about Snowflake's incremental/CDC stream capability is the\nability to create a stream on a view! In this example we are creating a stream\non a view which joins together 6 of the raw POS tables. Here is the code to do\nthat:\n\n    \n    \n    def create_pos_view_stream(session):\n        session.use_schema('HARMONIZED')\n        _ = session.sql('CREATE OR REPLACE STREAM POS_FLATTENED_V_STREAM \\\n                            ON VIEW POS_FLATTENED_V \\\n                            SHOW_INITIAL_ROWS = TRUE').collect()\n    \n\nNow when we query the `POS_FLATTENED_V_STREAM` stream to find changed records,\nSnowflake is actually looking for changed records in any of the 6 tables\nincluded in the view. For those who have tried to build incremental/CDC\nprocesses around denormalized schemas like this, you will appreciate the\nincredibly powerful feature that Snowflake provides here.\n\nFor more details please check out the [Streams on\nViews](https://docs.snowflake.com/en/user-guide/streams-intro.html#streams-on-\nviews) section in our documentation.\n\nDuring this step we will be creating and deploying our first Snowpark Python\nobject to Snowflake, a user-defined function (or UDF). To begin with the UDF\nwill be very basic, but in a future step we'll update it to include a third-\nparty Python package. Also in this step you will be introduced to the new\nSnowCLI, a new developer command line tool. SnowCLI makes building and\ndeploying Snowpark Python objects to Snowflake a consistent experience for the\ndeveloper. More details below on SnowCLI. To put this in context, we are on\nstep **#5** in our data flow overview:\n\n!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e1752f9-5040-4706-9dac-e77d7c376e76": {"__data__": {"id_": "2e1752f9-5040-4706-9dac-e77d7c376e76", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "838e01ec-713d-4a8f-a0b1-ce1e9660836d", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "dd7f4dc7f106d1474a96d6cade4c6da3c2c209c719743dca37c20149415311f8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f591a6e6-0912-4caa-a3dd-a8ecaf24cc4b", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e4ef72939ed6596f409cf2ac772c4832388b76f7295171923ec306e125942875", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0b0fb3d4-337b-4713-9d09-d67bdb98b372", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1a9b424d2f103173c125d893285492b27cf51fd5d00e13dba1a6934043616b6b", "class_name": "RelatedNodeInfo"}}, "hash": "777c6238f58e6520fd2c6e65442961bf445b5baaf4d387d84bb319cb857df199", "text": "Running the UDF Locally\n\nTo test the UDF locally, you will execute the\n`steps/05_fahrenheit_to_celsius_udf/app.py` script. Like we did in the\nprevious steps, we'll execute it from the terminal. So go back to the terminal\nin VS Code, make sure that your `snowflake-demo` conda environment is active,\nthen run the following commands (which assume that your terminal has the root\nof your repository open):\n\n    \n    \n    cd steps/05_fahrenheit_to_celsius_udf\n    python app.py 35\n    \n\nWhile you're developing the UDF you can simply run it locally in VS Code. And\nif your UDF doesn't need to query data from Snowflake, this process will be\nentirely local.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0b0fb3d4-337b-4713-9d09-d67bdb98b372": {"__data__": {"id_": "0b0fb3d4-337b-4713-9d09-d67bdb98b372", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "781b4df7-f027-474f-85e7-f04d491d7bbd", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "2fd62ecef0cf24a69d0d371702a22ea7e67524d35819b9d9fddbaa4c5126db25", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2e1752f9-5040-4706-9dac-e77d7c376e76", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "777c6238f58e6520fd2c6e65442961bf445b5baaf4d387d84bb319cb857df199", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cfff6798-af44-462e-a88e-fdb72cdd053e", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a35e3b2a256f13d1ac11432624d557065f965b79017ed6adccc9292033fca05e", "class_name": "RelatedNodeInfo"}}, "hash": "1a9b424d2f103173c125d893285492b27cf51fd5d00e13dba1a6934043616b6b", "text": "Deploying the UDF to Snowflake\n\nTo deploy your UDF to Snowflake we will use the SnowCLI tool. The SnowCLI tool\nwill do all the heavy lifting of packaging up your application, copying it to\na Snowflake stage, and creating the object in Snowflake. Like we did in the\nprevious steps, we'll execute it from the terminal. So go back to the terminal\nin VS Code, make sure that your `snowflake-demo` conda environment is active,\nthen run the following commands (which assume that your terminal has the root\nof your repository open):\n\n    \n    \n    cd steps/05_fahrenheit_to_celsius_udf\n    snow function create\n    \n\nWhile that is running, please open the script in VS Code and continue on this\npage to understand what is happening.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cfff6798-af44-462e-a88e-fdb72cdd053e": {"__data__": {"id_": "cfff6798-af44-462e-a88e-fdb72cdd053e", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "6aef757b-2705-4b4c-85de-3705841202fb", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ed09e87a2b378215b1dcddf4729f6461d02643d301c261786420ea534b7fabab", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0b0fb3d4-337b-4713-9d09-d67bdb98b372", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1a9b424d2f103173c125d893285492b27cf51fd5d00e13dba1a6934043616b6b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a4c590bf-3aca-42af-8546-66241fc59004", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "41e1060e8b5d50279d3b9a241f9b65569989c837428443656c684745ba352b7d", "class_name": "RelatedNodeInfo"}}, "hash": "a35e3b2a256f13d1ac11432624d557065f965b79017ed6adccc9292033fca05e", "text": "Running the UDF in Snowflake\n\nIn order to run the UDF in Snowflake you have a few options. Any UDF in\nSnowflake can be invoked through SQL as follows:\n\n    \n    \n    SELECT ANALYTICS.FAHRENHEIT_TO_CELSIUS_UDF(35);\n    \n\nAnd with the SnowCLI utility you can also invoke the UDF from the terminal in\nVS Code as follows:\n\n    \n    \n    snow function execute -f \"fahrenheit_to_celsius_udf(35)\"\n    \n\nThat will result in the SnowCLI tool generating the SQL query above and\nrunning it against your Snowflake account.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a4c590bf-3aca-42af-8546-66241fc59004": {"__data__": {"id_": "a4c590bf-3aca-42af-8546-66241fc59004", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "93f0d803-f3fe-455d-a437-91ceebe39e03", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "6352e8d3798673a6ff283a06b5ac28852bf5453bb28421c6757e3e96142fa3d1", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cfff6798-af44-462e-a88e-fdb72cdd053e", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a35e3b2a256f13d1ac11432624d557065f965b79017ed6adccc9292033fca05e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3f699fd8-fa21-46d3-807a-caae1df13f57", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "476cb00647bf08281fbc3e4eece271f0607292736809d3249575c6263d8d5587", "class_name": "RelatedNodeInfo"}}, "hash": "41e1060e8b5d50279d3b9a241f9b65569989c837428443656c684745ba352b7d", "text": "Overview of the SnowCLI Tool\n\nThe SnowCLI tool is a command\nline tool for developers, and is executed as `snow` from the command line.\n\n**Note** \\- Do not confuse this with the\nSnowSQL command line\ntool which is a client for connecting to Snowflake to execute SQL queries and\nperform all DDL and DML operations, and is executed as `snowsql` from the\ncommand line.\n\nSnowCLI simplifies the development and deployment of the following Snowflake\nobjects:\n\n  * Snowpark Python UDFs\n  * Snowpark Python Stored Procedures\n  * Streamlit Applications\n\nFor this Quickstart we will be focused on the first two. And for Snowpark\nPython UDFs and sprocs in particular, the SnowCLI does all the heavy lifting\nof deploying the objects to Snowflake. Here's a brief summary of the steps the\nSnowCLI deploy command does for you:\n\n  * Dealing with third-party packages \n    * For packages that can be accessed directly from our Anaconda channel it will add them to the `PACKAGES` list in the `CREATE PROCEDURE` or `CREATE FUNCTION` SQL command\n    * For packages which are not currently available in our Anaconda channel it will download the code and include them in the project zip file\n  * Creating a zip file of everything in your project\n  * Copying that project zip file to your Snowflake stage\n  * Creating the Snowflake function or stored procedure object\n\nThis also allows you to develop and test your Python application without\nhaving to worry about wrapping it in a corresponding Snowflake database\nobject.\n\n**Note** \\- As of 9/1/2023, the [SnowCLI Tool](https://github.com/Snowflake-\nLabs/snowcli) is still in preview.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3f699fd8-fa21-46d3-807a-caae1df13f57": {"__data__": {"id_": "3f699fd8-fa21-46d3-807a-caae1df13f57", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "169ad65b-6139-4ce3-be60-a81550f8af9e", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "887ed8f9a23d419d72b8fadf38a76d2be3338a6d15561fb90e21b019bbc3cf65", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a4c590bf-3aca-42af-8546-66241fc59004", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "41e1060e8b5d50279d3b9a241f9b65569989c837428443656c684745ba352b7d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4a503199-4a12-4813-ba4c-735e18c9f451", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b291d3d35d08808ab442b09efcba88a25ed585f5f7cbc4798d68e18751bd2aa9", "class_name": "RelatedNodeInfo"}}, "hash": "476cb00647bf08281fbc3e4eece271f0607292736809d3249575c6263d8d5587", "text": "More on Snowpark Python UDFs\n\nIn this step we deployed a very simple Python UDF to Snowflake. In a future\nstep will update it to use a third-party package. And because we deployed it\nto Snowflake with the SnowCLI command you didn't have to worry about the SQL\nDDL Syntax to create the object in Snowflake. But for reference please check\nout our [Writing Python UDFs](https://docs.snowflake.com/en/developer-\nguide/udf/python/udf-python.html) developer guide.\n\nHere is the SQL query that the SnowCLI tool generated to deploy the function:\n\n    \n    \n    CREATE OR REPLACE  FUNCTION fahrenheit_to_celsius_udf(temp_f float)\n             RETURNS float\n             LANGUAGE PYTHON\n             RUNTIME_VERSION=3.8\n             IMPORTS=('@HOL_DB.ANALYTICS.deployments/fahrenheit_to_celsius_udftemp_f_float/app.zip')\n             HANDLER='app.main'\n             PACKAGES=();\n    \n\nDuring this step we will be creating and deploying our first Snowpark Python\nstored procedure (or sproc) to Snowflake. This sproc will merge changes from\nthe `HARMONIZED.POS_FLATTENED_V_STREAM` stream into our target\n`HARMONIZED.ORDERS` table. To put this in context, we are on step **#6** in\nour data flow overview:\n\n!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4a503199-4a12-4813-ba4c-735e18c9f451": {"__data__": {"id_": "4a503199-4a12-4813-ba4c-735e18c9f451", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "530319fb-f437-4f72-9d5e-7526e0bb8564", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1c551f04e049d811f9b83f8cfd30f443967661616f6ee04a3036c3f68a66c613", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3f699fd8-fa21-46d3-807a-caae1df13f57", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "476cb00647bf08281fbc3e4eece271f0607292736809d3249575c6263d8d5587", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2e7fc0d2-2bf8-49c8-9de2-e0b3edb63ab9", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1eeb010fbe0d6449bb7602b1fa9a8bb0e5bdd78bce09eb0af0ab47a627753e7c", "class_name": "RelatedNodeInfo"}}, "hash": "b291d3d35d08808ab442b09efcba88a25ed585f5f7cbc4798d68e18751bd2aa9", "text": "Running the Sproc Locally\n\nTo test the procedure locally, you will execute the\n`steps/06_orders_update_sp/app.py` script. Like we did in the previous steps,\nwe'll execute it from the terminal. So go back to the terminal in VS Code,\nmake sure that your `snowflake-demo` conda environment is active, then run the\nfollowing commands (which assume that your terminal has the root of your\nrepository open):\n\n    \n    \n    cd steps/06_orders_update_sp\n    python app.py\n    \n\nWhile you're developing the sproc you can simply run it locally in VS Code.\nThe Python code will run locally on your laptop, but the Snowpark DataFrame\ncode will issue SQL queries to your Snowflake account.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2e7fc0d2-2bf8-49c8-9de2-e0b3edb63ab9": {"__data__": {"id_": "2e7fc0d2-2bf8-49c8-9de2-e0b3edb63ab9", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4b153848-3b09-4250-922a-a0273dec19dd", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f7bf06b833c711938733baac89dc99d30bee654fbe00ec35841dc91f41a74683", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4a503199-4a12-4813-ba4c-735e18c9f451", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b291d3d35d08808ab442b09efcba88a25ed585f5f7cbc4798d68e18751bd2aa9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "82f1ab77-c5e9-4b39-a93a-acf57edeb8d6", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "222aa948f909ebd10c176cf5cda1f08d05bfa6b4cf0d02af643c98676113bd70", "class_name": "RelatedNodeInfo"}}, "hash": "1eeb010fbe0d6449bb7602b1fa9a8bb0e5bdd78bce09eb0af0ab47a627753e7c", "text": "Deploying the Sproc to Snowflake\n\nTo deploy your sproc to Snowflake we will use the SnowCLI tool. Like we did in\nthe previous steps, we'll execute it from the terminal. So go back to the\nterminal in VS Code, make sure that your `snowflake-demo` conda environment is\nactive, then run the following commands (which assume that your terminal has\nthe root of your repository open):\n\n    \n    \n    cd steps/06_orders_update_sp\n    snow procedure create\n    \n\nWhile that is running, please open the script in VS Code and continue on this\npage to understand what is happening.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "82f1ab77-c5e9-4b39-a93a-acf57edeb8d6": {"__data__": {"id_": "82f1ab77-c5e9-4b39-a93a-acf57edeb8d6", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b89ae138-d312-4360-a76e-36feae737b7f", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c7c20a6009e6781b0772931859bcc06839191f793de8bd525022c13a0524133d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2e7fc0d2-2bf8-49c8-9de2-e0b3edb63ab9", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1eeb010fbe0d6449bb7602b1fa9a8bb0e5bdd78bce09eb0af0ab47a627753e7c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b597de2e-68f6-40c2-8a06-88021253370a", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "85d3cd2c4cc6194f09e7b4101b3cc48f361ac47e5713cd11915c41ce9f7afa7f", "class_name": "RelatedNodeInfo"}}, "hash": "222aa948f909ebd10c176cf5cda1f08d05bfa6b4cf0d02af643c98676113bd70", "text": "Running the Sproc in Snowflake\n\nIn order to run the sproc in Snowflake you have a few options. Any sproc in\nSnowflake can be invoked through SQL as follows:\n\n    \n    \n    CALL ORDERS_UPDATE_SP();\n    \n\nAnd with the SnowCLI utility you can also invoke the UDF from the terminal in\nVS Code as follows:\n\n    \n    \n    snow procedure execute -p \"orders_update_sp()\"\n    \n\nThat will result in the SnowCLI tool generating the SQL query above and\nrunning it against your Snowflake account.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b597de2e-68f6-40c2-8a06-88021253370a": {"__data__": {"id_": "b597de2e-68f6-40c2-8a06-88021253370a", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4918253a-db34-4ce0-9b96-785aa7a4659c", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "316045189d408d41f7f24d80004cb2ad6d13f8398455e0c2f677ac535b9d620f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "82f1ab77-c5e9-4b39-a93a-acf57edeb8d6", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "222aa948f909ebd10c176cf5cda1f08d05bfa6b4cf0d02af643c98676113bd70", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "639048d9-c24f-4680-b64f-e1f608a232f8", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0fd9a9d89539845579f574ef288a02afa512d9c31d5d5cf932534b677b56fb04", "class_name": "RelatedNodeInfo"}}, "hash": "85d3cd2c4cc6194f09e7b4101b3cc48f361ac47e5713cd11915c41ce9f7afa7f", "text": "More on Snowpark Python Sprocs\n\nIn this step we deployed a Python sproc to Snowflake. And because we deployed\nit to Snowflake with the SnowCLI command you didn't have to worry about the\nSQL DDL Syntax to create the object in Snowflake. But for reference please\ncheck out our [Writing Stored Procedures in Snowpark\n(Python)](https://docs.snowflake.com/en/sql-reference/stored-procedures-\npython.html) guide.\n\nHere is the SQL query that the SnowCLI tool generated to deploy the procedure:\n\n    \n    \n    CREATE OR REPLACE  PROCEDURE orders_update_sp()\n             RETURNS string\n             LANGUAGE PYTHON\n             RUNTIME_VERSION=3.8\n             IMPORTS=('@HOL_DB.HARMONIZED.deployments/orders_update_sp/app.zip')\n             HANDLER='app.main'\n             PACKAGES=('snowflake-snowpark-python','toml')\n            EXECUTE AS CALLER;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "639048d9-c24f-4680-b64f-e1f608a232f8": {"__data__": {"id_": "639048d9-c24f-4680-b64f-e1f608a232f8", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d643b7d2-4ebd-413d-bd60-586e58d3a387", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e5e668681f515ded661a625b07b5ea6fcc03b84490d8d13462f4f85ac1b49e90", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b597de2e-68f6-40c2-8a06-88021253370a", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "85d3cd2c4cc6194f09e7b4101b3cc48f361ac47e5713cd11915c41ce9f7afa7f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2fa1383d-11fd-43da-aa36-a2495640907f", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "52cf344a156db074987611ca6312a9f1e4d21b8cc30fe192171f14c761dd0641", "class_name": "RelatedNodeInfo"}}, "hash": "0fd9a9d89539845579f574ef288a02afa512d9c31d5d5cf932534b677b56fb04", "text": "More on the Snowpark API\n\nIn this step we're starting to really use the Snowpark DataFrame API for data\ntransformations. The Snowpark API provides the same functionality as the\n[Spark SQL\nAPI](https://spark.apache.org/docs/latest/api/python/reference/pyspark.sql/index.html).\nTo begin with you need to create a Snowpark session object. Like PySpark, this\nis accomplished with the `Session.builder.configs().create()` methods. When\nrunning locally, we use the `utils.snowpark_utils.get_snowpark_session()`\nhelper function to create the session object for us. But when deployed to\nSnowflake, the session object is provisioned for you automatically by\nSnowflake. And when building a Snowpark Python sproc the contract is that the\nfirst argument to the entry point (or handler) function is a Snowpark session.\n\nThe first thing you'll notice in the `steps/06_orders_update_sp/app.py` script\nis that we have some functions which use SQL to create objects in Snowflake\nand to check object status. To issue a SQL statement to Snowflake with the\nSnowpark API you use the `session.sql()` function, like you'd expect. Here's\none example:\n\n    \n    \n    def create_orders_stream(session):\n        _ = session.sql(\"CREATE STREAM IF NOT EXISTS HARMONIZED.ORDERS_STREAM ON TABLE HARMONIZED.ORDERS \\\n                        SHOW_INITIAL_ROWS = TRUE;\").collect()\n    \n\nThe second thing to point out is how we're using DataFrames to merge changes\nfrom the source view to the target table. The Snowpark DataFrame API provides\na `merge()` method which will ultimately generate a `MERGE` command in\nSnowflake.\n\n    \n    \n        source = session.table('HARMONIZED.POS_FLATTENED_V_STREAM')\n        target = session.table('HARMONIZED.ORDERS')\n    \n        # TODO: Is the if clause supposed to be based on \"META_UPDATED_AT\"?\n        cols_to_update = {c: source[c] for c in source.schema.names if \"METADATA\" not in c}\n        metadata_col_to_update = {\"META_UPDATED_AT\": F.current_timestamp()}\n        updates = {**cols_to_update, **metadata_col_to_update}\n    \n        # merge into DIM_CUSTOMER\n        target.merge(source, target['ORDER_DETAIL_ID'] == source['ORDER_DETAIL_ID'], \\\n                            [F.when_matched().update(updates), F.when_not_matched().insert(updates)])\n    \n\nAgain, for more details about the Snowpark Python DataFrame API, please check\nout our [Working with DataFrames in Snowpark\nPython](https://docs.snowflake.com/en/developer-guide/snowpark/python/working-\nwith-dataframes.html) page.\n\nDuring this step we will be creating and deploying our second Snowpark Python\nsproc to Snowflake. This sproc will join the `HARMONIZED.ORDERS` data with the\nWeather Source data to create a final, aggregated table for analysis named\n`ANALYTICS.DAILY_CITY_METRICS`. We will process the data incrementally from\nthe `HARMONIZED.ORDERS` table using another Snowflake Stream. And we will\nagain use the Snowpark DataFrame `merge()` method to merge/upsert the data. To\nput this in context, we are on step **#7** in our data flow overview:\n\n!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2fa1383d-11fd-43da-aa36-a2495640907f": {"__data__": {"id_": "2fa1383d-11fd-43da-aa36-a2495640907f", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "56386cb6-8c14-4aa6-8bb6-6085f63062b0", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "14d9b3ff8dbfd3a5a501d6b6685cd8d46cf9a77a6e4d8257f6c570d9fdec1cb7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "639048d9-c24f-4680-b64f-e1f608a232f8", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0fd9a9d89539845579f574ef288a02afa512d9c31d5d5cf932534b677b56fb04", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b341b476-aee5-46e4-a8fc-e4849caabc1d", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f98a3bc4937b4bd62b1707e5ba780ca7873cbfaedf968d84e3de337b794699b1", "class_name": "RelatedNodeInfo"}}, "hash": "52cf344a156db074987611ca6312a9f1e4d21b8cc30fe192171f14c761dd0641", "text": "Running the Sproc Locally\n\nTo test the procedure locally, you will execute the\n`steps/07_daily_city_metrics_update_sp/app.py` script. Like we did in the\nprevious steps, we'll execute it from the terminal. So go back to the terminal\nin VS Code, make sure that your `snowflake-demo` conda environment is active,\nthen run the following commands (which assume that your terminal has the root\nof your repository open):\n\n    \n    \n    cd steps/07_daily_city_metrics_update_sp\n    python app.py\n    \n\nWhile you're developing the sproc you can simply run it locally in VS Code.\nThe Python code will run locally on your laptop, but the Snowpark DataFrame\ncode will issue SQL queries to your Snowflake account.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b341b476-aee5-46e4-a8fc-e4849caabc1d": {"__data__": {"id_": "b341b476-aee5-46e4-a8fc-e4849caabc1d", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "03593344-c1fb-45b6-a39b-984c3992b147", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f19f61a07ba29ea788a79402bee715464aed30fda242078aa09ba537590c03ca", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2fa1383d-11fd-43da-aa36-a2495640907f", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "52cf344a156db074987611ca6312a9f1e4d21b8cc30fe192171f14c761dd0641", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ad426243-3edc-4210-9101-e57c2d2896c9", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f45bbc28f85ac18e78fa1424cce028b6a695c66727d53082681d1d54bace2db1", "class_name": "RelatedNodeInfo"}}, "hash": "f98a3bc4937b4bd62b1707e5ba780ca7873cbfaedf968d84e3de337b794699b1", "text": "Deploying the Sproc to Snowflake\n\nTo deploy your sproc to Snowflake we will use the SnowCLI tool. Like we did in\nthe previous steps, we'll execute it from the terminal. So go back to the\nterminal in VS Code, make sure that your `snowflake-demo` conda environment is\nactive, then run the following commands (which assume that your terminal has\nthe root of your repository open):\n\n    \n    \n    cd steps/07_daily_city_metrics_update_sp\n    snow procedure create\n    \n\nWhile that is running, please open the script in VS Code and continue on this\npage to understand what is happening.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ad426243-3edc-4210-9101-e57c2d2896c9": {"__data__": {"id_": "ad426243-3edc-4210-9101-e57c2d2896c9", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "52e875c2-8342-4bce-bc5f-9920ece1517c", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "09e888f27429e50c8c357e7d6cff69ddf09257cba1635ad009d48950c2b9df77", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b341b476-aee5-46e4-a8fc-e4849caabc1d", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f98a3bc4937b4bd62b1707e5ba780ca7873cbfaedf968d84e3de337b794699b1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4781c58f-470e-467d-b2e1-88a4d6c3a508", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "6d885cdfed22832da2c0892e25ece34dea8db9a2d574139f1826fd0ac9fe0e6f", "class_name": "RelatedNodeInfo"}}, "hash": "f45bbc28f85ac18e78fa1424cce028b6a695c66727d53082681d1d54bace2db1", "text": "Running the Sproc in Snowflake\n\nIn order to run the sproc in Snowflake you have a few options. Any sproc in\nSnowflake can be invoked through SQL as follows:\n\n    \n    \n    CALL DAILY_CITY_METRICS_UPDATE_SP();\n    \n\nAnd with the SnowCLI utility you can also invoke the UDF from the terminal in\nVS Code as follows:\n\n    \n    \n    snow procedure execute -p \"daily_city_metrics_update_sp()\"\n    \n\nThat will result in the SnowCLI tool generating the SQL query above and\nrunning it against your Snowflake account.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4781c58f-470e-467d-b2e1-88a4d6c3a508": {"__data__": {"id_": "4781c58f-470e-467d-b2e1-88a4d6c3a508", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f68ab3a8-6c62-4704-95b9-267e36e9bd3e", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "61687a4376d22e7458cbcb2c8685024e9a01f4c47d0e72d6479ceae298fbbb0e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ad426243-3edc-4210-9101-e57c2d2896c9", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f45bbc28f85ac18e78fa1424cce028b6a695c66727d53082681d1d54bace2db1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fc16ae55-1fe8-4f12-ae2f-3874f325b13c", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "d5cb8c483e0866780acd0fd95295b3ed592bd0ba4cc493bd89127109d559cb5b", "class_name": "RelatedNodeInfo"}}, "hash": "6d885cdfed22832da2c0892e25ece34dea8db9a2d574139f1826fd0ac9fe0e6f", "text": "Data Modeling Best Practice\n\nWhen modeling data for analysis a best practice has been to clearly define and\nmanage the schema of the table. In step 2, when we loaded raw data from\nParquet we took advantage of Snowflake's schema detection feature to create a\ntable with the same schema as the Parquet files. In this step we are\nexplicitly defining the schema in DataFrame syntax and using that to create\nthe table.\n\n    \n    \n    def create_daily_city_metrics_table(session):\n        SHARED_COLUMNS= [T.StructField(\"DATE\", T.DateType()),\n                                            T.StructField(\"CITY_NAME\", T.StringType()),\n                                            T.StructField(\"COUNTRY_DESC\", T.StringType()),\n                                            T.StructField(\"DAILY_SALES\", T.StringType()),\n                                            T.StructField(\"AVG_TEMPERATURE_FAHRENHEIT\", T.DecimalType()),\n                                            T.StructField(\"AVG_TEMPERATURE_CELSIUS\", T.DecimalType()),\n                                            T.StructField(\"AVG_PRECIPITATION_INCHES\", T.DecimalType()),\n                                            T.StructField(\"AVG_PRECIPITATION_MILLIMETERS\", T.DecimalType()),\n                                            T.StructField(\"MAX_WIND_SPEED_100M_MPH\", T.DecimalType()),\n                                        ]\n        DAILY_CITY_METRICS_COLUMNS = [*SHARED_COLUMNS, T.StructField(\"META_UPDATED_AT\", T.TimestampType())]\n        DAILY_CITY_METRICS_SCHEMA = T.StructType(DAILY_CITY_METRICS_COLUMNS)\n    \n        dcm = session.create_dataframe([[None]*len(DAILY_CITY_METRICS_SCHEMA.names)], schema=DAILY_CITY_METRICS_SCHEMA) \\\n                            .na.drop() \\\n                            .write.mode('overwrite').save_as_table('ANALYTICS.DAILY_CITY_METRICS')\n        dcm = session.table('ANALYTICS.DAILY_CITY_METRICS')", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fc16ae55-1fe8-4f12-ae2f-3874f325b13c": {"__data__": {"id_": "fc16ae55-1fe8-4f12-ae2f-3874f325b13c", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "af91a16d-f4ba-4dc3-b34f-e846b69df9e6", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "fa676235d3b42fd38c33acc559a22982ca9415055934941eba2c191f3edb708c", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4781c58f-470e-467d-b2e1-88a4d6c3a508", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "6d885cdfed22832da2c0892e25ece34dea8db9a2d574139f1826fd0ac9fe0e6f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f5cddbb2-4e8d-4f83-9ec6-b9947ca8bd28", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "177dabbb77b7a4481bd83b8d1669a22176f1b29c03a231413185233fbf5e1d45", "class_name": "RelatedNodeInfo"}}, "hash": "d5cb8c483e0866780acd0fd95295b3ed592bd0ba4cc493bd89127109d559cb5b", "text": "Complex Aggregation Query\n\nThe `merge_daily_city_metrics()` function contains a complex aggregation query\nwhich is used to join together and aggregate the data from our POS and Weather\nSource. Take a look at the series of complex series of joins and aggregations\nthat are expressed, and how we're even leveraging the Snowpark UDF we created\nin step #5!\n\nThe complex aggregation query is then merged into the final analytics table\nusing the Snowpark `merge()` method. If you haven't already, check out your\nSnowflake Query history and see which queries were generated by the Snowpark\nAPI. In this case you will see that the Snowpark API took all the complex\nlogic, including the merge and created a single Snowflake query to execute!\n\nDuring this step we will be orchestrating our new Snowpark pipelines with\nSnowflake's native orchestration feature named Tasks. We will create two\ntasks, one for each stored procedure, and chain them together. We will then\nrun the tasks. To put this in context, we are on step **#8** in our data flow\noverview:\n\n!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f5cddbb2-4e8d-4f83-9ec6-b9947ca8bd28": {"__data__": {"id_": "f5cddbb2-4e8d-4f83-9ec6-b9947ca8bd28", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e644e1ea-d4be-4740-a876-8fe026651a3a", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f0ab8d0d50a7c16090059475ec3fc146a7e832eb6522a4e21d091015849b78e7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fc16ae55-1fe8-4f12-ae2f-3874f325b13c", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "d5cb8c483e0866780acd0fd95295b3ed592bd0ba4cc493bd89127109d559cb5b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1d4f13bd-4d14-4602-ac6d-cd0ae918c989", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "9b257309ecb9198dc279b09be406c669bb1dff41608548d23a444f494864782e", "class_name": "RelatedNodeInfo"}}, "hash": "177dabbb77b7a4481bd83b8d1669a22176f1b29c03a231413185233fbf5e1d45", "text": "Run the Script\n\nSince this is a SQL script we will be using our native VS Code extension to\nexecute it. So simply open the `steps/08_orchestrate_jobs.sql` script in VS\nCode and run the whole thing using the \"Execute All Statements\" button in the\nupper right corner of the editor window.\n\nWhile that is running, please read through the script in VS Code and continue\non this page to understand what is happening.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1d4f13bd-4d14-4602-ac6d-cd0ae918c989": {"__data__": {"id_": "1d4f13bd-4d14-4602-ac6d-cd0ae918c989", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "bcdd6387-f1c1-4fe9-b5e5-c7940e5e3efa", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "27f63e4178a95fe27cedf52f3fa29f8cd2de02a030d88aa5d0aa016181600cb7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f5cddbb2-4e8d-4f83-9ec6-b9947ca8bd28", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "177dabbb77b7a4481bd83b8d1669a22176f1b29c03a231413185233fbf5e1d45", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6d4ba6c4-5fdc-43a9-9f9d-fa04622770e2", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1942dc7946eb1b98600a5cc17c9ea7a06b2c3d40840dae430043a818adbac803", "class_name": "RelatedNodeInfo"}}, "hash": "9b257309ecb9198dc279b09be406c669bb1dff41608548d23a444f494864782e", "text": "Running the Tasks\n\nIn this step we did not create a schedule for our task DAG, so it will not run\non its own at this point. So in this script you will notice that we manually\nexecute the DAG, like this:\n\n    \n    \n    EXECUTE TASK ORDERS_UPDATE_TASK;\n    \n\nTo see what happened when you ran this task just now, highlight and run (using\nCMD/CTRL+Enter) this commented query in the script:\n\n    \n    \n    SELECT *\n    FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(\n        SCHEDULED_TIME_RANGE_START=>DATEADD('DAY',-1,CURRENT_TIMESTAMP()),\n        RESULT_LIMIT => 100))\n    ORDER BY SCHEDULED_TIME DESC\n    ;\n    \n\nYou will notice in the task history output that it skipped our task\n`ORDERS_UPDATE_TASK`. This is correct, because our\n`HARMONIZED.POS_FLATTENED_V_STREAM` stream doesn't have any data. We'll add\nsome new data and run them again in the next step.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6d4ba6c4-5fdc-43a9-9f9d-fa04622770e2": {"__data__": {"id_": "6d4ba6c4-5fdc-43a9-9f9d-fa04622770e2", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3d040ded-0cc2-4d2e-bd99-035708c152e1", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "4f2a16f2a8150f5a8330ee89401a9fe41bb18fa7ccdcea775d8918acf3f6a141", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1d4f13bd-4d14-4602-ac6d-cd0ae918c989", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "9b257309ecb9198dc279b09be406c669bb1dff41608548d23a444f494864782e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0015ed86-0850-48f9-9e41-888c6e9a411e", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "22693a3fbb839bccc90803cf713e97682302ac38c65444d401a9b307fd1a5305", "class_name": "RelatedNodeInfo"}}, "hash": "1942dc7946eb1b98600a5cc17c9ea7a06b2c3d40840dae430043a818adbac803", "text": "More on Tasks\n\nTasks are Snowflake's native scheduling/orchestration feature. With a task you\ncan execute any one of the following types of SQL code:\n\n  * Single SQL statement\n  * Call to a stored procedure\n  * Procedural logic using Snowflake Scripting Developer Guide\n\nFor this Quickstart we'll call our Snowpark stored procedures. Here is the SQL\nDDL code to create the second task:\n\n    \n    \n    CREATE OR REPLACE TASK DAILY_CITY_METRICS_UPDATE_TASK\n    WAREHOUSE = HOL_WH\n    AFTER ORDERS_UPDATE_TASK\n    WHEN\n      SYSTEM$STREAM_HAS_DATA('ORDERS_STREAM')\n    AS\n    CALL ANALYTICS.DAILY_CITY_METRICS_UPDATE_SP();\n    \n\nA few things to point out. First you specify which Snowflake virtual warehouse\nto use when running the task with the `WAREHOUSE` clause. The `AFTER` clause\nlets you define the relationship between tasks, and the structure of this\nrelationship is a Directed Acyclic Graph (or DAG) like most orchestration\ntools provide. The `AS` clause let's you define what the task should do when\nit runs, in this case to call our stored procedure.\n\nThe `WHEN` clause is really cool. We've already seen how streams work in\nSnowflake by allowing you to incrementally process data. We've even seen how\nyou can create a stream on a view (which joins many tables together) and\ncreate a stream on that view to process its data incrementally! Here in the\n`WHEN` clause we're calling a system function `SYSTEM$STREAM_HAS_DATA()` which\nreturns true if the specified stream has new data. With the `WHEN` clause in\nplace the virtual warehouse will only be started up when the stream has new\ndata. So if there's no new data when the task runs then your warehouse won't\nbe started up and you won't be charged. You will only be charged when there's\nnew data to process. Pretty cool, huh?\n\nAs mentioned above we did not define a `SCHEDULE` for the root task, so this\nDAG will not run on its own. That's fine for this Quickstart, but in a real\nsituation you would define a schedule. See [CREATE\nTASK](https://docs.snowflake.com/en/sql-reference/sql/create-task.html) for\nthe details.\n\nAnd for more details on Tasks see [Introduction to\nTasks](https://docs.snowflake.com/en/user-guide/tasks-intro.html).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0015ed86-0850-48f9-9e41-888c6e9a411e": {"__data__": {"id_": "0015ed86-0850-48f9-9e41-888c6e9a411e", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "88c74ffa-111f-453a-a2bf-f264e5904c77", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c595b6a0c01615607ae231a2ff20aa6c3bab3040907b1ad4705aee40317772e0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6d4ba6c4-5fdc-43a9-9f9d-fa04622770e2", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1942dc7946eb1b98600a5cc17c9ea7a06b2c3d40840dae430043a818adbac803", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "641ff123-3660-4228-b549-d0b1cdaf4e6a", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "87dd651c829c23d77355cee59b2715ca48cfc3570e4687b9d4c16ca6c57b6c5f", "class_name": "RelatedNodeInfo"}}, "hash": "22693a3fbb839bccc90803cf713e97682302ac38c65444d401a9b307fd1a5305", "text": "Task Metadata\n\nSnowflake keeps metadata for almost everything you do, and makes that metadata\navailable for you to query (and to create any type of process around). Tasks\nare no different, Snowflake maintains rich metadata to help you monitor your\ntask runs. Here are a few sample SQL queries you can use to monitor your tasks\nruns:\n\n    \n    \n    -- Get a list of tasks\n    SHOW TASKS;\n    \n    -- Task execution history in the past day\n    SELECT *\n    FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(\n        SCHEDULED_TIME_RANGE_START=>DATEADD('DAY',-1,CURRENT_TIMESTAMP()),\n        RESULT_LIMIT => 100))\n    ORDER BY SCHEDULED_TIME DESC\n    ;\n    \n    -- Scheduled task runs\n    SELECT\n        TIMESTAMPDIFF(SECOND, CURRENT_TIMESTAMP, SCHEDULED_TIME) NEXT_RUN,\n        SCHEDULED_TIME,\n        NAME,\n        STATE\n    FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY())\n    WHERE STATE = 'SCHEDULED'\n    ORDER BY COMPLETED_TIME DESC;", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "641ff123-3660-4228-b549-d0b1cdaf4e6a": {"__data__": {"id_": "641ff123-3660-4228-b549-d0b1cdaf4e6a", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "69bf4d8c-4782-45f3-a468-74d49873df83", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "8f1d509f73c29ed503943193d623c37b80bf54d43baeac03273489f587590b34", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0015ed86-0850-48f9-9e41-888c6e9a411e", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "22693a3fbb839bccc90803cf713e97682302ac38c65444d401a9b307fd1a5305", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e20270d5-ed4e-494c-8b79-9db1a0a0c35b", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7048e7ca423162507aa4d8daf822b0238a6ffdc1f14b124c820530bec79d9b25", "class_name": "RelatedNodeInfo"}}, "hash": "87dd651c829c23d77355cee59b2715ca48cfc3570e4687b9d4c16ca6c57b6c5f", "text": "Monitoring Tasks\n\nSo while you're free to create any operational or monitoring process you wish,\nSnowflake provides some rich task observability features in our Snowsight UI.\nTry it out for yourself by following these steps:\n\n  1. In the Snowsight navigation menu, click **Data** \u00bb **Databases**.\n  2. In the right pane, using the object explorer, navigate to a database and schema.\n  3. For the selected schema, select and expand **Tasks**.\n  4. Select a task. Task information is displayed, including **Task Details** , **Graph** , and **Run History** sub-tabs.\n  5. Select the **Graph** tab. The task graph appears, displaying a hierarchy of child tasks.\n  6. Select a task to view its details.\n\nHere's what the task graph looks like:\n\n!\n\nAnd here's an example of the task run history:\n\n!\n\nFor more details, and to learn about viewing account level task history,\nplease check out our [Viewing Task\nHistory](https://docs.snowflake.com/en/user-guide/ui-snowsight-tasks.html)\ndocumentation.\n\nDuring this step we will be adding new data to our POS order tables and then\nrunning our entire end-to-end pipeline to process the new data. And this\nentire pipeline will be processing data incrementally thanks to Snowflake's\nadvanced stream/CDC capabilities. To put this in context, we are on step\n**#9** in our data flow overview:\n\n!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e20270d5-ed4e-494c-8b79-9db1a0a0c35b": {"__data__": {"id_": "e20270d5-ed4e-494c-8b79-9db1a0a0c35b", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0d36202a-648c-4c68-be47-b71ed769f8b5", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "abc944219289158f8895de7be6c7c7c5db11c307b1a6c29d38db959a0963c40d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "641ff123-3660-4228-b549-d0b1cdaf4e6a", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "87dd651c829c23d77355cee59b2715ca48cfc3570e4687b9d4c16ca6c57b6c5f", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "798be441-f4f4-4f28-9790-b06d4e6f5f74", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3d5b1b748e388ae43158c7ab7735435331b802d66874952df9b71ae53f003f60", "class_name": "RelatedNodeInfo"}}, "hash": "7048e7ca423162507aa4d8daf822b0238a6ffdc1f14b124c820530bec79d9b25", "text": "Run the Script\n\nSince this is a SQL script we will be using our native VS Code extension to\nexecute it. So simply open the `steps/09_process_incrementally.sql` script in\nVS Code and run the whole thing using the \"Execute All Statements\" button in\nthe upper right corner of the editor window.\n\nWhile that is running, let's briefly discuss what's happening. As in step #2,\nwe're going to load data from Parquet into our raw POS tables. In step #2 we\nloaded all the order data except for the 2022 data for `ORDER_HEADER` and\n`ORDER_DETAIL`. So now we're going to load the remaining data.\n\nThis time we will be doing the data loading through SQL instead of Python, but\nthe process is the same. We'll resize the warehouse, scaling up so that we can\nload the data faster and then scaling back down after when we're done. After\nthe new data is loaded we will also run the task DAG again. And this time both\ntasks will run and process the new data.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "798be441-f4f4-4f28-9790-b06d4e6f5f74": {"__data__": {"id_": "798be441-f4f4-4f28-9790-b06d4e6f5f74", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "784ccd52-66a6-4e4d-8340-6048220e91d4", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "6432efc29a43988d72dd1317067f1b66a272b6b4f976d75120aceab9da87096d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e20270d5-ed4e-494c-8b79-9db1a0a0c35b", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7048e7ca423162507aa4d8daf822b0238a6ffdc1f14b124c820530bec79d9b25", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9824f763-2143-4c00-b27e-ba8447a02b5b", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "35c5b83d8edae8f7e0f8e0c76ec7cafc638082e7bdde28787ac5d1b304460cf4", "class_name": "RelatedNodeInfo"}}, "hash": "3d5b1b748e388ae43158c7ab7735435331b802d66874952df9b71ae53f003f60", "text": "Viewing the Task History\n\nLike the in the previous step, to see what happened when you ran this task\nDAG, highlight and run (using CMD/CTRL+Enter) this commented query in the\nscript:\n\n    \n    \n    SELECT *\n    FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(\n        SCHEDULED_TIME_RANGE_START=>DATEADD('DAY',-1,CURRENT_TIMESTAMP()),\n        RESULT_LIMIT => 100))\n    ORDER BY SCHEDULED_TIME DESC\n    ;\n    \n\nThis time you will notice that the `ORDERS_UPDATE_TASK` task will not be\nskipped, since the `HARMONIZED.POS_FLATTENED_V_STREAM` stream has new data. In\na few minutes you should see that both the `ORDERS_UPDATE_TASK` task and the\n`DAILY_CITY_METRICS_UPDATE_TASK` task completed successfully.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9824f763-2143-4c00-b27e-ba8447a02b5b": {"__data__": {"id_": "9824f763-2143-4c00-b27e-ba8447a02b5b", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8e109689-d5f9-4bdb-a88e-03925419cac0", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c1e8aa8b176ec563f895bba87c134bf14bd22f1b010a924c0b6474cc05fcd741", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "798be441-f4f4-4f28-9790-b06d4e6f5f74", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3d5b1b748e388ae43158c7ab7735435331b802d66874952df9b71ae53f003f60", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0ed30b6d-e050-4b7b-b0c2-c3686bacf8b9", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "8531272144e7a39d211b1a05356aae3341dfef4e15dfbba4788843ab45a2b800", "class_name": "RelatedNodeInfo"}}, "hash": "35c5b83d8edae8f7e0f8e0c76ec7cafc638082e7bdde28787ac5d1b304460cf4", "text": "Query History for Tasks\n\nOne important thing to understand about tasks, is that the queries which get\nexecuted by the task won't show up with the default Query History UI settings.\nIn order to see the queries that just ran you need to do the following:\n\n  * Remove filters at the top of this table, including your username, as later scheduled tasks will run as \"System\":\n\n!\n\n  * Click \"Filter\", and add filter option \u2018Queries executed by user tasks' and click \"Apply Filters\":\n\n!\n\nYou should now see all the queries run by your tasks! Take a look at each of\nthe MERGE commands in the Query History to see how many records were processed\nby each task. And don't forget to notice that we processed the whole pipeline\njust now, and did so incrementally!\n\nDuring this step we will be making a change to our\n`FAHRENHEIT_TO_CELSIUS_UDF()` UDF and then deploying it via a CI/CD pipeline.\nWe will be updating the `FAHRENHEIT_TO_CELSIUS_UDF()` UDF to use a third-party\nPython package, pushing it to your forked GitHub repo, and finally deploying\nit using the SnowCLI in a GitHub Actions workflow! To put this in context, we\nare on step **#10** in our data flow overview:\n\n!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0ed30b6d-e050-4b7b-b0c2-c3686bacf8b9": {"__data__": {"id_": "0ed30b6d-e050-4b7b-b0c2-c3686bacf8b9", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "be0a8aa4-341d-4dae-8e09-171028879662", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0e48ca4b45da2864fe80f99abc561fb274a3bc90a373c666bfbff337c5cdfd27", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9824f763-2143-4c00-b27e-ba8447a02b5b", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "35c5b83d8edae8f7e0f8e0c76ec7cafc638082e7bdde28787ac5d1b304460cf4", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4826b065-56d8-49c7-a208-348f8758b9ba", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "2a0318704a7bdbb3c4b780430b474aab196898b4b905c02e0f39635dda4f16b3", "class_name": "RelatedNodeInfo"}}, "hash": "8531272144e7a39d211b1a05356aae3341dfef4e15dfbba4788843ab45a2b800", "text": "Update the Fahrenheit to Celsius UDF\n\nWe will be replacing our hard-coded temperature conversion with a package from\n`scipy`. First we will make a few changes to the\n`steps/05_fahrenheit_to_celsius_udf/app.py` script. In this file we will be\nadding an `import` command and replacing the body of the `main()` function. So\nopen the `steps/05_fahrenheit_to_celsius_udf/app.py` script in VS Code and\nreplace this section:\n\n    \n    \n    import sys\n    \n    def main(temp_f: float) -> float:\n        return (float(temp_f) - 32) * (5/9)\n    \n\nWith this:\n\n    \n    \n    import sys\n    from scipy.constants import convert_temperature\n    \n    def main(temp_f: float) -> float:\n        return convert_temperature(float(temp_f), 'F', 'C')\n    \n\nDon't forget to save your changes.\n\nThe second change we need to make is to add `scipy` to our `requirements.txt`\nfile. Open the `steps/05_fahrenheit_to_celsius_udf/requirements.txt` file in\nVS Code, add a newline with `scipy` on it and save it.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4826b065-56d8-49c7-a208-348f8758b9ba": {"__data__": {"id_": "4826b065-56d8-49c7-a208-348f8758b9ba", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "442c6f4a-066d-42b1-a2e2-48e1af44f583", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "689ac67d5419f71add7d166be5498b7269006f017051b8ce53171530cb5dbc51", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0ed30b6d-e050-4b7b-b0c2-c3686bacf8b9", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "8531272144e7a39d211b1a05356aae3341dfef4e15dfbba4788843ab45a2b800", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "4d36d302-803a-4107-b63c-56ea5ac89295", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "bcd6e9def74e78180fefc65cf054fed0d2dbe4c11d0ebc92dea329af7c70305b", "class_name": "RelatedNodeInfo"}}, "hash": "2a0318704a7bdbb3c4b780430b474aab196898b4b905c02e0f39635dda4f16b3", "text": "Test your Changes Locally\n\nTo test the UDF locally, you will execute the\n`steps/05_fahrenheit_to_celsius_udf/app.py` script. Like we did in previous\nsteps, we'll execute it from the terminal. So go back to the terminal in VS\nCode, make sure that your `snowflake-demo` conda environment is active, then\nrun the following commands (which assume that your terminal has the root of\nyour repository open):\n\n    \n    \n    cd steps/05_fahrenheit_to_celsius_udf\n    pip install -r requirements.txt\n    python app.py 35\n    \n\nNotice that this time we're also running pip install to make sure that our\ndependent packages are installed. Once your function runs successfully we'll\nbe ready to deploy it via CI/CD!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "4d36d302-803a-4107-b63c-56ea5ac89295": {"__data__": {"id_": "4d36d302-803a-4107-b63c-56ea5ac89295", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "456d6a23-92c2-4d4f-895c-49110d44ae7e", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "172b6abed53fd538a900a4171b08bc76788be898209542d692adc6da01626bd6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4826b065-56d8-49c7-a208-348f8758b9ba", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "2a0318704a7bdbb3c4b780430b474aab196898b4b905c02e0f39635dda4f16b3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "2cf833da-e926-4b77-9c99-334451d5d6d5", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "46d79d62d37e3e599eaf22948c2146f88fa2014cc96d33c719fcf95c896b7b1b", "class_name": "RelatedNodeInfo"}}, "hash": "bcd6e9def74e78180fefc65cf054fed0d2dbe4c11d0ebc92dea329af7c70305b", "text": "Configuring Your Forked GitHub Project\n\nIn order for your GitHub Actions workflow to be able to connect to your\nSnowflake account you will need to store your Snowflake credentials in GitHub.\nAction Secrets in GitHub are used to securely store values/variables which\nwill be used in your CI/CD pipelines. In this step we will create secrets for\neach of the parameters used by SnowCLI.\n\nFrom the repository, click on the `Settings` tab near the top of the page.\nFrom the Settings page, click on the `Secrets and variables` then `Actions`\ntab in the left hand navigation. The `Actions` secrets should be selected. For\neach secret listed below click on `New repository secret` near the top right\nand enter the name given below along with the appropriate value (adjusting as\nappropriate).\n\nSecret name\n\n|\n\nSecret value  \n  \n---|---  \n  \nSNOWSQL_ACCOUNT\n\n|\n\nmyaccount  \n  \nSNOWSQL_USER\n\n|\n\nmyusername  \n  \nSNOWSQL_PWD\n\n|\n\nmypassword  \n  \nSNOWSQL_ROLE\n\n|\n\nHOL_ROLE  \n  \nSNOWSQL_WAREHOUSE\n\n|\n\nHOL_WH  \n  \nSNOWSQL_DATABASE\n\n|\n\nHOL_DB  \n  \n**Tip** \\- For more details on how to structure the account name in\nSNOWSQL_ACCOUNT, see the account name discussion in [the Snowflake Python\nConnector install guide](https://docs.snowflake.com/en/user-guide/python-\nconnector-install.html#step-2-verify-your-installation).\n\nWhen you're finished adding all the secrets, the page should look like this:\n\n!\n\n**Tip** \\- For an even better solution to managing your secrets, you can\nleverage [GitHub Actions\nEnvironments](https://docs.github.com/en/actions/reference/environments).\nEnvironments allow you to group secrets together and define protection rules\nfor each of your environments.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "2cf833da-e926-4b77-9c99-334451d5d6d5": {"__data__": {"id_": "2cf833da-e926-4b77-9c99-334451d5d6d5", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "25bf98e8-2d7f-4d16-98c9-d97cfaae6cc5", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "eee4fbd97ee7834587ba326fdcbbc0a2a6bccff1c328e9986bd9da49263d3965", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "4d36d302-803a-4107-b63c-56ea5ac89295", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "bcd6e9def74e78180fefc65cf054fed0d2dbe4c11d0ebc92dea329af7c70305b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e17e57af-3662-4cd0-87b2-6ed03bce68f6", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "25e9ea5152d980c5edf1af971923ef95517961222f54dee8bf1b74f542a65459", "class_name": "RelatedNodeInfo"}}, "hash": "46d79d62d37e3e599eaf22948c2146f88fa2014cc96d33c719fcf95c896b7b1b", "text": "Push Changes to Forked Repository\n\nNow that we have a changes ready and tested, and our Snowflake credentials\nstored in GitHub, let's commit them to our local repository and then push them\nto your forked repository. This can certainly be done from the command line,\nbut in this step we'll do so through VS Code to make it easy.\n\nStart by opening the \"Source Control\" extension in the left hand nav bar, you\nshould see two files with changes. Click the `+` (plus) sign at the right of\neach file name to stage the changes. Then enter a message in the \"Message\" box\nand click the blue `Commit` button to commit the changes locally. Here's what\nit should look like before you click the button:\n\n!\n\nAt this point those changes are only committed locally and have not yet been\npushed to your forked repository in GitHub. To do that, simply click the blue\n`Sync Changes` button to push these commits to GitHub. Here's what it should\nlook like before you click the button:\n\n!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e17e57af-3662-4cd0-87b2-6ed03bce68f6": {"__data__": {"id_": "e17e57af-3662-4cd0-87b2-6ed03bce68f6", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d7661e42-c331-47a9-85db-6167f15394dd", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7e3c221c3693b25a671e1e3cc53d4cc6bb4df3f189ee40ae0c9b7b2f4a856b55", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "2cf833da-e926-4b77-9c99-334451d5d6d5", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "46d79d62d37e3e599eaf22948c2146f88fa2014cc96d33c719fcf95c896b7b1b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "97b88142-b7e8-44e6-b582-ea887b54a6fb", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "6d57962c0c36e019e9a01484bb7e10369ee036a0636b65fc37421ebc639fd92d", "class_name": "RelatedNodeInfo"}}, "hash": "25e9ea5152d980c5edf1af971923ef95517961222f54dee8bf1b74f542a65459", "text": "Viewing GitHub Actions Workflow\n\nThis repository is already set up with a very simple GitHub Actions CI/CD\npipeline. You can review the code for the workflow by opening the\n`.github/workflows/build_and_deploy.yaml` file in VS Code.\n\nAs soon as you pushed the changes to your GitHub forked repo the workflow\nkicked off. To view the results go back to the homepage for your GitHub\nrepository and do the following:\n\n  * From the repository, click on the `Actions` tab near the top middle of the page\n  * In the left navigation bar click on the name of the workflow `Deploy Snowpark Apps`\n  * Click on the name of most recent specific run (which should match the comment you entered)\n  * From the run overview page click on the `deploy` job and then browse through the output from the various steps. In particular you might want to review the output from the `Deploy Snowpark apps` step.\n\n!\n\nThe output of the `Deploy Snowpark apps` step should be familiar to you by\nnow, and should be what you saw in the terminal in VS Code when you ran\nSnowCLI in previous steps. The one thing that may be different is the order of\nthe output, but you should be able to see what's happening.\n\nOnce you're finished with the Quickstart and want to clean things up, you can\nsimply run the `steps/11_teardown.sql` script. Since this is a SQL script we\nwill be using our native VS Code extension to execute it. So simply open the\n`steps/11_teardown.sql` script in VS Code and run the whole thing using the\n\"Execute All Statements\" button in the upper right corner of the editor\nwindow.\n\nWow, we have covered a lot of ground during this Quickstart! By now you have\nbuilt a robust data engineering pipeline using Snowpark Python stored\nprocedures. This pipeline processes data incrementally, is orchestrated with\nSnowflake tasks, and is deployed via a CI/CD pipeline. You also learned how to\nuse Snowflake's new developer CLI tool and Visual Studio Code extension!\nHere's a quick visual recap:\n\n!\n\nBut we've really only just scratched the surface of what's possible with\nSnowpark. Hopefully you now have the building blocks, and examples, you need\nto get started building your own data engineering pipeline with Snowpark\nPython. So, what will you build now?", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97b88142-b7e8-44e6-b582-ea887b54a6fb": {"__data__": {"id_": "97b88142-b7e8-44e6-b582-ea887b54a6fb", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "99e2e083-ff3e-4077-aa66-d68737386858", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a64e6d5c86a4c6897f846564c07b5a4a3397be665af61d8744f830671ccc6815", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e17e57af-3662-4cd0-87b2-6ed03bce68f6", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "25e9ea5152d980c5edf1af971923ef95517961222f54dee8bf1b74f542a65459", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "5c1dfcdc-f2d8-4a56-b53b-f4fbeb6a6d60", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3d7e9089e37d341a7f282cfc76902f003c84efc3d3b15c43b8438f04db89f700", "class_name": "RelatedNodeInfo"}}, "hash": "6d57962c0c36e019e9a01484bb7e10369ee036a0636b65fc37421ebc639fd92d", "text": "What we've covered\n\nWe've covered a ton in this Quickstart, and here are the highlights:\n\n  * Snowflake's Table Format\n  * Data ingestion with COPY\n  * Schema inference\n  * Data sharing/marketplace (instead of ETL)\n  * Streams for incremental processing (CDC)\n  * Streams on views\n  * Python UDFs (with third-party packages)\n  * Python Stored Procedures\n  * Snowpark DataFrame API\n  * Snowpark Python programmability\n  * Warehouse elasticity (dynamic scaling)\n  * Visual Studio Code Snowflake native extension (PuPr, Git integration)\n  * SnowCLI (PuPr)\n  * Tasks (with Stream triggers)\n  * Task Observability\n  * GitHub Actions (CI/CD) integration", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "5c1dfcdc-f2d8-4a56-b53b-f4fbeb6a6d60": {"__data__": {"id_": "5c1dfcdc-f2d8-4a56-b53b-f4fbeb6a6d60", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cad399f2-85f7-424a-9d39-ff5f8dae78ec", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "cb3d6bf17bebbdb9337bd99aa3a6a0ac50b4c2c6bf11112fd38b34c626171a21", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "97b88142-b7e8-44e6-b582-ea887b54a6fb", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "6d57962c0c36e019e9a01484bb7e10369ee036a0636b65fc37421ebc639fd92d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8028d491-3d1e-4aa2-b06d-c6cb1bf3ec31", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0f416f95267b126487a89918e3ea9e202f6169f5c34c776b530c5292422850dc", "class_name": "RelatedNodeInfo"}}, "hash": "3d7e9089e37d341a7f282cfc76902f003c84efc3d3b15c43b8438f04db89f700", "text": "Related Resources\n\nAnd finally, here's a quick recap of related resources:\n\n  * Full Demo on Snowflake Demo Hub\n  * Source Code on GitHub\n  * Snowpark Developer Guide for Python\n    * Writing Python UDFs\n    * Writing Stored Procedures in Snowpark (Python)\n    * Working with DataFrames in Snowpark Python\n  * Related Tools \n    * Snowflake Visual Studio Code Extension\n    * SnowCLI Tool", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8028d491-3d1e-4aa2-b06d-c6cb1bf3ec31": {"__data__": {"id_": "8028d491-3d1e-4aa2-b06d-c6cb1bf3ec31", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "67bdb4d8-d636-49cd-a8bf-4ffabb768f2b", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7446498a9994d5f2ee172b0cfd1e55752b1c091697b0a85dd1dac49eb74af4b0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "5c1dfcdc-f2d8-4a56-b53b-f4fbeb6a6d60", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3d7e9089e37d341a7f282cfc76902f003c84efc3d3b15c43b8438f04db89f700", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e9a7e783-5682-4394-bc34-647b4c0465f0", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "4d34a97274e010732bdbac2396a1a02bd1d862b0364f842f105f7dd02619219c", "class_name": "RelatedNodeInfo"}}, "hash": "0f416f95267b126487a89918e3ea9e202f6169f5c34c776b530c5292422850dc", "text": "Prerequisites\n\nThis guide assumes you have a basic working knowledge of Python, SQL and dbt", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e9a7e783-5682-4394-bc34-647b4c0465f0": {"__data__": {"id_": "e9a7e783-5682-4394-bc34-647b4c0465f0", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a9c3575a-f0fb-4a1b-931d-6eaa4eabe4a8", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "2b0282bb03116b7679455942e679e73c0ba4b2838ff93d882a81e761c52c8882", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8028d491-3d1e-4aa2-b06d-c6cb1bf3ec31", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0f416f95267b126487a89918e3ea9e202f6169f5c34c776b530c5292422850dc", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f39a84fe-2119-4eca-83b4-60b792eb714f", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3a92b4248658d1e554ff9f613ea9738f6e4a8a0ebe36a582ba7dee86e462bb70", "class_name": "RelatedNodeInfo"}}, "hash": "4d34a97274e010732bdbac2396a1a02bd1d862b0364f842f105f7dd02619219c", "text": "What You'll Learn\n\n  * how to use an opensource tool like Airflow to create a data scheduler\n  * how do we write a DAG and upload it onto Airflow\n  * how to build scalable pipelines using dbt, Airflow and Snowflake\n  * How to use Snowpark to interact with your Snowflake data using Python", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f39a84fe-2119-4eca-83b4-60b792eb714f": {"__data__": {"id_": "f39a84fe-2119-4eca-83b4-60b792eb714f", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "19b42217-41ff-4ffd-9605-ae352b3d28df", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "d5a15ee5d630ba9c2257a9aeb77baf11a687248d421ab43e8371345b7b42df29", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e9a7e783-5682-4394-bc34-647b4c0465f0", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "4d34a97274e010732bdbac2396a1a02bd1d862b0364f842f105f7dd02619219c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6f0c669f-7a10-4b66-8186-64403ae8b472", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7e823c9a73e2c79a01e057d8ea61385aff5b8f7b94cd3ba21c61ec5f07e52439", "class_name": "RelatedNodeInfo"}}, "hash": "3a92b4248658d1e554ff9f613ea9738f6e4a8a0ebe36a582ba7dee86e462bb70", "text": "What You'll Need\n\nYou will need the following things before beginning:\n\n  1. Snowflake\n  2. **A Snowflake Account.**\n  3. **A Snowflake User created with appropriate permissions.** This user will need permission to create objects in the DEMO_DB database.\n  4. **Snowpark Enabled**\n  5. GitHub\n  6. **A GitHub Account.** If you don't already have a GitHub account you can create one for free. Visit the Join GitHub page to get started.\n  7. Integrated Development Environment (IDE)\n  8. **Your favorite IDE with Git integration.** If you don't already have a favorite IDE that integrates with Git I would recommend the great, free, open-source Visual Studio Code.\n  9. Docker Desktop\n  10. **Docker Desktop on your laptop.** We will be running Airflow as a container. Please install Docker Desktop on your desired OS by following the Docker setup instructions.\n  11. Astro CLI\n  12. **The Astro CLI Installed.** We will be using the Astro CLI to create our Airflow environments. Please install the Astro CLI on your desired OS by following the Astro CLI setup instructions", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6f0c669f-7a10-4b66-8186-64403ae8b472": {"__data__": {"id_": "6f0c669f-7a10-4b66-8186-64403ae8b472", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a1645c90-d59d-43b7-8b69-dba53db5c265", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "bb006c3a0bd47bfeff4d4fb1f8864d8dd4f54a685d419924ceeae713ebc4c1eb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f39a84fe-2119-4eca-83b4-60b792eb714f", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3a92b4248658d1e554ff9f613ea9738f6e4a8a0ebe36a582ba7dee86e462bb70", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3c00b2c4-d83b-487c-b073-faa4236b73ae", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b1e7de37101e4f432e77fca45fb4d6e5fc001b90ab0c7dc9329a218e81c349fd", "class_name": "RelatedNodeInfo"}}, "hash": "7e823c9a73e2c79a01e057d8ea61385aff5b8f7b94cd3ba21c61ec5f07e52439", "text": "What You'll Build\n\n  * A simple working Airflow pipeline with dbt and Snowflake\n  * A slightly more complex Airflow pipeline that incorporates Snowpark to analyze your data with Python\n\nFirst, let us create a folder by running the command below\n\n    \n    \n    mkdir dbt_airflow && cd dbt_airflow\n    \n\nNext, we will use the Astro CLI to create a new Astro project by running the\nfollowing command. An Astro project contains the set of files necessary to run\nAirflow, including dedicated folders for your DAG files, plugins, and\ndependencies.\n\n    \n    \n    astro dev init\n    \n\nNow, navigate into the DAG's folder that the Astro CLI created, and create a\nnew folder called dbt by running the following command.\n\n    \n    \n    mkdir dbt && cd dbt\n    \n\nNext, run the following command to install dbt and create all the necessary\nfolders for your project. It will prompt you for a name for your project,\nenter \u2018cosmosproject'.\n\n    \n    \n    dbt init\n    \n\nYour tree repository should look like this\n\n!Folderstructure\n\nNow that we have gotten our repo up, it is time to configure and set up our\ndbt project.\n\nBefore we begin, let's take some time to understand what we are going to do\nfor our dbt project.\n\nAs can be seen in the diagram below, we have 3 csv files `bookings_1`,\n`bookings_2` and `customers` . We are going to seed these csv files into\nSnowflake as tables. This will be detailed later.\n\nFollowing this, we are going to use dbt to merge `bookings_1` and `bookings_2`\ntables into `combined_bookings`. Then, we are going to join the\n`combined_bookings` and `customer` table on customer_id to form the\n`prepped_data` table.\n\nFinally, we are going to perform our analysis and transformation on the\n`prepped_data` by creating 2 views.\n\n  1. `hotel_count_by_day.sql`: This will create a hotel_count_by_day view in the ANALYSIS schema in which we will count the number of hotel bookings by day.\n  2. `thirty_day_avg_cost.sql`: This will create a thirty_day_avg_cost view in the ANALYSIS schema in which we will do a average cost of booking for the last 30 days.\n\n!dbt_structure\n\nFirst, let's go to the Snowflake console and run the script below after\nreplacing the field with your password of choice. What this does is create a\ndbt_user and a dbt_dev_role and after which we set up a database for dbt_user.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3c00b2c4-d83b-487c-b073-faa4236b73ae": {"__data__": {"id_": "3c00b2c4-d83b-487c-b073-faa4236b73ae", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a1645c90-d59d-43b7-8b69-dba53db5c265", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "bb006c3a0bd47bfeff4d4fb1f8864d8dd4f54a685d419924ceeae713ebc4c1eb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6f0c669f-7a10-4b66-8186-64403ae8b472", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7e823c9a73e2c79a01e057d8ea61385aff5b8f7b94cd3ba21c61ec5f07e52439", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "97e3483a-7d8f-41bf-9a3b-4dd6c8c8f3a3", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "391c7b8f51d49ddccaad0b9eac85c73684d664802e7a37154fa1e369db29f975", "class_name": "RelatedNodeInfo"}}, "hash": "b1e7de37101e4f432e77fca45fb4d6e5fc001b90ab0c7dc9329a218e81c349fd", "text": "Finally, we are going to perform our analysis and transformation on the\n`prepped_data` by creating 2 views.\n\n  1. `hotel_count_by_day.sql`: This will create a hotel_count_by_day view in the ANALYSIS schema in which we will count the number of hotel bookings by day.\n  2. `thirty_day_avg_cost.sql`: This will create a thirty_day_avg_cost view in the ANALYSIS schema in which we will do a average cost of booking for the last 30 days.\n\n!dbt_structure\n\nFirst, let's go to the Snowflake console and run the script below after\nreplacing the field with your password of choice. What this does is create a\ndbt_user and a dbt_dev_role and after which we set up a database for dbt_user.\n\n    \n    \n    USE ROLE SECURITYADMIN;\n    \n    CREATE OR REPLACE ROLE dbt_DEV_ROLE COMMENT='dbt_DEV_ROLE';\n    GRANT ROLE dbt_DEV_ROLE TO ROLE SYSADMIN;\n    \n    CREATE OR REPLACE USER dbt_USER PASSWORD=''\n    \tDEFAULT_ROLE=dbt_DEV_ROLE\n    \tDEFAULT_WAREHOUSE=dbt_WH\n    \tCOMMENT='dbt User';\n        \n    GRANT ROLE dbt_DEV_ROLE TO USER dbt_USER;\n    \n    -- Grant privileges to role\n    USE ROLE ACCOUNTADMIN;\n    \n    GRANT CREATE DATABASE ON ACCOUNT TO ROLE dbt_DEV_ROLE;\n    \n    /*---------------------------------------------------------------------------\n    Next we will create a virtual warehouse that will be used\n    ---------------------------------------------------------------------------*/\n    USE ROLE SYSADMIN;\n    \n    --Create Warehouse for dbt work\n    CREATE OR REPLACE WAREHOUSE dbt_DEV_WH\n      WITH WAREHOUSE_SIZE = 'XSMALL'\n      AUTO_SUSPEND = 120\n      AUTO_RESUME = true\n      INITIALLY_SUSPENDED = TRUE;\n    \n    GRANT ALL ON WAREHOUSE dbt_DEV_WH TO ROLE dbt_DEV_ROLE;\n    \n    \n\nLet's login with the `dbt_user` and create the database `DEMO_dbt` by running\nthe command\n\n    \n    \n    CREATE OR REPLACE DATABASE DEMO_dbt\n    \n    \n\nThen, in the new `Demo_dbt` database, copy and paste the following sql\nstatements to create our `bookings_1`, `bookings_2` and `customers` tables\nwithin Snowflake\n\n    \n    \n    CREATE TABLE bookings_1 (\n        id INTEGER,\n        booking_reference INTEGER,\n        hotel STRING,\n        booking_date DATE,\n        cost INTEGER\n    );\n    CREATE TABLE bookings_2 (\n        id INTEGER,\n        booking_reference INTEGER,\n        hotel STRING,\n        booking_date DATE,\n        cost INTEGER\n    );\n    CREATE TABLE customers (\n        id INTEGER,\n        first_name STRING,\n        last_name STRING,\n        birthdate DATE,\n        membership_no INTEGER\n    );\n    \n    \n\nAfter you're done, you should have a folder structure that looks like the\nbelow:\n\n!airflow\n\nNow, let's go back to our project `cosmosproject` > `dbt`that we set up\npreviously.\n\nWe will set up a couple configurations for the respective files below. Please\nnote for the `dbt_project.yml` you just need to replace the models section\n\npackages.yml (Create in `cosmosproject` folder if not already present)\n\n    \n    \n    packages:\n      - package: dbt-labs/dbt_utils\n        version: [\">=1.0.0\", \"<2.0.0\"]\n    \n\ndbt_project.yml\n\n    \n    \n    models:\n      my_new_project:\n          # Applies to all files under models/example/\n          transform:\n              schema: transform\n              materialized: view\n          analysis:\n              schema: analysis\n              materialized: view\n    \n\nNext, we will install the `dbt-labs/dbt_utils` that we had placed inside\n`packages.yml`. This can be done by running the command `dbt deps` from the\n`cosmosproject` folder.\n\nWe will now create a file called `custom_demo_macros.sql` under the `macros`\nfolder and input the below sql\n\n    \n    \n    {% macro generate_schema_name(custom_schema_name, node) -%}\n        {%- set default_schema = target.schema -%}\n        {%- if custom_schema_name is none -%}\n            {{ default_schema }}\n        {%- else -%}\n            {{ custom_schema_name | trim }}\n        {%- endif -%}\n    {%- endmacro %}\n    \n    \n    {% macro set_query_tag() -%}\n      {% set new_query_tag = model.name %} {# always use model name #}\n      {% if new_query_tag %}\n        {% set original_query_tag = get_current_query_tag() %}\n        {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\")", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "97e3483a-7d8f-41bf-9a3b-4dd6c8c8f3a3": {"__data__": {"id_": "97e3483a-7d8f-41bf-9a3b-4dd6c8c8f3a3", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "a1645c90-d59d-43b7-8b69-dba53db5c265", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "bb006c3a0bd47bfeff4d4fb1f8864d8dd4f54a685d419924ceeae713ebc4c1eb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3c00b2c4-d83b-487c-b073-faa4236b73ae", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b1e7de37101e4f432e77fca45fb4d6e5fc001b90ab0c7dc9329a218e81c349fd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "70853f1a-1634-4b4e-afa2-0dcd5f8f2945", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "d29299ac8cda918bcf07bcb509eee743a2e628e28482eaddcdbf214ce7cdb085", "class_name": "RelatedNodeInfo"}}, "hash": "391c7b8f51d49ddccaad0b9eac85c73684d664802e7a37154fa1e369db29f975", "text": "We will now create a file called `custom_demo_macros.sql` under the `macros`\nfolder and input the below sql\n\n    \n    \n    {% macro generate_schema_name(custom_schema_name, node) -%}\n        {%- set default_schema = target.schema -%}\n        {%- if custom_schema_name is none -%}\n            {{ default_schema }}\n        {%- else -%}\n            {{ custom_schema_name | trim }}\n        {%- endif -%}\n    {%- endmacro %}\n    \n    \n    {% macro set_query_tag() -%}\n      {% set new_query_tag = model.name %} {# always use model name #}\n      {% if new_query_tag %}\n        {% set original_query_tag = get_current_query_tag() %}\n        {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n        {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n        {{ return(original_query_tag)}}\n      {% endif %}\n      {{ return(none)}}\n    {% endmacro %}\n    \n\nNow we are done setting up our dbt environment. Your file structure should\nlook like the below screenshot:\n\n!airflow\n\nIn this section, we will be prepping our sample csv data files alongside the\nassociated sql models.\n\nTo start, let us first create 3 excel files under the folder `data` inside the\ndbt folder.\n\nbookings_1.csv\n\n    \n    \n    id,booking_reference,hotel,booking_date,cost\n    1,232323231,Pan Pacific,2021-03-19,100\n    1,232323232,Fullerton,2021-03-20,200\n    1,232323233,Fullerton,2021-04-20,300\n    1,232323234,Jackson Square,2021-03-21,400\n    1,232323235,Mayflower,2021-06-20,500\n    1,232323236,Suncity,2021-03-19,600\n    1,232323237,Fullerton,2021-08-20,700\n    \n\nbookings_2.csv\n\n    \n    \n    id,booking_reference,hotel,booking_date,cost\n    2,332323231,Fullerton,2021-03-19,100\n    2,332323232,Jackson Square,2021-03-20,300\n    2,332323233,Suncity,2021-03-20,300\n    2,332323234,Jackson Square,2021-03-21,300\n    2,332323235,Fullerton,2021-06-20,300\n    2,332323236,Suncity,2021-03-19,300\n    2,332323237,Berkly,2021-05-20,200\n    \n\ncustomers.csv\n\n    \n    \n    id,first_name,last_name,birthdate,membership_no\n    1,jim,jone,1989-03-19,12334\n    2,adrian,lee,1990-03-10,12323\n    \n\nOur folder structure should be like as below\n\n!airflow\n\nCreate 2 folders `analysis` and `transform` in the models folder. Please\nfollow the sections below for analysis and transform respectively.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "70853f1a-1634-4b4e-afa2-0dcd5f8f2945": {"__data__": {"id_": "70853f1a-1634-4b4e-afa2-0dcd5f8f2945", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2e70bdf5-483a-4405-ad00-91f1e0be7d82", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "41acd2114b32ce1a1aebd8c4b61dad457700d412e00e11db860a8138aeba9c24", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "97e3483a-7d8f-41bf-9a3b-4dd6c8c8f3a3", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "391c7b8f51d49ddccaad0b9eac85c73684d664802e7a37154fa1e369db29f975", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b7d2f1b9-d088-46e0-b36b-8a123a879e7f", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a42f6343fc4f2cff0fc4ed7e8b003576568a280b51a487b493a34c3a62578bcb", "class_name": "RelatedNodeInfo"}}, "hash": "d29299ac8cda918bcf07bcb509eee743a2e628e28482eaddcdbf214ce7cdb085", "text": "dbt models for transform folder\n\nInside the `transform` folder, we will have 3 SQL files\n\n  1. `combined_bookings.sql`: This will combine the 2 bookings CSV files we had above and create the `COMBINED_BOOKINGS` view in the `TRANSFORM` schema.\n\ncombined_bookings.sql\n\n    \n    \n    {{ dbt_utils.union_relations(\n        relations=[ref('bookings_1'), ref('bookings_2')]\n    ) }}\n    \n\n  2. `customer.sql`: This will create a `CUSTOMER` view in the `TRANSFORM` schema.\n\ncustomer.sql\n\n    \n    \n    SELECT ID \n        , FIRST_NAME\n        , LAST_NAME\n        , birthdate\n    FROM {{ ref('customers') }}\n    \n\n  3. `prepped_data.sql`: This will create a `PREPPED_DATA` view in the `TRANSFORM` schema in which it will perform an inner join on the `CUSTOMER` and `COMBINED_BOOKINGS` views from the steps above.\n\nprepped_data.sql\n\n    \n    \n    SELECT A.ID \n        , FIRST_NAME\n        , LAST_NAME\n        , birthdate\n        , BOOKING_REFERENCE\n        , HOTEL\n        , BOOKING_DATE\n        , COST\n    FROM {{ref('customer')}}  A\n    JOIN {{ref('combined_bookings')}} B\n    on A.ID = B.ID", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b7d2f1b9-d088-46e0-b36b-8a123a879e7f": {"__data__": {"id_": "b7d2f1b9-d088-46e0-b36b-8a123a879e7f", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fbea1b28-cb58-4a28-998c-280f74969772", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1908c36f19862d874f896545ec6e9ec7f7c757c9d53e00a13c340c51c2ef5672", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "70853f1a-1634-4b4e-afa2-0dcd5f8f2945", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "d29299ac8cda918bcf07bcb509eee743a2e628e28482eaddcdbf214ce7cdb085", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "82dec902-c62d-4aca-a27b-660785531335", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "83b1271737b48262077687310975c443f31dbcc4926423c994dfdb70bb8a10dd", "class_name": "RelatedNodeInfo"}}, "hash": "a42f6343fc4f2cff0fc4ed7e8b003576568a280b51a487b493a34c3a62578bcb", "text": "dbt models for analysis folder\n\nNow let's move on to the `analysis` folder. Change to the `analysis` folder\nand create these 2 SQL files\n\n  1. `hotel_count_by_day.sql`: This will create a hotel_count_by_day view in the `ANALYSIS` schema in which we will count the number of hotel bookings by day.\n\n    \n    \n    SELECT\n      BOOKING_DATE,\n      HOTEL,\n      COUNT(ID) as count_bookings\n    FROM {{ ref('prepped_data') }}\n    GROUP BY\n      BOOKING_DATE,\n      HOTEL\n    \n\n  2. `thirty_day_avg_cost.sql`: This will create a thirty_day_avg_cost view in the `ANALYSIS` schema in which we will do a average cost of booking for the last 30 days.\n\n    \n    \n    SELECT\n      BOOKING_DATE,\n      HOTEL,\n      COST,\n      AVG(COST) OVER (\n        ORDER BY BOOKING_DATE ROWS BETWEEN 29 PRECEDING AND CURRENT ROW\n      ) as \"30_DAY_AVG_COST\",\n      COST -   AVG(COST) OVER (\n        ORDER BY BOOKING_DATE ROWS BETWEEN 29 PRECEDING AND CURRENT ROW\n      ) as \"DIFF_BTW_ACTUAL_AVG\"\n    FROM {{ ref('prepped_data') }}\n    \n\nYour file structure should look like the below screenshot. We have now\nfinished our dbt models and can proceed to working on using Airflow to manage\nthem.\n\n!airflow\n\nNow going back to your Airflow directory, open up the requirements.txt file\nthat the Astro CLI created. Copy and paste the following text block to install\nthe Cosmos and\nSnowflake libraries for Airflow. Cosmos will be used to turn each dbt model\ninto a task/task group complete with retries, alerting, etc.\n\n    \n    \n    astronomer-cosmos\n    apache-airflow-providers-snowflake\n    \n\nNext, open up the Dockerfile in your Airflow folder and copy and paste the\nfollowing code block to overwrite your existing Dockerfile. These changes will\ncreate a virtual environment for dbt along with the adapter to connect to\nSnowflake. It's recommended to use a virtual environment because dbt and\nAirflow can have conflicting dependencies.\n\n    \n    \n    # syntax=quay.io/astronomer/airflow-extensions:latest\n    \n    FROM quay.io/astronomer/astro-runtime:9.1.0-python-3.9-base\n    \n    RUN python -m venv dbt_venv && source dbt_venv/bin/activate && pip install --no-cache-dir dbt-snowflake && deactivate\n    \n\nNow that our Airflow environment is set up, lets create our DAG! Instead of\nusing the conventional DAG definition methods, we'll be using Cosmos' dbtDAG\nclass to create a DAG based on our dbt models. This allows us to turn our dbt\nprojects into Apache Airflow DAGs and Task Groups with a few lines of code. To\ndo so, create a new file in the `dags` folder called `my_cosmos_dag.py` and\ncopy and paste the following code block into the file.\n\n    \n    \n    from datetime import datetime\n    import os\n    from cosmos import DbtDag, ProjectConfig, ProfileConfig, ExecutionConfig\n    from cosmos.profiles import SnowflakeUserPasswordProfileMapping\n    from pathlib import Path\n    \n    dbt_project_path = Path(\"/usr/local/airflow/dags/dbt/cosmosproject\")\n    \n    profile_config = ProfileConfig(profile_name=\"default\",\n                                   target_name=\"dev\",\n                                   profile_mapping=SnowflakeUserPasswordProfileMapping(conn_id=\"snowflake_default\", \n                                                        profile_args={\n                                                            \"database\": \"demo_dbt\",\n                                                            \"schema\": \"public\"\n                                                            },\n                                                        ))\n    \n    \n    dbt_snowflake_dag = DbtDag(project_config=ProjectConfig(dbt_project_path,),\n                        operator_args={\"install_deps\": True},\n                        profile_config=profile_config,\n                        execution_config=ExecutionConfig(dbt_executable_path=f\"{os.environ['AIRFLOW_HOME']}/dbt_venv/bin/dbt\",),\n                        schedule_interval=\"@daily\",\n                        start_date=datetime(2023, 9, 10),\n                        catchup=False,\n                        dag_id=\"dbt_snowflake_dag\",)\n    \n    \n\nFirst, we import the various Cosmos libraries\n\n\u2022 DbtDag: This is a class that allows you to create an Apache Airflow Directed\nAcyclic Graph (DAG) for a dbt (Data Build Tool) project. The DAG will execute\nthe dbt project according to the specified configuration.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "82dec902-c62d-4aca-a27b-660785531335": {"__data__": {"id_": "82dec902-c62d-4aca-a27b-660785531335", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "fbea1b28-cb58-4a28-998c-280f74969772", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1908c36f19862d874f896545ec6e9ec7f7c757c9d53e00a13c340c51c2ef5672", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b7d2f1b9-d088-46e0-b36b-8a123a879e7f", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a42f6343fc4f2cff0fc4ed7e8b003576568a280b51a487b493a34c3a62578bcb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "26d18597-fd6f-4ddf-a60a-fdd9a97b4cd8", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b746a1ef86d1a02d3deef28056509b5c1f0ff684c5162e14d431b8c8f2a7b42a", "class_name": "RelatedNodeInfo"}}, "hash": "83b1271737b48262077687310975c443f31dbcc4926423c994dfdb70bb8a10dd", "text": "The DAG will execute\nthe dbt project according to the specified configuration.\n\n\u2022 ProjectConfig: This class is used to specify the configuration for the dbt\nproject that the DbtDag will execute by pointing it to the path tfor your dbt\nproject.\n\n\u2022 ProfileConfig: This class is used to specify the configuration for the\ndatabase profile that dbt will use when executing the project. This includes\nthe profile name, target name, and any necessary mapping to Airflow\nconnections.\n\n\u2022 ExecutionConfig: This class is used to specify any additional configuration\nfor executing the dbt project. We'll be pointing it to the virtual environment\nwe created at `{os.environ['AIRFLOW_HOME']}/dbt_venv/bin/dbt` in our\n`Dockerfile` to execute in.\n\n\u2022 PostgresUserPasswordProfileMapping and SnowflakeUserPasswordProfileMapping:\nThese classes are used to map Airflow connections to dbt profiles for\nPostgreSQL and Snowflake databases, respectively. This allows you to manage\nyour database credentials in Airflow and use them in dbt.\n\nAfter the imports, a ProfileConfig object is created, which is used to define\nthe configuration for the Snowflake connection. The\nSnowflakeUserPasswordProfileMapping class is used to map the Snowflake\nconnection in Airflow to a dbt profile. The DbtDag object is then created.\nThis object represents an Airflow DAG that will execute a dbt project. It\ntakes several parameters:\n\n`project_config` specifies the path to the dbt project we created at\n`/usr/local/airflow/dags/dbt/cosmosprojectoperator_args` is used to pass\narguments to the dbt operator. Here, it's specifying that dependencies should\nbe installed. `profile_config` is the profile configuration defined earlier,\nwhich will be used to execute the dbt models in Snowflake. `execution_config`\nspecifies the path to our virtual environment to executue our dbt code in.\n`schedule_interval`, `start_date`, `catchup`, and `dag_id` are standard\nAirflow DAG parameters. You can use any of the standard Airflow DAG parameters\nin a dbtDAG as well.\n\nWithin your Airflow `dbt_airflow` directory, enter the below command to start\nyour Airflow environment\n\n    \n    \n    astro dev start\n    \n\nOnce the Airflow environment is finished creating and the login credentials\nappear in the terminal window, open up your browser of choice and go to\n to log into our. The default username is `admin` and\npassword is `admin`\n\nNow we're going to create a connection to our Snowflake environment for our\nDAG to use. Open up the conneections page from the Admin drop down menu and\nclick + to create a new connection. Choose Snowflake as the connection type,\nand `snowflake_default` as the name for the connection. Then, enter your\ncredentials following the example shown below. The only variables you'll need\nto change to your own are the password, account name, and region. The rest we\nset already via the dbt user creation script.\n\n!airflow\n\nNow it's time to activate our DAG! First, click on the `cosmos_dag` to open up\nits grid and graph view so we can see the DAG that Cosmos created from our dbt\nproject. It should look exactly like the example below if you open up each\ntask group. Notice that each of your dbt models is rendered as its own task\ngroup, with each step of the dbt model rendered as a task. It dynamically\ngenerates the dependencies between each model based on the data references\nbetween them, without us needing to explicitly create them.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "26d18597-fd6f-4ddf-a60a-fdd9a97b4cd8": {"__data__": {"id_": "26d18597-fd6f-4ddf-a60a-fdd9a97b4cd8", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d4ed1f0f-4f53-4b79-9551-3406119737b0", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "8fcd935203725999739da01f0e1f02a74cc830c73a4dd17f044b5e5485a0c15e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "82dec902-c62d-4aca-a27b-660785531335", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "83b1271737b48262077687310975c443f31dbcc4926423c994dfdb70bb8a10dd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "856ca02a-0d46-4064-b8b4-0ebe676ad5bc", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1207e057174033deac3a32927a7771ec67d9fe8abccec5deba8ddcf4deff2af9", "class_name": "RelatedNodeInfo"}}, "hash": "b746a1ef86d1a02d3deef28056509b5c1f0ff684c5162e14d431b8c8f2a7b42a", "text": "Running our cosmos_dag!\n\nWe will now run our DAG `cosmos_dag` to see our dbt models in action! If you\nclick the big blue play button on the top left of the screen, you'll see your\ntasks start to run your dbt transformations within your Snowflake database. If\neverything goes smoothly, your Snowflake environment should look like the\nfollowing screenshot:\n\n!airflow\n\nOur `Transform` and `Analysis` views have been created successfully! Open them\nto see the results of our analysis, and check out the other tables to see how\ndata was transformed using dbt.\n\nNow that we've gotten our dbt DAG set up, lets extend it by adding Snowpark\nfor some data analysis with Python. To do this, we'll need to change some\nexisting files and add new requirements to our local airflow environment.\nWhile we do this, lets stop our Airflow environment by running the following\ncommand so we can restart it later with our changes incorporated.\n\n    \n    \n    astro dev stop\n    \n\nFirst, go to your `packages.txt` file in your root directory and add `build-\nessential` to it, then save. The build-essential package in Linux systems is a\nreference for all the packages needed to compile a Debian package. We'll be\nusing it to create a Python 3.8 Virtual Environment to run our Snowpark code\nin, since Snowpark uses Python 3.8, and Airflow only supports Python versions\n3.9 and above.\n\nNext, we'll need to import the Snowpark provider to create our Snowpark task.\nWhile in development the provider package is not yet in pypi. For this demo,\ndownload the `astro_provider_snowflake-0.0.0-py3-none-any.whl` file from the\nthis [link](https://github.com/astronomer/airflow-snowpark-\ndemo/tree/main/include). Then, copy the downloaded file into your include\ndirectory in your `DBT_Airflow` folder. In the future, this will be a part of\nthe base Snowflake provider, but in the meantime you can use this .whl file in\nany other projects that require it.\n\nAfter that, we'll need to add the .whl file to our `requirements.txt`. Copy\nand paste the following line into your `requirements.txt` file to do so.\n\n    \n    \n    /tmp/astro_provider_snowflake-0.0.0-py3-none-any.whl\n    \n\nFinally, we'll need to create a `requirements-snowpark.txt` to install some\nnecessary packages into the Python VirtualEnv we'll be creating. To do so,\ncreate a file called `requirements-snowpark.txt` in your root Airflow\ndirectory and copy and paste the following code block into it:\n\n    \n    \n    psycopg2-binary\n    snowflake_snowpark_python[pandas]==1.5.1\n    virtualenv\n    /tmp/astro_provider_snowflake-0.0.0-py3-none-any.whl\n    \n\nThese packages will allow us to interact with Snowpark through the virtual\nenvironment we're creating.\n\nNow that we've got our Snowpark provider present, we'll need to edit our\nDockerfile to install it, and spin up the Snowpark Python VirtualEnv. Copy and\npaste the following code block into your Dockerfile to add the necessary\ncommands.\n\n    \n    \n    # syntax=quay.io/astronomer/airflow-extensions:latest\n    \n    FROM quay.io/astronomer/astro-runtime:9.1.0-python-3.9-base\n    \n    COPY include/astro_provider_snowflake-0.0.0-py3-none-any.whl /tmp\n    \n    # Create the virtual environment\n    PYENV 3.8 snowpark requirements-snowpark.txt\n    \n    # Install packages into the virtual environment\n    COPY requirements-snowpark.txt /tmp\n    RUN python3.8 -m pip install -r /tmp/requirements-snowpark.txt\n    \n    \n    RUN python -m venv dbt_venv && source dbt_venv/bin/activate && pip install --no-cache-dir dbt-snowflake && pip install --no-cache-dir dbt-postgres && deactivate\n    \n\nThe first line tells Docker to use the Astronomer provided BuildKit that\nenables us to create virtual environments with the PYENV command. Then we COPY\nin the `.whl` file and use it to create a Python 3.8 VirtualEnv called\nsnowpark.\n\nIn order to use Cosmos and Snowpark together, we'll need to use Cosmos's\n`dbtTaskGroup` with a normal Airflow DAG instead of a `dbtDAG`.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "856ca02a-0d46-4064-b8b4-0ebe676ad5bc": {"__data__": {"id_": "856ca02a-0d46-4064-b8b4-0ebe676ad5bc", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d4ed1f0f-4f53-4b79-9551-3406119737b0", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "8fcd935203725999739da01f0e1f02a74cc830c73a4dd17f044b5e5485a0c15e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "26d18597-fd6f-4ddf-a60a-fdd9a97b4cd8", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "b746a1ef86d1a02d3deef28056509b5c1f0ff684c5162e14d431b8c8f2a7b42a", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "36f661ae-69f7-4df9-abf7-1b1686815cf0", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "bdb7297c16acb82236d16b4c5a405b62dd4608fb7dc75056d2970edcfb2b10f9", "class_name": "RelatedNodeInfo"}}, "hash": "1207e057174033deac3a32927a7771ec67d9fe8abccec5deba8ddcf4deff2af9", "text": "Then we COPY\nin the `.whl` file and use it to create a Python 3.8 VirtualEnv called\nsnowpark.\n\nIn order to use Cosmos and Snowpark together, we'll need to use Cosmos's\n`dbtTaskGroup` with a normal Airflow DAG instead of a `dbtDAG`. The definition\nfor this is almost identical to the `dbtDAG` approach, and allows us to add\nadditional tasks up or downstream of our dbt workflows. Instead of editing our\nexisting DAG, create a new file called `cosmosandsnowflake.py` in your DAG's\nfolder, and copy the following code into it:\n\n    \n    \n    from airflow.operators.dummy_operator import DummyOperator\n    from astro import sql as aql\n    from astro.files import File\n    from astro.sql.table import Table\n    from cosmos import DbtTaskGroup, ProjectConfig, ProfileConfig, ExecutionConfig\n    from cosmos.profiles import SnowflakeUserPasswordProfileMapping\n    from astronomer.providers.snowflake.utils.snowpark_helpers import SnowparkTable\n    from pathlib import Path\n    \n    dbt_project_path = Path(\"/usr/local/airflow/dags/dbt/cosmosproject\")\n    snowflake_objects = {'demo_database': 'DEMO',\n                         'demo_schema': 'DEMO',\n                         'demo_warehouse': 'COMPUTE_WH',\n                         'demo_xcom_stage': 'XCOM_STAGE',\n                         'demo_xcom_table': 'XCOM_TABLE',\n                         'demo_snowpark_wh': 'SNOWPARK_WH'\n    }\n    _SNOWFLAKE_CONN_ID = \"snowflake_default\"\n    \n    profile_config = ProfileConfig(\n        profile_name=\"default\",\n        target_name=\"dev\",\n        profile_mapping=SnowflakeUserPasswordProfileMapping(\n            conn_id=\"snowflake_default\",\n            profile_args={\n              \"database\": \"demo_dbt\",\n                \"schema\": \"public\"\n            },\n        )\n    )\n    \n    @dag(default_args={\n             \"snowflake_conn_id\": _SNOWFLAKE_CONN_ID,\n             \"temp_data_output\": \"table\",\n             \"temp_data_db\": snowflake_objects['demo_database'],\n             \"temp_data_schema\": snowflake_objects['demo_schema'],\n             \"temp_data_overwrite\": True,\n             \"database\": snowflake_objects['demo_database'],\n             \"schema\": snowflake_objects['demo_schema']\n             },\n        schedule_interval=\"@daily\",\n        start_date=datetime(2023, 9, 10),\n        catchup=False,\n        dag_id=\"dbt_snowpark\",\n    )\n    def dbt_snowpark_dag():\n        transform_data = DbtTaskGroup(\n            group_id=\"transform_data\",\n            project_config=ProjectConfig(dbt_project_path),\n            profile_config=profile_config,\n            execution_config=ExecutionConfig(dbt_executable_path=f\"{os.environ['AIRFLOW_HOME']}/dbt_venv/bin/dbt\"),\n            operator_args={\"install_deps\": True},\n        )\n    \n        intermediate = DummyOperator(task_id='intermediate')\n    \n        @task.snowpark_virtualenv(python_version='3.8', requirements=['snowflake-ml-python==1.0.9'])\n        def findbesthotel(snowflake_objects:dict): \n            \n            df = snowpark_session.sql(\"\"\"\n                SELECT *\n                FROM DEMO_DBT.PUBLIC.THIRTY_DAY_AVG_COST\n            \"\"\").to_pandas()\n            highest_cost_hotel = df[df['COST'] == df['COST'].max()]['HOTEL']\n    \n            highest_cost_hotel_str = str(highest_cost_hotel)\n            print(highest_cost_hotel)\n    \n            return highest_cost_hotel_str\n        \n    \n        besthotel = findbesthotel(snowflake_objects)\n        transform_data >> intermediate >> besthotel\n    \n    dbt_snowpark_dag = dbt_snowpark_dag()\n    \n\nThis DAG adds a new Snowpark task called `findbesthotel`, which means it is\nexecuted in a virtual environment with Snowpark and other specified\ndependencies installed. In this case, we installed the `snowflake-ml-\npython==1.0.9` package to install pandas and other popular data science\npackages for data analysis. The `findbesthotel` task connects to a Snowflake\ndatabase and fetches data from the `THIRTY_DAY_AVG_COST` table in the `PUBLIC`\nschema of the `DEMO_DBT` database. It then converts this data into a pandas\nDataFrame and finds the hotel with the highest cost. The name of this hotel is\nconverted to a string, printed, and then returned by the task. All of our dbt\ntransformation set up stays almost identical, aside from changing from using\ndbtDAG to dbtTaskGroup.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "36f661ae-69f7-4df9-abf7-1b1686815cf0": {"__data__": {"id_": "36f661ae-69f7-4df9-abf7-1b1686815cf0", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d4ed1f0f-4f53-4b79-9551-3406119737b0", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "8fcd935203725999739da01f0e1f02a74cc830c73a4dd17f044b5e5485a0c15e", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "856ca02a-0d46-4064-b8b4-0ebe676ad5bc", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1207e057174033deac3a32927a7771ec67d9fe8abccec5deba8ddcf4deff2af9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9cb8d6fe-5e94-4d0a-8757-80f54c55edc4", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "8dbd0c25cd608cfa3755a2d4c5fcd3f4bfc880f576598b3d59106a7256738de1", "class_name": "RelatedNodeInfo"}}, "hash": "bdb7297c16acb82236d16b4c5a405b62dd4608fb7dc75056d2970edcfb2b10f9", "text": "In this case, we installed the `snowflake-ml-\npython==1.0.9` package to install pandas and other popular data science\npackages for data analysis. The `findbesthotel` task connects to a Snowflake\ndatabase and fetches data from the `THIRTY_DAY_AVG_COST` table in the `PUBLIC`\nschema of the `DEMO_DBT` database. It then converts this data into a pandas\nDataFrame and finds the hotel with the highest cost. The name of this hotel is\nconverted to a string, printed, and then returned by the task. All of our dbt\ntransformation set up stays almost identical, aside from changing from using\ndbtDAG to dbtTaskGroup.\n\nNow that we've add Snowpark to our environment and written our DAG, it's time\nto restart our Airflow environment and run it! Restart your Airflow\nenvironment with the following terminal command\n\n    \n    \n    astro dev start\n    \n\nLogin to the Airflow UI the same way as before, and you should see a new dag\ncalled `dbt_snowpark`. Since we already set up our Snowflake connection\nbefore, we can just run this new DAG immediately by clicking its blue play\nbutton. Then, click on the DAG and open up its graph view to watch it run. It\nshould look like the example below:\n\n!snowparkdag\n\nAfter the DAG has finished running, select the `findbesthotel` and open its\nlog file. If all has gone well, you'll see the most expensive hotel to stay at\nprinted out for your convenience!\n\n!airflow", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9cb8d6fe-5e94-4d0a-8757-80f54c55edc4": {"__data__": {"id_": "9cb8d6fe-5e94-4d0a-8757-80f54c55edc4", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "132a1cf6-1b50-41ba-8b05-0abb8ae21fdf", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "21a07ef8fe874b6a3789f93bf32b60a9dc337229e9f426f5c792f8e7d363fa0b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "36f661ae-69f7-4df9-abf7-1b1686815cf0", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "bdb7297c16acb82236d16b4c5a405b62dd4608fb7dc75056d2970edcfb2b10f9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "0e338248-0ca6-409b-9490-954fd3418a82", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "911fbde607f6afe5b448dcfd3f2ecde49f1a830d26e862236b8c5ccdeb856de1", "class_name": "RelatedNodeInfo"}}, "hash": "8dbd0c25cd608cfa3755a2d4c5fcd3f4bfc880f576598b3d59106a7256738de1", "text": "View Streamlit Dashboard\n\nWe can now view our analyzed data on a Streamlit\ndashboard. To do this, go to terminal and enter the following bash command to\nconnect into the Airflow webserver container.\n\n    \n    \n    astro dev bash -w\n    \n\nThen, run the following command to start a streamlit application.\n\n    \n    \n    cd include/streamlit/src\n    python -m streamlit run ./streamlit_app.py\n    \n\nAfter you've done so, you can view your data dashboard by navigating to\nhttp://localhost:8501/ in your browser! If you'd like to enable the ability to\nask questions about your data, you'll need to add an OpenAI API key in the\n.env file and restart your Airflow environment.\n\nCongratulations! You have created your first Apache Airflow DAG with dbt,\nCosmos, Snowflake, and Snowpark! We encourage you to continue with your free\ntrial by loading your own sample or production data and by using some of the\nmore advanced capabilities of Airflow and Snowflake not covered in this lab.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "0e338248-0ca6-409b-9490-954fd3418a82": {"__data__": {"id_": "0e338248-0ca6-409b-9490-954fd3418a82", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f155ac7c-c2e9-4f94-a98c-55aca5ba6981", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "2f3c047eab4f839ddd876e69e4703c70e3e73682aeaba813d8f558ca153de1b9", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9cb8d6fe-5e94-4d0a-8757-80f54c55edc4", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "8dbd0c25cd608cfa3755a2d4c5fcd3f4bfc880f576598b3d59106a7256738de1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b57e5c60-02fb-4f32-9769-6b5a74025a4c", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "116f8fde2bcdbcd3ead2e309cf4e38a7591279b1499b8ae6437374f31515da4d", "class_name": "RelatedNodeInfo"}}, "hash": "911fbde607f6afe5b448dcfd3f2ecde49f1a830d26e862236b8c5ccdeb856de1", "text": "Additional Resources:\n\n  * Join our dbt community Slack which contains more than 18,000 data practitioners today. We have a dedicated slack channel #db-snowflake to Snowflake related content.\n  * Quick tutorial on how to write a simple Airflow DAG\n  * Documentation on how to use Cosmos to render dbt workflows in Airflow Cosmos", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b57e5c60-02fb-4f32-9769-6b5a74025a4c": {"__data__": {"id_": "b57e5c60-02fb-4f32-9769-6b5a74025a4c", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9a77c1a4-7e2f-4219-a16d-9ffdd0dd5542", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1317318cdfce53007bfccf9d05feb34c5024e163c90e12ab55c684b3dbd8acc5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "0e338248-0ca6-409b-9490-954fd3418a82", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "911fbde607f6afe5b448dcfd3f2ecde49f1a830d26e862236b8c5ccdeb856de1", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "8c08473b-1ed8-40b3-ab77-f65fa2007f88", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "61ae0074128d73861bac3a4682b988cf51d07e5524d4cc99d5203f2dad6a52c0", "class_name": "RelatedNodeInfo"}}, "hash": "116f8fde2bcdbcd3ead2e309cf4e38a7591279b1499b8ae6437374f31515da4d", "text": "What we've covered:\n\n  * How to set up Airflow, dbt & Snowflake\n  * How to create a dbt DAG using Cosmos to run dbt models using Airflow", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "8c08473b-1ed8-40b3-ab77-f65fa2007f88": {"__data__": {"id_": "8c08473b-1ed8-40b3-ab77-f65fa2007f88", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "3c98bff8-ca97-4771-ac4a-a44f68c8ee6b", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "85419dbd595c41ae91b80f445a664a8b1ed7fc95634f4186ed27921e34b7cf04", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b57e5c60-02fb-4f32-9769-6b5a74025a4c", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "116f8fde2bcdbcd3ead2e309cf4e38a7591279b1499b8ae6437374f31515da4d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "738ced3c-77b3-465d-a927-243d06d5c544", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "01e2ab4071dcac95528e499f704b2b71556ed7cdd81d65337cd86195327fca35", "class_name": "RelatedNodeInfo"}}, "hash": "61ae0074128d73861bac3a4682b988cf51d07e5524d4cc99d5203f2dad6a52c0", "text": "Background\n\nData engineering is a broad discipline which includes data ingestion, data\ntransformation, and data consumption, along with the accompanying SDLC best\npractices (i.e. DevOps). Data engineers employ different tools and approaches\ndepending on the phase. For this Quickstart we will focus on the data\ntransformation phase in particular.\n\nData transformation involves taking source data which has been ingested into\nyour data platform and cleansing it, combining it, and modeling it for\ndownstream use. Historically the most popular way to transform data has been\nwith the SQL language and data engineers have built data transformation\npipelines using SQL often with the help of ETL/ELT tools. But recently many\nfolks have also begun adopting the DataFrame API in languages like Python for\nthis task. For the most part a data engineer can accomplish the same data\ntransformations with either approach, and deciding between the two is mostly a\nmatter of preference and particular use cases. That being said, there are use\ncases where a particular data transform can't be expressed in SQL and a\ndifferent approach is needed. The most popular approach for these use cases is\nPython along with a DataFrame API.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "738ced3c-77b3-465d-a927-243d06d5c544": {"__data__": {"id_": "738ced3c-77b3-465d-a927-243d06d5c544", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "14d9e1da-4499-4fa2-9397-85b6bedf50f7", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "cf2a66d9edee61992ee2f168ce8b221a96aab37e1f78961db42a621ae8d8e2ca", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "8c08473b-1ed8-40b3-ab77-f65fa2007f88", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "61ae0074128d73861bac3a4682b988cf51d07e5524d4cc99d5203f2dad6a52c0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f07f87f5-1afe-4f83-ba83-95de478ee1c4", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "23d34b232658a5f303a8aeb15388e107d431b4cb16bd1d0b76192928e5d84c1c", "class_name": "RelatedNodeInfo"}}, "hash": "01e2ab4071dcac95528e499f704b2b71556ed7cdd81d65337cd86195327fca35", "text": "dbt\n\nEnter dbt. dbt is one of the most popular data transformation tools today. And\nuntil now dbt has been entirely a SQL-based transformation tool. But with the\nrelease of dbt version 1.3, it's now possible to create both SQL and Python\nbased models in dbt! Here's how dbt explains it:\n\ndbt Python (\"dbt-py\") models will help you solve use cases that can't be\nsolved with SQL. You can perform analyses using tools available in the open\nsource Python ecosystem, including state-of-the-art packages for data science\nand statistics. Before, you would have needed separate infrastructure and\norchestration to run Python transformations in production. By defining your\nPython transformations in dbt, they're just models in your project, with all\nthe same capabilities around testing, documentation, and lineage. ([dbt Python\nmodels](https://docs.getdbt.com/docs/building-a-dbt-project/building-\nmodels/python-models))", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f07f87f5-1afe-4f83-ba83-95de478ee1c4": {"__data__": {"id_": "f07f87f5-1afe-4f83-ba83-95de478ee1c4", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4fb59aff-ded2-42fe-be81-b240fa7c3639", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e1432f38fad37666998dbf2705e59c533f4abdcc754e70bdd3c81a7e46f8e5ba", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "738ced3c-77b3-465d-a927-243d06d5c544", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "01e2ab4071dcac95528e499f704b2b71556ed7cdd81d65337cd86195327fca35", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9a3daed2-bc53-4d66-a91f-6e628187e7fd", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ec606005c6b0325196b039a278c5ea13ef0913823edc1926435704641ec99887", "class_name": "RelatedNodeInfo"}}, "hash": "23d34b232658a5f303a8aeb15388e107d431b4cb16bd1d0b76192928e5d84c1c", "text": "Snowflake\n\nPython based dbt models are made possible by [Snowflake's new native Python\nsupport and Snowpark API for Python](https://www.snowflake.com/blog/snowpark-\npython-innovation-available-all-snowflake-customers/) (Snowpark Python for\nshort). Snowpark Python includes the following exciting capabilities:\n\n  * Python (DataFrame) API\n  * Python Scalar User Defined Functions (UDFs)\n  * Python UDF Batch API (Vectorized UDFs)\n  * Python Table Functions (UDTFs)\n  * Python Stored Procedures\n  * Integration with Anaconda\n\nWith Snowflake's Snowpark Python capabilities, you no longer need to maintain,\nsecure and pay for separate infrastructure/services to run Python code as it\ncan now be run directly within Snowflake's Enterprise grade data platform! For\nmore details check out [the Snowpark Developer Guide for\nPython](ttps://docs.snowflake.com/en/developer-\nguide/snowpark/python/index.html).\n\nThis guide will provide step-by-step instructions for how to get started with\nSnowflake Snowpark Python and dbt's new Python-based models.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9a3daed2-bc53-4d66-a91f-6e628187e7fd": {"__data__": {"id_": "9a3daed2-bc53-4d66-a91f-6e628187e7fd", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e27de034-04bf-4483-abfe-0a3a782b6b02", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "73d7c3e276c0bfff44eb72680c54196f9cc0cf670f5cc5c066160ec3145ff5e6", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f07f87f5-1afe-4f83-ba83-95de478ee1c4", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "23d34b232658a5f303a8aeb15388e107d431b4cb16bd1d0b76192928e5d84c1c", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "fb4d892d-a610-4ca7-a33f-9eccb3b7f453", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1bde6941b587b66b12e48b93cae991ab851370248015c39ac7e7849dc179c632", "class_name": "RelatedNodeInfo"}}, "hash": "ec606005c6b0325196b039a278c5ea13ef0913823edc1926435704641ec99887", "text": "Prerequisites\n\nThis guide assumes that you have a basic working knowledge of dbt, Python, and\nAnaconda.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "fb4d892d-a610-4ca7-a33f-9eccb3b7f453": {"__data__": {"id_": "fb4d892d-a610-4ca7-a33f-9eccb3b7f453", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e9c6edee-b509-4101-8111-1617c70c0ac2", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1fa6e3ee3651aefe0d2de1f560aa165d6eda05441e3cfdd6f5857f08f0708084", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9a3daed2-bc53-4d66-a91f-6e628187e7fd", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ec606005c6b0325196b039a278c5ea13ef0913823edc1926435704641ec99887", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "29d73faf-0607-4c27-84ea-b18b1a5cd632", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a5cd6c10cbdb41f7ce2b354a1ccad46f16097f1eec591198d7687095a0b09f11", "class_name": "RelatedNodeInfo"}}, "hash": "1bde6941b587b66b12e48b93cae991ab851370248015c39ac7e7849dc179c632", "text": "What You'll Learn\n\n  * The basics of Snowpark Python\n  * How to create Python-based models in dbt\n  * How to create and use Python UDFs in your dbt Python model\n  * How the integration between Snowpark Python and dbt's Python models works", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "29d73faf-0607-4c27-84ea-b18b1a5cd632": {"__data__": {"id_": "29d73faf-0607-4c27-84ea-b18b1a5cd632", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "0cbbfaff-e21e-40e1-afc1-d64219a33373", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "8d24b3263cacdbc802d8005e461636aba261298094b2bf8e14829c2fe50290a8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "fb4d892d-a610-4ca7-a33f-9eccb3b7f453", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1bde6941b587b66b12e48b93cae991ab851370248015c39ac7e7849dc179c632", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9ccb34e9-2c64-43ae-9d74-21e7b3a1b20a", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "12088edc484650309ed691318853a4457020e56e301f0350cb4860dd51819ef3", "class_name": "RelatedNodeInfo"}}, "hash": "a5cd6c10cbdb41f7ce2b354a1ccad46f16097f1eec591198d7687095a0b09f11", "text": "What You'll Need\n\nYou will need the following things before beginning:\n\n  1. Snowflake \n    1. **A Snowflake Account.**\n    2. **A Snowflake Database named DEMO_DB.**\n    3. **A Snowflake User created with appropriate permissions.** This user will need permission to create objects in the DEMO_DB database.\n  2. Anaconda \n    1. **Anaconda installed on your computer.** Check out the Anaconda Installation instructions for the details.\n  3. dbt \n    1. **dbt installed on your computer.** Python models were first introduced in dbt version 1.3, so make sure you install version 1.3 or newer of dbt. Please follow these steps (where `` is any name you want for the Anaconda environment): \n      1. `conda create -n  python=3.8`\n      2. `conda activate `\n      3. `pip install dbt-core dbt-snowflake` (or `pip install --upgrade dbt-core dbt-snowflake` if upgrading)\n  4. Integrated Development Environment (IDE) \n    1. **Your favorite IDE installed on your computer.** If you don't already have a favorite IDE I would recommend the great, free, open-source Visual Studio Code.\n\nThe following are optional but will help you debug your Python dbt models:\n\n  1. **Python extension installed in your IDE.** For VS Code, install the Python extension from Microsoft.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9ccb34e9-2c64-43ae-9d74-21e7b3a1b20a": {"__data__": {"id_": "9ccb34e9-2c64-43ae-9d74-21e7b3a1b20a", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ba9aa5bc-0a3b-4f41-a209-acbc0d38ff11", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "17f9157629550bcc9bad5198ec3057e658e718cf883b3e1a5b1413ac33279104", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "29d73faf-0607-4c27-84ea-b18b1a5cd632", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a5cd6c10cbdb41f7ce2b354a1ccad46f16097f1eec591198d7687095a0b09f11", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "a6457415-ec74-4622-a9a7-11f5137b3c29", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ae9d27a5c36dccd266a8d0f7faea82f7f10290ca212729e1f8def2efc892f782", "class_name": "RelatedNodeInfo"}}, "hash": "12088edc484650309ed691318853a4457020e56e301f0350cb4860dd51819ef3", "text": "What You'll Build\n\n  * A simple dbt project with Python-based models!\n\nThe easiest way to get started with dbt, and ensure you have the most up-to-\ndate dbt configurations, is to the run the `dbt init` command. The `dbt init`\nprocess will create two folders in the directory you run it from, a `logs`\nfolder and a folder with the same name as your project. So in a terminal\nchange to the directory where you want the new dbt project folder created and\nexecute `dbt init`. Follow the prompts to create your new project. For most of\nthe prompts enter the value appropriate to your environment, but for\n**database** and **schema** enter the values below:\n\n  * Enter a name for your project (letters, digits, underscore): ``\n  * Which database would you like to use? ... Enter a number: `[1] snowflake`\n  * account (https://.snowflakecomputing.com): ``\n  * user (dev username): ``\n  * Desired authentication type option (enter a number): `[1] password`\n  * password (dev password): ``\n  * role (dev role): ``\n  * warehouse (warehouse name): ``\n  * database (default database that dbt will build objects in): `DEMO_DB`\n  * schema (default schema that dbt will build objects in): `DEMO_SCHEMA`\n  * threads (1 or more) [1]: `1`\n\nSee the [dbt init\ndocumentation](https://docs.getdbt.com/reference/commands/init) for more\ndetails on what just happened, but after `dbt init` finished you will have a\nfunctional dbt project and the following default SQL models in the `models`\nfolder:\n\n    \n    \n    models\n    |-- example\n    |--|-- my_first_dbt_model.sql\n    |--|-- my_second_dbt_model.sql\n    |--|-- schema.yml\n    \n\n**Note** \\- The connection details you just entered have been stored in a dbt\nconnection profile in the default location: `~/.dbt/profiles.yml`. To learn\nmore about managing connection details with dbt profiles please see\n[configuring your profile](https://docs.getdbt.com/dbt-cli/configure-your-\nprofile).\n\nTo verify that everything is configured properly, open a terminal, cd to the\nfolder that `dbt init` created and then execute `dbt run`. dbt should execute\nsuccessfully and you should now have the following objects created in\nSnowflake in your `DEMO_DB.DEMO_SCHEMA` schema:\n\n  * A table named `my_first_dbt_model`\n  * A view named `my_second_dbt_model`\n\n**Note** \\- If the `dbt run` command did not complete successfully, it's most\nlikely something wrong with your connection details. Please review and update\nthose details in your dbt connection profile saved here:\n`~/.dbt/profiles.yml`. Then retry.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "a6457415-ec74-4622-a9a7-11f5137b3c29": {"__data__": {"id_": "a6457415-ec74-4622-a9a7-11f5137b3c29", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f74f7195-e059-4a8a-97a1-e657a59b0a27", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3abd1b2948e5d9e52b5f70a5447572cffceecd5af5d41279c3a3d5de5df1b198", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9ccb34e9-2c64-43ae-9d74-21e7b3a1b20a", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "12088edc484650309ed691318853a4457020e56e301f0350cb4860dd51819ef3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "45374ec0-83f0-42e4-8e78-e72ec0a07316", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "94b9eba3fa52eae63186afaaaefcf7a5b01ba7a06827834e3370d3d4dd3445ad", "class_name": "RelatedNodeInfo"}}, "hash": "ae9d27a5c36dccd266a8d0f7faea82f7f10290ca212729e1f8def2efc892f782", "text": "Overview\n\nNow that you've created your dbt project and run it once successfully, it's\ntime to create our first Python model! But before we do, here's a brief\noverview of how to create a Python model in dbt (from [dbt Python\nmodels](https://docs.getdbt.com/docs/building-a-dbt-project/building-\nmodels/python-models)):\n\nEach Python model lives in a `.py` file in your `models/` folder. It defines a\nfunction named **`model()`** , which takes two parameters:\n\n  * `dbt`: A class compiled by dbt Core, unique to each model, that enables you to run your Python code in the context of your dbt project and DAG.\n  * `session`: A class representing the connection to the Python backend on your data platform. The session is needed to read in tables as DataFrames, and to write DataFrames back to tables. In PySpark, by convention, the `SparkSession` is named `spark`, and available globally. For consistency across platforms, we always pass it into the `model` function as an explicit argument named `session`.\n\nThe `model()` function must return a single DataFrame.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "45374ec0-83f0-42e4-8e78-e72ec0a07316": {"__data__": {"id_": "45374ec0-83f0-42e4-8e78-e72ec0a07316", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "aa724f7b-41f0-40ed-aa9b-5e650d545a1c", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "479355f17a0b6bfb55ad0a057d8d50f493e004d40e232f02e06a53e484ac4a9b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "a6457415-ec74-4622-a9a7-11f5137b3c29", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ae9d27a5c36dccd266a8d0f7faea82f7f10290ca212729e1f8def2efc892f782", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "58d272df-4b03-409e-8ba8-cb41c9fe546e", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "5c530ff24d6f97e46976ecb93b73f66d9351071eba9944a54d3ba389435019cf", "class_name": "RelatedNodeInfo"}}, "hash": "94b9eba3fa52eae63186afaaaefcf7a5b01ba7a06827834e3370d3d4dd3445ad", "text": "Create my_first_python_model\n\nIn the `models/example` folder, create a new file named\n`my_first_python_model.py` and copy & paste the following content to the new\nfile:\n\n    \n    \n    def model(dbt, session):\n        # Must be either table or incremental (view is not currently supported)\n        dbt.config(materialized = \"table\")\n    \n        # DataFrame representing an upstream model\n        df = dbt.ref(\"my_first_dbt_model\")\n     \n        return df\n    \n\nFinally, save the file and execute `dbt run` again. If everything ran\nsuccessfully you just ran your very first Python model in dbt! It's that\nsimple. Here are a few things to note at this point:\n\n  * No Jinja! dbt Python models don't use Jinja to render compiled code.\n  * You don't have to explicitly import the Snowflake Snowpark Python library, dbt will do that for you. More on this in the next step.\n  * As mentioned above, every dbt Python model must define a method named `model` that has the following signature: `model(dbt, session)`.\n  * As of 10/17/2022 only `table` or `incremental` materializations are supported, which is why we configured it explicitly here.\n  * You can use `dbt.ref()` and `dbt.source()` just the same as their Jinja equivalents in SQL models. And you can refer to either Python or SQL models interchangeably!\n\n**Note** \\- For more details on accessing dbt project contexts from your\nPython models, please check out [Accessing project\ncontext](https://docs.getdbt.com/docs/building-a-dbt-project/building-\nmodels/python-models#accessing-project-context).\n\nSo what just happened you ran your dbt Python model? The single best thing to\nhelp you debug and understand what's happening is to look at your [Query\nHistory](https://docs.snowflake.com/en/user-guide/ui-snowsight-\nactivity.html#query-history) in Snowflake. Please take a minute now to review\nwhat happened in your Snowflake account, by reviewing your recent query\nhistory.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "58d272df-4b03-409e-8ba8-cb41c9fe546e": {"__data__": {"id_": "58d272df-4b03-409e-8ba8-cb41c9fe546e", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "d6666747-3eb9-430e-8e64-491ba82ea26f", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "d3d787225149a3da220c511423dcc9763e135f4d1446e02ca15e40f8b37da487", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "45374ec0-83f0-42e4-8e78-e72ec0a07316", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "94b9eba3fa52eae63186afaaaefcf7a5b01ba7a06827834e3370d3d4dd3445ad", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f3ec63c7-3b2a-42b3-99f9-105780a9d8f7", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "97162025223a15f5f9abdb8650dfe745f155f1cac3c9f2a283605a566266da70", "class_name": "RelatedNodeInfo"}}, "hash": "5c530ff24d6f97e46976ecb93b73f66d9351071eba9944a54d3ba389435019cf", "text": "Overview of dbt Executed Queries\n\nHere are the queries that dbt executed when you ran the\n`my_first_python_model` model. I've omitted the content of the stored\nprocedure in this section so that it's easier to see what's happening at a\nhigh level. In the next section we'll discuss what's happening inside the\nstored procedure.\n\n  1. List schemas\n    \n         show terse schemas in database DEMO_DB\n    \n\n  2. List objects\n    \n         show terse objects in DEMO_DB.DEMO_SCHEMA\n    \n\n  3. Create stored procedure\n    \n         CREATE OR REPLACE PROCEDURE DEMO_DB.DEMO_SCHEMA.my_first_python_model__dbt_sp ()\n     RETURNS STRING\n     LANGUAGE PYTHON\n     RUNTIME_VERSION = '3.8' -- TODO should this be configurable?\n     PACKAGES = ('snowflake-snowpark-python')\n     HANDLER = 'main'\n     EXECUTE AS CALLER\n     AS\n     $$\n    \n     \n    \n     $$;\n    \n\n  4. Call stored procedure\n    \n         CALL DEMO_DB.DEMO_SCHEMA.my_first_python_model__dbt_sp()\n    \n\n    1. Materialize model\n        \n                 CREATE  OR  REPLACE TABLE DEMO_DB.DEMO_SCHEMA.my_first_python_model AS  SELECT  *  FROM ( SELECT  *  FROM (DEMO_DB.DEMO_SCHEMA.my_first_dbt_model)\n        \n\n  5. Drop stored procedure\n    \n         drop procedure if exists DEMO_DB.DEMO_SCHEMA.my_first_python_model__dbt_sp()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3ec63c7-3b2a-42b3-99f9-105780a9d8f7": {"__data__": {"id_": "f3ec63c7-3b2a-42b3-99f9-105780a9d8f7", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ab4fc40-fa27-4849-a153-ace10e32c2f6", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "965c5915d7b59d89ae8210b1c12e457d9bb4ccc1dca49fba41728eb8746ef087", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "58d272df-4b03-409e-8ba8-cb41c9fe546e", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "5c530ff24d6f97e46976ecb93b73f66d9351071eba9944a54d3ba389435019cf", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "bca25276-dc78-45b6-ab8f-c75102eca0ca", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1dc8f162ddf84d695047a32da3231750dd025cafaa0a50d66dd8ede60d4747c5", "class_name": "RelatedNodeInfo"}}, "hash": "97162025223a15f5f9abdb8650dfe745f155f1cac3c9f2a283605a566266da70", "text": "Overview of Stored Procedure Code Generated by dbt\n\nSo what exactly is happening in the stored procedure? This is really the\ncritical part to focus on in order to understand what dbt is doing with Python\nmodels. As we go through this, keep in mind that a core design principal for\ndbt Python models is that all of the Python code will be executed in\nSnowflake, and none will be run locally. Here's how dbt's documentation puts\nit:\n\nThe prerequisites for dbt Python models include using an adapter for a data\nplatform that supports a fully featured Python runtime. In a dbt Python model,\nall Python code is executed remotely on the platform. None of it is run by dbt\nlocally. We believe in clearly separating model definition from model\nexecution. In this and many other ways, you'll find that dbt's approach to\nPython models mirrors its longstanding approach to modeling data in SQL. (from\n[dbt Python models](https://docs.getdbt.com/docs/building-a-dbt-\nproject/building-models/python-models))\n\nWith that, let's look at our first Python dbt model again:\n\n    \n    \n    def model(dbt, session):\n        # Must be either table or incremental (view is not currently supported)\n        dbt.config(materialized = \"table\")\n    \n        # DataFrame representing an upstream model\n        df = dbt.ref(\"my_first_dbt_model\")\n     \n        return df\n    \n\nSo in order to run that in Snowflake we need a few things. First it needs to\nrun in the context of a stored procedure, and second the stored procedure\nneeds to contain everything necessary to run the model. This means that dbt\nneeds to generate Python code to handle the following things:\n\n  1. Provide a `dbt` and `session` object to our `model()` method. \n    1. The `dbt` object needs to provide access to dbt configuration and dag context with methods like `ref()`, `source()`, `config()`, `this()`, etc.\n    2. The `session` object is the Snowpark session\n  2. Provide the logic to materialize the resulting DataFrame returned by the `model()` method\n  3. Provide the overall orchestration of these pieces\n\nHere's the full content of the stored procedure generated by dbt (which was\nremoved in the overview above and replaced with the `<dbt compiled Python\ncode>` placeholder):\n\n    \n    \n    def model(dbt, session):\n        # Must be either table or incremental (view is not currently supported)\n        dbt.config(materialized = \"table\")\n    \n        # DataFrame representing an upstream model\n        df = dbt.ref(\"my_first_dbt_model\")\n     \n        return df\n    \n    \n    # This part is user provided model code\n    # you will need to copy the next section to run the code\n    # COMMAND ----------\n    # this part is dbt logic for get ref work, do not modify\n    \n    def ref(*args,dbt_load_df_function):\n        refs = {\"my_first_dbt_model\": \"DEMO_DB.DEMO_SCHEMA.my_first_dbt_model\"}\n        key = \".\".join(args)\n        return dbt_load_df_function(refs[key])\n    \n    \n    def source(*args, dbt_load_df_function):\n        sources = {}\n        key = \".", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "bca25276-dc78-45b6-ab8f-c75102eca0ca": {"__data__": {"id_": "bca25276-dc78-45b6-ab8f-c75102eca0ca", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ab4fc40-fa27-4849-a153-ace10e32c2f6", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "965c5915d7b59d89ae8210b1c12e457d9bb4ccc1dca49fba41728eb8746ef087", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f3ec63c7-3b2a-42b3-99f9-105780a9d8f7", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "97162025223a15f5f9abdb8650dfe745f155f1cac3c9f2a283605a566266da70", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e06f7fb3-4d22-4f4a-ba79-1bc9bea6c4a0", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "958fcb08d8eea667139322b2bba1ff9a3ad8d48be2021efd78af1ccfd2840ebe", "class_name": "RelatedNodeInfo"}}, "hash": "1dc8f162ddf84d695047a32da3231750dd025cafaa0a50d66dd8ede60d4747c5", "text": "\".join(args)\n        return dbt_load_df_function(refs[key])\n    \n    \n    def source(*args, dbt_load_df_function):\n        sources = {}\n        key = \".\".join(args)\n        return dbt_load_df_function(sources[key])\n    \n    \n    config_dict = {}\n    \n    \n    class config:\n        def __init__(self, *args, **kwargs):\n            pass\n    \n        @staticmethod\n        def get(key):\n            return config_dict.get(key)\n    \n    class this:\n        \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n        database = 'DEMO_DB'\n        schema = 'DEMO_SCHEMA'\n        identifier = 'my_first_python_model'\n        def __repr__(self):\n            return 'DEMO_DB.DEMO_SCHEMA.my_first_python_model'\n    \n    \n    class dbtObj:\n        def __init__(self, load_df_function) -> None:\n            self.source = lambda x: source(x, dbt_load_df_function=load_df_function)\n            self.ref = lambda x: ref(x, dbt_load_df_function=load_df_function)\n            self.config = config\n            self.this = this()\n            self.is_incremental = False\n    \n    # COMMAND ----------\n    \n    # To run this in snowsight, you need to select entry point to be main\n    # And you may have to modify the return type to text to get the result back\n    # def main(session):\n    #     dbt = dbtObj(session.table)\n    #     df = model(dbt, session)\n    #     return df.collect()\n    \n    # to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n    # then you can do the following to run model\n    # dbt = dbtObj(session.table)\n    # df = model(dbt, session)\n    \n    \n    def materialize(session, df, target_relation):\n        # we have to make sure pandas is imported\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n            # session.write_pandas does not have overwrite function\n            df = session.createDataFrame(df)\n        df.write.mode(\"overwrite\").save_as_table(\"DEMO_DB.DEMO_SCHEMA.my_first_python_model\", create_temp_table=False)\n    \n    def main(session):\n        dbt = dbtObj(session.table)\n        df = model(dbt, session)\n        materialize(session, df, dbt.this)\n        return \"OK\"\n    \n\n**Note** \\- When building and debugging your dbt Python models, you can find\nthis Python code in the compiled version of the model by running `dbt compile`\n(or `dbt run`). The compiled files are written to the `target-path` folder,\nwhich by default is a folder named `target` in your dbt project folder.\n\nNow that you understand the basics of dbt Python models, let's add in another\nconcept, the user-defined function (or UDF for short). \"A UDF (user-defined\nfunction) is a user-written function that can be called from Snowflake in the\nsame way that a built-in function can be called. Snowflake supports UDFs\nwritten in multiple languages, including Python.\" (see [Introduction to Python\nUDFs](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-\nintroduction.html) for more details). By creating and registering a UDF it can\nbe used in your DataFrame (or SQL) expression just like a built-in function.\n\nSo let's create a second dbt Python model, this time with a UDF. In the\n`models/example` folder, create a new file named `my_second_python_model.py`\nand copy & paste the following content to the new file:\n\n    \n    \n    from snowflake.snowpark.functions import udf\n    \n    def model(dbt, session):\n        # Must be either table or incremental (view is not currently supported)\n        dbt.config(materialized = \"table\")\n    \n        # User defined function\n        @udf\n        def add_one(x: int) -> int:\n            x = 0 if not x else x\n            return x + 1\n    \n        # DataFrame representing an upstream model\n        df = dbt.ref(\"my_first_dbt_model\")\n    \n        # Add a new column containing the id incremented by one\n        df = df.withColumn(\"id_plus_one\", add_one(df[\"id\"]))\n    \n        return df\n    \n\nAs you can see from the code above we're creating a very simple UDF named\n`add_one()` which adds one to the number passed to the function. Finally, save\nthe file and execute `dbt run` again (or just run this new model by executing\n`dbt run --model my_second_python_model`).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e06f7fb3-4d22-4f4a-ba79-1bc9bea6c4a0": {"__data__": {"id_": "e06f7fb3-4d22-4f4a-ba79-1bc9bea6c4a0", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "1ab4fc40-fa27-4849-a153-ace10e32c2f6", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "965c5915d7b59d89ae8210b1c12e457d9bb4ccc1dca49fba41728eb8746ef087", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "bca25276-dc78-45b6-ab8f-c75102eca0ca", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1dc8f162ddf84d695047a32da3231750dd025cafaa0a50d66dd8ede60d4747c5", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "d50ca402-2158-4ebd-ac9d-c654feeefffd", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "70490f505e48a68844557b7752528b7b622da34519d397909980aabe08de6ba3", "class_name": "RelatedNodeInfo"}}, "hash": "958fcb08d8eea667139322b2bba1ff9a3ad8d48be2021efd78af1ccfd2840ebe", "text": "Finally, save\nthe file and execute `dbt run` again (or just run this new model by executing\n`dbt run --model my_second_python_model`). If everything ran successfully you\njust ran your second Python model with a UDF in dbt!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "d50ca402-2158-4ebd-ac9d-c654feeefffd": {"__data__": {"id_": "d50ca402-2158-4ebd-ac9d-c654feeefffd", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "84db4db8-c9e3-43b4-8b14-7153aaa4bde8", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "2d26f10d57a270e99d8fd38c5c32e587976fe8af31fbc50f3e892c3b3edfc5ca", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e06f7fb3-4d22-4f4a-ba79-1bc9bea6c4a0", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "958fcb08d8eea667139322b2bba1ff9a3ad8d48be2021efd78af1ccfd2840ebe", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "85bfb1a4-88aa-4f7c-9aa9-63d5c2d01a25", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e1aad6d934cb3de9a21da0eb1f3e735f70e53b3a8d19031931239c1c4f3d4c91", "class_name": "RelatedNodeInfo"}}, "hash": "70490f505e48a68844557b7752528b7b622da34519d397909980aabe08de6ba3", "text": "Aside: Where to Define the UDF\n\nRemember in the last section how we saw that your dbt Python model code is\nsupplemented with dbt's compiled code and then wrapped in a Snowflake stored\nprocedure? Well that's important to note as it has implications for where/how\nyou define a UDF in your Python model. In the example above we defined and\nregistered the function inside the `main()` handler function, using the `@udf`\ndecorator.\n\nIf you try and define and register the function outside of the `main()`\nhandler function you will get the following error: `Query outside the handler\nis not allowed in Stored Procedure. Please move query related functions into\nthe handler in function`. In order to move the function definition outside of\nthe `main()` handler function you must only define it there and then register\nit inside. Here is an example from dbt's documentation ([dbt Python\nmodels](https://docs.getdbt.com/docs/building-a-dbt-project/building-\nmodels/python-models)):\n\n    \n    \n    import snowflake.snowpark.types as T\n    import snowflake.snowpark.functions as F\n    import numpy\n    \n    def register_udf_add_random():\n        add_random = F.udf(\n            # use 'lambda' syntax, for simple functional behavior\n            lambda x: x + numpy.random.normal(),\n            return_type=T.FloatType(),\n            input_types=[T.FloatType()]\n        )\n        return add_random\n    \n    def model(dbt, session):\n    \n        dbt.config(\n            materialized = \"table\",\n            packages = [\"numpy\"]\n        )\n    \n        temps_df = dbt.ref(\"temperatures\")\n    \n        add_random = register_udf_add_random()\n    \n        # warm things up, who knows by how much\n        df = temps_df.withColumn(\"degree_plus_random\", add_random(\"degree\"))\n        return df\n    \n\nNotice that the function is defined outside the `main()` handler function and\nthen registered (and used) inside.\n\nNow let's take another deep dive into what happened when we run the second dbt\nmodel with a UDF. As before, please take a minute now to review what happened\nin your Snowflake account, by reviewing your recent query history ([Query\nHistory](https://docs.snowflake.com/en/user-guide/ui-snowsight-\nactivity.html#query-history)).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "85bfb1a4-88aa-4f7c-9aa9-63d5c2d01a25": {"__data__": {"id_": "85bfb1a4-88aa-4f7c-9aa9-63d5c2d01a25", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5de429b9-7892-4e70-b594-f3814edf8a11", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "48b3730296f9a549ee7ac542deb2e4637238c7f80eaf40c501c4426589d3a0b4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "d50ca402-2158-4ebd-ac9d-c654feeefffd", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "70490f505e48a68844557b7752528b7b622da34519d397909980aabe08de6ba3", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e3f7f78e-eecb-4e8a-a948-6c9555c00928", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f8c923b21a34d4dbd9883156702ebd8d15c4891cf1d145ee855fcf8690a0f318", "class_name": "RelatedNodeInfo"}}, "hash": "e1aad6d934cb3de9a21da0eb1f3e735f70e53b3a8d19031931239c1c4f3d4c91", "text": "Overivew of dbt Executed Queries\n\nHere are the queries that dbt executed when you ran the\n`my_second_python_model` model. You will notice that it's similar to the first\nmodel, but with some more queries to deal with creating the UDF. I've again\nomitted the content of the stored procedure in this section so that it's\neasier to see what's happening at a high level. But I won't walk through it\nthis time as it's very similar to the previous example, the only real\ndifference being the difference in model code.\n\n  1. List schemas\n    \n         show terse schemas in database DEMO_DB\n    \n\n  2. List objects\n    \n         show terse objects in DEMO_DB.DEMO_SCHEMA\n    \n\n  3. Create stored procedure\n    \n         CREATE OR REPLACE PROCEDURE DEMO_DB.DEMO_SCHEMA.my_second_python_model__dbt_sp ()\n     RETURNS STRING\n     LANGUAGE PYTHON\n     RUNTIME_VERSION = '3.8' -- TODO should this be configurable?\n     PACKAGES = ('snowflake-snowpark-python')\n     HANDLER = 'main'\n     EXECUTE AS CALLER\n     AS\n     $$\n    \n     \n    \n     $$;\n    \n\n  4. Call stored procedure\n    \n         CALL DEMO_DB.DEMO_SCHEMA.my_second_python_model__dbt_sp()\n    \n\n    1. Use the correct database\n        \n                 SELECT CURRENT_DATABASE()\n        \n\n    2. Create a temporary stage\n        \n                 create temporary stage if not exists DEMO_DB.DEMO_SCHEMA.SNOWPARK_TEMP_STAGE_4LBT18DLR8\n        \n\n    3. List the contents of the stage\n        \n                 ls '@\"DEMO_DB\".\"DEMO_SCHEMA\".SNOWPARK_TEMP_STAGE_4LBT18DLR8'\n        \n\n    4. Get the list of files in the stage\n        \n                 SELECT \"name\" FROM ( SELECT  *  FROM  TABLE ( RESULT_SCAN('')))\n        \n\n    5. Create the temporary function\n        \n                 CREATE TEMPORARY FUNCTION \"DEMO_DB\".\"DEMO_SCHEMA\".SNOWPARK_TEMP_FUNCTION_1Z5V5PPNVH(arg1 BIGINT)\n         RETURNS BIGINT\n         LANGUAGE PYTHON\n         RUNTIME_VERSION=3.8\n         PACKAGES=('cloudpickle==2.0.0')\n         HANDLER='compute'\n        \n         AS $$\n        \n         \n        \n         $$;\n        \n\n    6. Materialize the table\n        \n                 CREATE  OR  REPLACE TABLE  DEMO_DB.DEMO_SCHEMA.my_second_python_model AS  SELECT  *  FROM ( SELECT \"ID\", \"DEMO_DB\".\"DEMO_SCHEMA\".SNOWPARK_TEMP_FUNCTION_1Z5V5PPNVH(\"ID\") AS \"ID_PLUS_ONE\" FROM ( SELECT  *  FROM (DEMO_DB.DEMO_SCHEMA.my_first_dbt_model)))\n        \n\n  5. Drop stored procedure\n    \n         drop procedure if exists DEMO_DB.DEMO_SCHEMA.my_second_python_model__dbt_sp()\n    \n\nThe overall steps are the same, but notice that what happens during the stored\nprocedure execution (step #4) is different and more complex. This is because\nthe Snowpark library, running inside the Snowflake Python stored procedure has\nmore work to do with UDFs. It has to pickle the UDF content, create a\ntemporary stage, and finally create the UDF in Snowflake.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e3f7f78e-eecb-4e8a-a948-6c9555c00928": {"__data__": {"id_": "e3f7f78e-eecb-4e8a-a948-6c9555c00928", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8a7a76b9-527b-4e53-8015-20f796fa05f9", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1b40a69b022cff4bb846aa3095789d464605fecc896cf12066273ae30af7af0d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "85bfb1a4-88aa-4f7c-9aa9-63d5c2d01a25", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e1aad6d934cb3de9a21da0eb1f3e735f70e53b3a8d19031931239c1c4f3d4c91", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3dbb325a-3961-47f6-b1f6-f30a1f07d47d", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "94fa5ac55edc271f29c4324a6c195b8196601f4a473fe298ea33ec46a285ad02", "class_name": "RelatedNodeInfo"}}, "hash": "f8c923b21a34d4dbd9883156702ebd8d15c4891cf1d145ee855fcf8690a0f318", "text": "Conclusion\n\nHopefully you've seen how powerful the combination of dbt Python models and\nthe Snowflake platform can be! By supporting both SQL and Python based\ntransformations in dbt, data engineers can take advantage of both while\nbuilding robust data pipelines. While most of the time the choice between SQL\nor DataFrames is simply a matter of preference, as we discussed in the\nintroduction there are use cases where data transformations can't be expressed\nin SQL. In these cases data engineers can make use of tools available in the\nopen source Python ecosystem, including state-of-the-art packages for data\nscience and statistics.\n\nAnd best of all, the Snowflake platform enables this with native Python\nsupport and rich Snowpark API for Python. This eliminates the need for data\nengineers to maintain and pay for separate infrastructure/services to run\nPython code. Snowflake manages all of it for you with the ease of use that you\nwould expect from Snowflake!\n\nData engineering with Snowflake and dbt just got easier!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3dbb325a-3961-47f6-b1f6-f30a1f07d47d": {"__data__": {"id_": "3dbb325a-3961-47f6-b1f6-f30a1f07d47d", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb9e1c68-4209-4e61-b3d4-f2029464956e", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3a0612d95792aa3055515a0976d571b7c280d967b0972130f06a2ea6a90913ab", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e3f7f78e-eecb-4e8a-a948-6c9555c00928", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f8c923b21a34d4dbd9883156702ebd8d15c4891cf1d145ee855fcf8690a0f318", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "17e88fac-7f5f-4fe3-a8d4-9316d8fb3801", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1deae9677ad345579fc75ee5179687029cbf00bda89dcc9a16ec7d69de2ed6d8", "class_name": "RelatedNodeInfo"}}, "hash": "94fa5ac55edc271f29c4324a6c195b8196601f4a473fe298ea33ec46a285ad02", "text": "Some Tips for Debugging dbt Python Models\n\nThere are a few ways to debug your dbt Python models.\n\nThe first tip is to build and debug via dbt. This is probably the default for\nmost people. With this approach you edit the dbt Python model code directly in\nthe dbt model file and execute it via the `dbt run` command (and it's often\nbest to use the `dbt run --model ` syntax to only run the model in\nconsideration). But this can be a bit time consuming and require you to flip\nback and forth between your dbt and Snowflake.\n\nThe second tip is to build and debug the model code directly in Python. Like I\nmentioned in Section 1, I personally like Visual Studio Code and the [the\nPython extension from\nMicrosoft](https://marketplace.visualstudio.com/items?itemName=ms-\npython.python), but you can use whatever Python IDE you prefer. Regardless,\nthe idea here is to copy/paste the contents of the dbt generated Python code\ninto a temporary Python script as a starting point then edit/debug until it's\nright and finally paste just the contents of the model back into your dbt\nmodel file. As we saw in section 4 of this Quickstart you can get the dbt\ngenerated Python code by compiling the model and looking at the compiled\nscript. There is even commented out code in the dbt generated Python code to\nhelp get you started.\n\nHope that helps!", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "17e88fac-7f5f-4fe3-a8d4-9316d8fb3801": {"__data__": {"id_": "17e88fac-7f5f-4fe3-a8d4-9316d8fb3801", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "56008cbf-4830-419e-a072-23973cb9f38a", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e3d527157b9db11663f937fb298041aff76ef6bb6fedc1b3f25f8a9117d4d1f7", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3dbb325a-3961-47f6-b1f6-f30a1f07d47d", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "94fa5ac55edc271f29c4324a6c195b8196601f4a473fe298ea33ec46a285ad02", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "63217bee-58e9-4bc1-865d-98418b0e9da2", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1cb0c9ad4a75eef404242a1ae9f11517a2bceed7549a008089de46d5242cce92", "class_name": "RelatedNodeInfo"}}, "hash": "1deae9677ad345579fc75ee5179687029cbf00bda89dcc9a16ec7d69de2ed6d8", "text": "What We've Covered\n\n  * The basics of Snowpark Python\n  * How to create Python-based models in dbt\n  * How to create and use Python UDFs in your dbt Python model\n  * How the integration between Snowpark Python and dbt's Python models works", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "63217bee-58e9-4bc1-865d-98418b0e9da2": {"__data__": {"id_": "63217bee-58e9-4bc1-865d-98418b0e9da2", "embedding": null, "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "e43bb6eb-5a67-49a9-b1aa-168447f11868", "node_type": "4", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "935edb5e81664231246c51b064ff3632e50b9d31565f8d780f2139e61d181b80", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "17e88fac-7f5f-4fe3-a8d4-9316d8fb3801", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1deae9677ad345579fc75ee5179687029cbf00bda89dcc9a16ec7d69de2ed6d8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b886c905-bcea-4ee3-aba9-7ab75149538f", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c084916b741ab770c3c2022bf86d2844cf30a3585b733e66a30913f5c97ca4d2", "class_name": "RelatedNodeInfo"}}, "hash": "1cb0c9ad4a75eef404242a1ae9f11517a2bceed7549a008089de46d5242cce92", "text": "Related Resources\n\n  * Snowpark Developer Guide for Python\n  * Snowpark API Reference (Python)\n  * dbt Python models", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b886c905-bcea-4ee3-aba9-7ab75149538f": {"__data__": {"id_": "b886c905-bcea-4ee3-aba9-7ab75149538f", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "b7eb2722-b9fc-4e96-837e-3c311a14d922", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ecf2140c92c4136692c9410534aada2e1752e6a965cdc19352dd332ebaa48e80", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "63217bee-58e9-4bc1-865d-98418b0e9da2", "node_type": "1", "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1cb0c9ad4a75eef404242a1ae9f11517a2bceed7549a008089de46d5242cce92", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f3728820-8d11-4de2-9fda-9e86dde06085", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f1c614c33caa8ed1cbf9700bc3d0232af417ccd16702b032d8939ffcaf0da567", "class_name": "RelatedNodeInfo"}}, "hash": "c084916b741ab770c3c2022bf86d2844cf30a3585b733e66a30913f5c97ca4d2", "text": "What is Snowpark?\n\nThe set of libraries and runtimes in Snowflake that securely deploy and\nprocess non-SQL code, including Python, Java and Scala.\n\n**Familiar Client Side Libraries** \\- Snowpark brings deeply integrated,\nDataFrame-style programming and OSS compatible APIs to the languages data\npractitioners like to use. It also includes the Snowpark ML API for more\nefficient ML modeling (public preview) and ML operations (private preview).\n\n**Flexible Runtime Constructs** \\- Snowpark provides flexible runtime\nconstructs that allow users to bring in and run custom logic. Developers can\nseamlessly build data pipelines, ML models, and data applications with User-\nDefined Functions and Stored Procedures.\n\nLearn more about Snowpark.\n\n!Snowpark", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f3728820-8d11-4de2-9fda-9e86dde06085": {"__data__": {"id_": "f3728820-8d11-4de2-9fda-9e86dde06085", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "2922b33a-2de8-491a-aa77-eeb1aa649ee4", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "375f2d0704f2df606e7219ec932392a4500e0a47cfd8b734950dfa192369b0fb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b886c905-bcea-4ee3-aba9-7ab75149538f", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c084916b741ab770c3c2022bf86d2844cf30a3585b733e66a30913f5c97ca4d2", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "3983fd76-81b5-470d-9e9e-2f37df8f9c2b", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1f12078b53f441a5e545fff1eafd65a6a298f54cf3daedec0637492d55bf8512", "class_name": "RelatedNodeInfo"}}, "hash": "f1c614c33caa8ed1cbf9700bc3d0232af417ccd16702b032d8939ffcaf0da567", "text": "What is Snowpark ML?\n\nSnowpark ML is a new library for faster and more intuitive end-to-end ML\ndevelopment in Snowflake. Snowpark ML has 2 APIs: Snowpark ML Modeling (in\nPublic Preview) for model development and Snowpark ML Operations (in Private\nPreview) for model deployment.\n\nThis quickstart will focus on the Snowpark ML Modeling API, which scales out\nfeature engineering and simplifies ML training execution in Snowflake.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "3983fd76-81b5-470d-9e9e-2f37df8f9c2b": {"__data__": {"id_": "3983fd76-81b5-470d-9e9e-2f37df8f9c2b", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f37d1afd-727e-4df5-bca4-4f27852e6060", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "39c653a9f9ba90e869b1a072c093be067c016ef257ce2e3ddeb1ab50837b5a55", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f3728820-8d11-4de2-9fda-9e86dde06085", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f1c614c33caa8ed1cbf9700bc3d0232af417ccd16702b032d8939ffcaf0da567", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "03a070b8-881f-42b7-95c0-573ce57274bc", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3b535de99de3e290a31d7ce93091031a044cbc86c3de20ddd66a6cce48cb97b8", "class_name": "RelatedNodeInfo"}}, "hash": "1f12078b53f441a5e545fff1eafd65a6a298f54cf3daedec0637492d55bf8512", "text": "What is Streamlit?\n\nStreamlit enables data scientists and Python developers to combine Streamlit's\ncomponent-rich, open-source Python library with the scale, performance, and\nsecurity of the Snowflake platform.\n\nLearn more about [Streamlit](https://www.snowflake.com/en/data-\ncloud/overview/streamlit-in-snowflake/).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "03a070b8-881f-42b7-95c0-573ce57274bc": {"__data__": {"id_": "03a070b8-881f-42b7-95c0-573ce57274bc", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5cd37e51-9621-4ad2-b857-aca530b20899", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "02471d0b0a42fc1de12fdf3f67621e6030f8bfb6a6b4863a232de21aeffd3208", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "3983fd76-81b5-470d-9e9e-2f37df8f9c2b", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1f12078b53f441a5e545fff1eafd65a6a298f54cf3daedec0637492d55bf8512", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "da1891cf-271a-41ef-b888-bb9aa255ac7b", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f389c4fd737879aba915cae87a21b256bb40a627e4d057302d2263dbdd5e3be9", "class_name": "RelatedNodeInfo"}}, "hash": "3b535de99de3e290a31d7ce93091031a044cbc86c3de20ddd66a6cce48cb97b8", "text": "What You Will Learn\n\n  * How to analyze data and perform data engineering tasks using Snowpark DataFrames and APIs\n  * How to use open-source Python libraries from curated Snowflake Anaconda channel\n  * How to train ML model using Snowpark ML in Snowflake\n  * How to create Scalar and Vectorized Snowpark Python User-Defined Functions (UDFs) for online and offline inference respectively\n  * How to create Snowflake Tasks to automate data pipelines\n  * How to create Streamlit application that uses the Scalar UDF for inference based on user input", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "da1891cf-271a-41ef-b888-bb9aa255ac7b": {"__data__": {"id_": "da1891cf-271a-41ef-b888-bb9aa255ac7b", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "389f2c75-8475-445d-87d4-5f40ac7012f4", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c2f7ee8ccb312877cd0599e3a4e25ae60cc6a7b39c855d9a737a31baeb9e1fed", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "03a070b8-881f-42b7-95c0-573ce57274bc", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3b535de99de3e290a31d7ce93091031a044cbc86c3de20ddd66a6cce48cb97b8", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "9b296380-1b68-4ad9-88ce-1648362b175a", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "81cd1a5b5471b9641e2fd6e1cd3922dc312dbbdb34553459f1b0f51ed0cf6c7e", "class_name": "RelatedNodeInfo"}}, "hash": "f389c4fd737879aba915cae87a21b256bb40a627e4d057302d2263dbdd5e3be9", "text": "Prerequisites\n\n  * Git installed\n  * Python 3.9 installed \n    * Note that you will be creating a Python environment with 3.9 in the **Get Started** step\n  * A Snowflake account with Anaconda Packages enabled by ORGADMIN. If you do not have a Snowflake account, you can register for a free trial account.\n  * A Snowflake account login with ACCOUNTADMIN role. If you have this role in your environment, you may choose to use it. If not, you will need to 1) Register for a free trial, 2) Use a different role that has the ability to create database, schema, tables, stages, tasks, user-defined functions, and stored procedures OR 3) Use an existing database and schema in which you are able to create the mentioned objects.\n\nIMPORTANT: Before proceeding, make sure you have a Snowflake account with\nAnaconda packages enabled by ORGADMIN as described\n[here](https://docs.snowflake.com/en/developer-guide/udf/python/udf-python-\npackages#getting-started).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "9b296380-1b68-4ad9-88ce-1648362b175a": {"__data__": {"id_": "9b296380-1b68-4ad9-88ce-1648362b175a", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "607224dd-30c1-40e3-afe3-1a2205542859", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "343fd7320f916c5755bb5dcb14802a99f69395284477f4aa7716d8bf4d1ccefd", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "da1891cf-271a-41ef-b888-bb9aa255ac7b", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "f389c4fd737879aba915cae87a21b256bb40a627e4d057302d2263dbdd5e3be9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "96fed465-7783-4922-a0f7-d6e65f806136", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c78ad7bf139138ec0fcf0ed0bc0f95c0d8295c6db7cd04fabb9173d05b54d7b9", "class_name": "RelatedNodeInfo"}}, "hash": "81cd1a5b5471b9641e2fd6e1cd3922dc312dbbdb34553459f1b0f51ed0cf6c7e", "text": "Create Tables, Load Data and Setup Stages\n\nLog into [Snowsight](https://docs.snowflake.com/en/user-guide/ui-\nsnowsight.html#) using your credentials to create tables, load data from\nAmazon S3, and setup Snowflake internal stages.\n\nIMPORTANT:\n\n  * If you use different names for objects created in this section, be sure to update scripts and code in the following sections accordingly.\n  * For each SQL script block below, select all the statements in the block and execute them top to bottom.\n\nRun the following SQL commands to create the\n[warehouse](https://docs.snowflake.com/en/sql-reference/sql/create-\nwarehouse.html), [database](https://docs.snowflake.com/en/sql-\nreference/sql/create-database.html) and\nschema.\n\n    \n    \n    USE ROLE ACCOUNTADMIN;\n    \n    CREATE OR REPLACE WAREHOUSE DASH_L;\n    CREATE OR REPLACE DATABASE DASH_DB;\n    CREATE OR REPLACE SCHEMA DASH_SCHEMA;\n    \n    USE DASH_DB.DASH_SCHEMA;\n    \n\nRun the following SQL commands to create table **CAMPAIGN_SPEND** from data\nhosted on publicly accessible S3 bucket.\n\n    \n    \n    CREATE or REPLACE file format csvformat\n      skip_header = 1\n      type = 'CSV';\n    \n    CREATE or REPLACE stage campaign_data_stage\n      file_format = csvformat\n      url = 's3://sfquickstarts/ad-spend-roi-snowpark-python-scikit-learn-streamlit/campaign_spend/';\n    \n    CREATE or REPLACE TABLE CAMPAIGN_SPEND (\n      CAMPAIGN VARCHAR(60), \n      CHANNEL VARCHAR(60),\n      DATE DATE,\n      TOTAL_CLICKS NUMBER(38,0),\n      TOTAL_COST NUMBER(38,0),\n      ADS_SERVED NUMBER(38,0)\n    );\n    \n    COPY into CAMPAIGN_SPEND\n      from @campaign_data_stage;\n    \n\nRun the following SQL commands to create table **MONTHLY_REVENUE** from data\nhosted on publicly accessible S3 bucket.\n\n    \n    \n    CREATE or REPLACE stage monthly_revenue_data_stage\n      file_format = csvformat\n      url = 's3://sfquickstarts/ad-spend-roi-snowpark-python-scikit-learn-streamlit/monthly_revenue/';\n    \n    CREATE or REPLACE TABLE MONTHLY_REVENUE (\n      YEAR NUMBER(38,0),\n      MONTH NUMBER(38,0),\n      REVENUE FLOAT\n    );\n    \n    COPY into MONTHLY_REVENUE\n      from @monthly_revenue_data_stage;\n    \n\nRun the following SQL commands to create table **BUDGET_ALLOCATIONS_AND_ROI**\nthat holds the last six months of budget allocations and ROI.\n\n    \n    \n    CREATE or REPLACE TABLE BUDGET_ALLOCATIONS_AND_ROI (\n      MONTH varchar(30),\n      SEARCHENGINE integer,\n      SOCIALMEDIA integer,\n      VIDEO integer,\n      EMAIL integer,\n      ROI float\n    );\n    \n    INSERT INTO BUDGET_ALLOCATIONS_AND_ROI (MONTH, SEARCHENGINE, SOCIALMEDIA, VIDEO, EMAIL, ROI)\n    VALUES\n    ('January',35,50,35,85,8.22),\n    ('February',75,50,35,85,13.90),\n    ('March',15,50,35,15,7.34),\n    ('April',25,80,40,90,13.23),\n    ('May',95,95,10,95,6.246),\n    ('June',35,50,35,85,8.22);\n    \n\nRun the following commands to create Snowflake [internal\nstages](https://docs.snowflake.com/en/user-guide/data-load-local-file-system-\ncreate-stage) for storing Stored Procedures, UDFs, and ML model files.\n\n    \n    \n    CREATE OR REPLACE STAGE dash_sprocs;\n    CREATE OR REPLACE STAGE dash_models;\n    CREATE OR REPLACE STAGE dash_udfs;\n    \n\nOptionally, you can also open [setup.sql](https://github.com/Snowflake-\nLabs/sfguide-ad-spend-roi-snowpark-python-streamlit-scikit-\nlearn/blob/main/setup.sql) in Snowsight and run all SQL statements to create\nthe objects and load data from AWS S3.\n\nIMPORTANT: If you use different names for objects created in this section, be\nsure to update scripts and code in the following sections accordingly.\n\nThis section covers cloning of the GitHub repository and setting up your\nSnowpark for Python environment.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "96fed465-7783-4922-a0f7-d6e65f806136": {"__data__": {"id_": "96fed465-7783-4922-a0f7-d6e65f806136", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb2a2d58-0000-4dc0-97c4-3c942287aa85", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c6b01b5789ba8cf6177484481f4071eacad476ff45ffbb2c6254968076343cb3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "9b296380-1b68-4ad9-88ce-1648362b175a", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "81cd1a5b5471b9641e2fd6e1cd3922dc312dbbdb34553459f1b0f51ed0cf6c7e", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "634c3fe9-27a1-49a3-a830-da87c356d905", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e497db46a82307ee043853ec353b4f4b918b74ee76a13c8e911113c73001fceb", "class_name": "RelatedNodeInfo"}}, "hash": "c78ad7bf139138ec0fcf0ed0bc0f95c0d8295c6db7cd04fabb9173d05b54d7b9", "text": "Clone GitHub Repository\n\nThe very first step is to clone the [GitHub\nrepository](https://github.com/Snowflake-Labs/sfguide-ad-spend-roi-snowpark-\npython-streamlit-scikit-learn). This repository contains all the code you will\nneed to successfully complete this QuickStart Guide.\n\nUsing HTTPS:\n\n    \n    \n    git clone https://github.com/Snowflake-Labs/sfguide-getting-started-dataengineering-ml-snowpark-python.git\n    \n\nOR, using SSH:\n\n    \n    \n    git clone git@github.com:Snowflake-Labs/sfguide-getting-started-dataengineering-ml-snowpark-python.git", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "634c3fe9-27a1-49a3-a830-da87c356d905": {"__data__": {"id_": "634c3fe9-27a1-49a3-a830-da87c356d905", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "cb422583-53ad-449a-93a7-e499daab257b", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3e26004f3d6d4e8155e795eff53671210e7db285fad56aebb9a6e00d6da897e4", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "96fed465-7783-4922-a0f7-d6e65f806136", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c78ad7bf139138ec0fcf0ed0bc0f95c0d8295c6db7cd04fabb9173d05b54d7b9", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "f2043159-94ab-4494-bf09-156d1d6bf39f", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "51be957c90e7d96ceb3167cbe04d9ef6f77afe1c961ab340ff494a0aac54f6bd", "class_name": "RelatedNodeInfo"}}, "hash": "e497db46a82307ee043853ec353b4f4b918b74ee76a13c8e911113c73001fceb", "text": "Snowpark for Python\n\nTo complete the **Data Engineering** and **Machine Learning** steps, you have\nthe option to either install everything locally (option 1) or use Hex (option\n2) as described below.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "f2043159-94ab-4494-bf09-156d1d6bf39f": {"__data__": {"id_": "f2043159-94ab-4494-bf09-156d1d6bf39f", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "8aca293f-d757-46ce-b66a-8321f5422e82", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a9482b74294b95b1bd9797278386e1e0f33f5032db771303c6c59567a52a58e2", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "634c3fe9-27a1-49a3-a830-da87c356d905", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "e497db46a82307ee043853ec353b4f4b918b74ee76a13c8e911113c73001fceb", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e38fa34b-fa4e-4b24-a96b-986be8e74004", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ccddfb15a38849e1139433272b087318aaeb49d8f654292261439d92b78efe68", "class_name": "RelatedNodeInfo"}}, "hash": "51be957c90e7d96ceb3167cbe04d9ef6f77afe1c961ab340ff494a0aac54f6bd", "text": "Option 1 \u2013 Local Installation\n\n**Step 1:** Download and install the miniconda installer from\n. _(OR, you may use any other Python\nenvironment with Python 3.9, for example,_[\n_virtualenv_](https://virtualenv.pypa.io/en/latest/) _)_.\n\n**Step 2:** Open a new terminal window and execute the following commands in\nthe same terminal window.\n\n**Step 3:** Create Python 3.9 conda environment called **snowpark-de-ml** by\nrunning the following command in the same terminal window\n\n    \n    \n    conda create --name snowpark-de-ml -c https://repo.anaconda.com/pkgs/snowflake python=3.9\n    \n\n**Step 4:** Activate conda environment **snowpark-de-ml** by running the\nfollowing command in the same terminal window\n\n    \n    \n    conda activate snowpark-de-ml\n    \n\n**Step 5:** Install Snowpark Python, Snowpark ML, and other libraries in conda\nenvironment **snowpark-de-ml** from [Snowflake Anaconda\nchannel](https://repo.anaconda.com/pkgs/snowflake/) by running the following\ncommand in the same terminal window\n\n    \n    \n    conda install -c https://repo.anaconda.com/pkgs/snowflake snowflake-snowpark-python snowflake-ml-python pandas notebook cachetools\n    \n\n**Step 6:** Update [connection.json](https://github.com/Snowflake-\nLabs/sfguide-ml-model-snowpark-python-scikit-learn-\nstreamlit/blob/main/connection.json) with your Snowflake account details and\ncredentials.\n\nHere's a sample **_connection.json_** based on the object names mentioned in\n**Setup Environment** step.\n\n    \n    \n    {\n      \"account\"   : \"\",\n      \"user\"      : \"\",\n      \"password\"  : \"\",\n      \"role\"      : \"ACCOUNTADMIN\",\n      \"warehouse\" : \"DASH_L\",\n      \"database\"  : \"DASH_DB\",\n      \"schema\"    : \"DASH_SCHEMA\"\n    }\n    \n\nNote: For the **account** parameter above, specify your **account identifier**\nand do not include the snowflakecomputing.com domain name. Snowflake\nautomatically appends this when creating the connection. For more details on\nthat, [refer to the documentation](https://docs.snowflake.com/en/user-\nguide/admin-account-identifier.html).", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e38fa34b-fa4e-4b24-a96b-986be8e74004": {"__data__": {"id_": "e38fa34b-fa4e-4b24-a96b-986be8e74004", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "4e4523ce-d22b-4cfb-9ee1-61bc462a630e", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "85255b76654f0f37fb5f1732855ffc35e04073d20853e2170bf3aa75f9ef8084", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "f2043159-94ab-4494-bf09-156d1d6bf39f", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "51be957c90e7d96ceb3167cbe04d9ef6f77afe1c961ab340ff494a0aac54f6bd", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "383d988d-0ee7-4cf8-ada8-4a1c812a6700", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a69712af3759a6bd2161a6eba93bbb4335ea47266b5f3377faa355af3950ea41", "class_name": "RelatedNodeInfo"}}, "hash": "ccddfb15a38849e1139433272b087318aaeb49d8f654292261439d92b78efe68", "text": "Option 2 \u2013 Use Hex\n\nIf you choose to use your existing Hex account\nor [create a free 30-day trial\naccount](https://app.hex.tech/signup/quickstart-30), then Snowpark for Python\nis built-in so you don't have to create a Python environment and install\nSnowpark for Python along with other libraries locally on your laptop. This\nwill enable you to complete **Data Engineering** and **Machine Learning**\nsteps of this QuickStart Guide directly in Hex. (See the respective steps for\ndetails on loading the Data Engineering and Machine Learning notebooks in\nHex.)\n\nThe Notebook linked below covers the following data engineering tasks.\n\n  1. Establish secure connection from Snowpark Python to Snowflake\n  2. Load data from Snowflake tables into Snowpark DataFrames\n  3. Perform Exploratory Data Analysis on Snowpark DataFrames\n  4. Pivot and Join data from multiple tables using Snowpark DataFrames\n  5. Automate data pipeline tasks using Snowflake Tasks", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "383d988d-0ee7-4cf8-ada8-4a1c812a6700": {"__data__": {"id_": "383d988d-0ee7-4cf8-ada8-4a1c812a6700", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ec1a4890-8bbe-4dc4-ab06-62ba9326de8a", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "7e1a6af71bec932b362afb98669ce8fa4eab0c5c4c529daa6a7336aa7e70b7b0", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e38fa34b-fa4e-4b24-a96b-986be8e74004", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "ccddfb15a38849e1139433272b087318aaeb49d8f654292261439d92b78efe68", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1f66bf9e-2d92-4643-af5c-0c2770a363a2", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0229326d4f247144719abb260f6aa0dba6aa675fd5c1f514cc752573dce6d4df", "class_name": "RelatedNodeInfo"}}, "hash": "a69712af3759a6bd2161a6eba93bbb4335ea47266b5f3377faa355af3950ea41", "text": "Data Engineering Notebook in Jupyter or Visual Studio Code\n\nTo get started, follow these steps:\n\n  1. In a terminal window, browse to this folder and run `jupyter notebook` at the command line. (You may also use other tools and IDEs such Visual Studio Code.)\n  2. Open and run through the cells in Snowpark_For_Python_DE.ipynb\n\nIMPORTANT: Make sure in the Jupyter notebook the (Python) kernel is set to\n**_snowpark-de-ml_** \u2013 which is the name of the environment created in **Clone\nGitHub Repository** step.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1f66bf9e-2d92-4643-af5c-0c2770a363a2": {"__data__": {"id_": "1f66bf9e-2d92-4643-af5c-0c2770a363a2", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5a08ab8c-13cd-4713-a71b-54644cd34614", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "eb64865fa0df9df791a7cb38641b837aba9af914e6261e178b1d96196da7cea8", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "383d988d-0ee7-4cf8-ada8-4a1c812a6700", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "a69712af3759a6bd2161a6eba93bbb4335ea47266b5f3377faa355af3950ea41", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "49a91a70-5d36-464a-bc60-e5ec420e6340", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "804592da07100d36fcb2f6a669804d688dcd98d526e2da03851ecc1bd4fc1209", "class_name": "RelatedNodeInfo"}}, "hash": "0229326d4f247144719abb260f6aa0dba6aa675fd5c1f514cc752573dce6d4df", "text": "Data Engineering Notebook in Hex\n\nIf you choose to use your existing Hex account\nor [create a free 30-day trial\naccount](https://app.hex.tech/signup/quickstart-30), follow these steps to\nload the notebook and create a data connection to connect to Snowflake from\nHex.\n\n  1. Import Snowpark_For_Python_DE.ipynb as a Project in your account. For more information on importing, refer to the docs.\n  2. Then, instead of using the connection.json to connect to Snowflake, create a Data Connection and use that in the Data Engineering Notebook as shown below.\n\n!HEX Data Connection\n\nNote: You can also create shared data connections for your projects and users\nin your workspace. For more details, refer to the\n[docs](https://learn.hex.tech/docs/administration/workspace_settings/workspace-\nassets#shared-data-connections).\n\n  3. Replace the following code snippet in the notebook\n\n    \n    \n    connection_parameters = json.load(open('connection.json'))\n    session = Session.builder.configs(connection_parameters).create()\n    \n\n**with...**\n\n    \n    \n    import hextoolkit\n    hex_snowflake_conn = hextoolkit.get_data_connection('YOUR_DATA_CONNECTION_NAME')\n    session = hex_snowflake_conn.get_snowpark_session()\n    session.sql('USE SCHEMA DASH_SCHEMA').collect()\n    \n\nYou can also operationalize the data transformations in the form of automated\ndata pipelines running in Snowflake.\n\nIn particular, in the [Data Engineering\nNotebook](https://github.com/Snowflake-Labs/sfguide-ad-spend-roi-snowpark-\npython-streamlit-scikit-learn/blob/main/Snowpark_For_Python_DE.ipynb), there's\na section that demonstrates how to optionally build and run the data\ntransformations as [Snowflake Tasks](https://docs.snowflake.com/en/user-\nguide/tasks-intro).\n\nFor reference purposes, here are the code snippets.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "49a91a70-5d36-464a-bc60-e5ec420e6340": {"__data__": {"id_": "49a91a70-5d36-464a-bc60-e5ec420e6340", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "c9db68f9-2ac7-49bc-a5c8-e972138b3294", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "eec48a01eaddd9e5abcad793504ad301c8b9cd19cde50bea77faf3e601a9f7f5", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "1f66bf9e-2d92-4643-af5c-0c2770a363a2", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "0229326d4f247144719abb260f6aa0dba6aa675fd5c1f514cc752573dce6d4df", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "e4da969f-b9e1-45e2-b6b7-9cb840dcf511", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "640c450dc66364a5fbfa1a2e0e49466a5c066d186ee949587f476dd009d2959d", "class_name": "RelatedNodeInfo"}}, "hash": "804592da07100d36fcb2f6a669804d688dcd98d526e2da03851ecc1bd4fc1209", "text": "**Root/parent Task**\n\nThis task automates loading campain spend data and performing various\ntransformations.\n\n    \n    \n    def campaign_spend_data_pipeline(session: Session) -> str:\n      # DATA TRANSFORMATIONS\n      # Perform the following actions to transform the data\n    \n      # Load the campaign spend data\n      snow_df_spend_t = session.table('campaign_spend')\n    \n      # Transform the data so we can see total cost per year/month per channel using group_by() and agg() Snowpark DataFrame functions\n      snow_df_spend_per_channel_t = snow_df_spend_t.group_by(year('DATE'), month('DATE'),'CHANNEL').agg(sum('TOTAL_COST').as_('TOTAL_COST')).\\\n          with_column_renamed('\"YEAR(DATE)\"',\"YEAR\").with_column_renamed('\"MONTH(DATE)\"',\"MONTH\").sort('YEAR','MONTH')\n    \n      # Transform the data so that each row will represent total cost across all channels per year/month using pivot() and sum() Snowpark DataFrame functions\n      snow_df_spend_per_month_t = snow_df_spend_per_channel_t.pivot('CHANNEL',['search_engine','social_media','video','email']).sum('TOTAL_COST').sort('YEAR','MONTH')\n      snow_df_spend_per_month_t = snow_df_spend_per_month_t.select(\n          col(\"YEAR\"),\n          col(\"MONTH\"),\n          col(\"'search_engine'\").as_(\"SEARCH_ENGINE\"),\n          col(\"'social_media'\").as_(\"SOCIAL_MEDIA\"),\n          col(\"'video'\").as_(\"VIDEO\"),\n          col(\"'email'\").as_(\"EMAIL\")\n      )\n    \n      # Save transformed data\n      snow_df_spend_per_month_t.write.mode('overwrite').save_as_table('SPEND_PER_MONTH')\n    \n    # Register data pipelining function as a Stored Procedure so it can be run as a task\n    session.sproc.register(\n      func=campaign_spend_data_pipeline,\n      name=\"campaign_spend_data_pipeline\",\n      packages=['snowflake-snowpark-python'],\n      is_permanent=True,\n      stage_location=\"@dash_sprocs\",\n      replace=True)\n    \n    campaign_spend_data_pipeline_task = \"\"\"\n    CREATE OR REPLACE TASK campaign_spend_data_pipeline_task\n        WAREHOUSE = 'DASH_L'\n        SCHEDULE  = '3 MINUTE'\n    AS\n        CALL campaign_spend_data_pipeline()\n    \"\"\"\n    session.sql(campaign_spend_data_pipeline_task).collect()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "e4da969f-b9e1-45e2-b6b7-9cb840dcf511": {"__data__": {"id_": "e4da969f-b9e1-45e2-b6b7-9cb840dcf511", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7f3befc3-89d6-450a-9591-b22f30b71b4d", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "57ed9f95b0cc8a078803600e795806ff1ef03bb4de5f1fcbfa872d83824d26fb", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "49a91a70-5d36-464a-bc60-e5ec420e6340", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "804592da07100d36fcb2f6a669804d688dcd98d526e2da03851ecc1bd4fc1209", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "6a60acc7-dce9-4d89-b12c-602afe592465", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "9dd812b7929770a019723f6000d3eba2d27f61c630fd69683e39228e364116a0", "class_name": "RelatedNodeInfo"}}, "hash": "640c450dc66364a5fbfa1a2e0e49466a5c066d186ee949587f476dd009d2959d", "text": "**Child/dependant Task**\n\nThis task automates loading monthly revenue data, performing various\ntransformations, and joining it with transformed campaign spend data.\n\n    \n    \n    def monthly_revenue_data_pipeline(session: Session) -> str:\n      # Load revenue table and transform the data into revenue per year/month using group_by and agg() functions\n      snow_df_spend_per_month_t = session.table('spend_per_month')\n      snow_df_revenue_t = session.table('monthly_revenue')\n      snow_df_revenue_per_month_t = snow_df_revenue_t.group_by('YEAR','MONTH').agg(sum('REVENUE')).sort('YEAR','MONTH').with_column_renamed('SUM(REVENUE)','REVENUE')\n    \n      # Join revenue data with the transformed campaign spend data so that our input features (i.e. cost per channel) and target variable (i.e. revenue) can be loaded into a single table for model training\n      snow_df_spend_and_revenue_per_month_t = snow_df_spend_per_month_t.join(snow_df_revenue_per_month_t, [\"YEAR\",\"MONTH\"])\n    \n      # SAVE in a new table for the next task\n      snow_df_spend_and_revenue_per_month_t.write.mode('overwrite').save_as_table('SPEND_AND_REVENUE_PER_MONTH')\n    \n    # Register data pipelining function as a Stored Procedure so it can be run as a task\n    session.sproc.register(\n      func=monthly_revenue_data_pipeline,\n      name=\"monthly_revenue_data_pipeline\",\n      packages=['snowflake-snowpark-python'],\n      is_permanent=True,\n      stage_location=\"@dash_sprocs\",\n      replace=True)\n    \n    monthly_revenue_data_pipeline_task = \"\"\"\n      CREATE OR REPLACE TASK monthly_revenue_data_pipeline_task\n          WAREHOUSE = 'DASH_L'\n          AFTER campaign_spend_data_pipeline_task\n      AS\n          CALL monthly_revenue_data_pipeline()\n      \"\"\"\n    session.sql(monthly_revenue_data_pipeline_task).collect()\n    \n\nNote: In the **_monthly_revenue_data_pipeline_task_** above, notice the\n**AFTER campaign_spend_data_pipeline_task** clause which makes it a dependant\ntask.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "6a60acc7-dce9-4d89-b12c-602afe592465": {"__data__": {"id_": "6a60acc7-dce9-4d89-b12c-602afe592465", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "41ad57af-db56-432e-9473-80db7722049f", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1e37e5238f8b03ec33de112141bdf3365750bb53d1d9c31c3ec1a366e6674fb3", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "e4da969f-b9e1-45e2-b6b7-9cb840dcf511", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "640c450dc66364a5fbfa1a2e0e49466a5c066d186ee949587f476dd009d2959d", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "ba583341-04b7-4d03-bbb0-74fef69f88d4", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "72aa1a1ee916719b85145e3bc64d62fada9bd6bd27144eceaf10250fc9c81b30", "class_name": "RelatedNodeInfo"}}, "hash": "9dd812b7929770a019723f6000d3eba2d27f61c630fd69683e39228e364116a0", "text": "Start Tasks\n\nSnowflake Tasks are not started by default so you need to execute the\nfollowing statements to start/resume them.\n\n    \n    \n    session.sql(\"alter task monthly_revenue_data_pipeline_task resume\").collect()\n    session.sql(\"alter task campaign_spend_data_pipeline_task resume\").collect()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "ba583341-04b7-4d03-bbb0-74fef69f88d4": {"__data__": {"id_": "ba583341-04b7-4d03-bbb0-74fef69f88d4", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "570497e1-9600-49d0-8517-da7b966b29ef", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c1fb3f8c23d2018724169597c187d91a8e57120e318e30c2d6e8c1b258acd585", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "6a60acc7-dce9-4d89-b12c-602afe592465", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "9dd812b7929770a019723f6000d3eba2d27f61c630fd69683e39228e364116a0", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "cf6207db-f6f6-4e1e-a552-1e0d78b11c12", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "15006ddb60254caa89887f55b83b6d657e30e10a891f99837001d95fa89a828b", "class_name": "RelatedNodeInfo"}}, "hash": "72aa1a1ee916719b85145e3bc64d62fada9bd6bd27144eceaf10250fc9c81b30", "text": "Suspend Tasks\n\nIf you resume the above tasks, suspend them to avoid unecessary resource\nutilization by executing the following commands.\n\n    \n    \n    session.sql(\"alter task campaign_spend_data_pipeline_task suspend\").collect()\n    session.sql(\"alter task monthly_revenue_data_pipeline_task suspend\").collect()", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "cf6207db-f6f6-4e1e-a552-1e0d78b11c12": {"__data__": {"id_": "cf6207db-f6f6-4e1e-a552-1e0d78b11c12", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "5a4a4cbe-4336-4c1e-a4d9-7ce32945cb93", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "821d4dacb4ca5e599cde2664c6bdb077a3d12ddbddedfffbfc892fb225f41573", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "ba583341-04b7-4d03-bbb0-74fef69f88d4", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "72aa1a1ee916719b85145e3bc64d62fada9bd6bd27144eceaf10250fc9c81b30", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "7ac749c2-25dc-427e-bbf6-7bc153884d75", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "244aa9f96b5324254c7650d36ee4f46cfcc15202d1e2b347d0b29864797b37c6", "class_name": "RelatedNodeInfo"}}, "hash": "15006ddb60254caa89887f55b83b6d657e30e10a891f99837001d95fa89a828b", "text": "Tasks Observability\n\nThese tasks and their [DAGs](https://docs.snowflake.com/en/user-guide/tasks-\nintro#label-task-dag) can be viewed in\n[Snowsight](https://docs.snowflake.com/en/user-guide/ui-snowsight-\ntasks#viewing-individual-task-graphs) as shown below.\n\n!Tasks-Observability", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "7ac749c2-25dc-427e-bbf6-7bc153884d75": {"__data__": {"id_": "7ac749c2-25dc-427e-bbf6-7bc153884d75", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "f54bd317-fca1-409a-a58d-d329d58b2fe5", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "914cacbb46c5567005f56a70f83de2132c2a9e73c1e32b400dedc5d4ed62dc3f", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "cf6207db-f6f6-4e1e-a552-1e0d78b11c12", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "15006ddb60254caa89887f55b83b6d657e30e10a891f99837001d95fa89a828b", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "59fd3378-7f78-4b76-a992-e661390475ec", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "afef9e3c92e6dfb12fc2162b4a21118d1e46428be274b2b16e57b15f48387f45", "class_name": "RelatedNodeInfo"}}, "hash": "244aa9f96b5324254c7650d36ee4f46cfcc15202d1e2b347d0b29864797b37c6", "text": "Error Notificatons For Tasks\n\nYou can also enable push notifications to a cloud messaging service when\nerrors occur while tasks are being executed. For more information, please\nrefer to the [documentation](https://docs.snowflake.com/en/user-guide/tasks-\nerrors).\n\nPREREQUISITE: Successful completion of Data Engineering steps outlined in\n[Snowpark_For_Python_DE.ipynb](https://github.com/Snowflake-Labs/sfguide-ad-\nspend-roi-snowpark-python-streamlit-scikit-\nlearn/blob/main/Snowpark_For_Python_DE.ipynb).\n\nThe Notebook linked below covers the following machine learning tasks.\n\n  1. Establish secure connection from Snowpark Python to Snowflake\n  2. Load features and target from Snowflake table into Snowpark DataFrame\n  3. Prepare features for model training\n  4. Train ML model using Snowpark ML on Snowflake\n  5. Create Scalar and Vectorized (aka Batch) Python User-Defined Functions (UDFs) for inference on new data points for online and offline inference respectively.\n\n!End-To-End-ML", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "59fd3378-7f78-4b76-a992-e661390475ec": {"__data__": {"id_": "59fd3378-7f78-4b76-a992-e661390475ec", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "9edbdfce-5668-495f-b7a7-c438597f6ec1", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "c3ffba0b1f5e6d51d4931f624cf47dd56d990c9fb07510ed0ff5393188d49e15", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "7ac749c2-25dc-427e-bbf6-7bc153884d75", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "244aa9f96b5324254c7650d36ee4f46cfcc15202d1e2b347d0b29864797b37c6", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "08d86abf-0785-4394-9ee8-248da5617653", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1a31cf538eaf371f07976dcd425d71fd5e93b7af12b678c895d0222f543119df", "class_name": "RelatedNodeInfo"}}, "hash": "afef9e3c92e6dfb12fc2162b4a21118d1e46428be274b2b16e57b15f48387f45", "text": "Machine Learning Notebook in Jupyter or Visual Studio Code\n\nTo get started, follow these steps:\n\n  1. In a terminal window, browse to this folder and run `jupyter notebook` at the command line. (You may also use other tools and IDEs such Visual Studio Code.)\n  2. Open and run through the Snowpark_For_Python_ML.ipynb\n\nIMPORTANT: Make sure in the Jupyter notebook the (Python) kernel is set to\n**_snowpark-de-ml_** \u2013 which is the name of the environment created in **Clone\nGitHub Repository** step.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "08d86abf-0785-4394-9ee8-248da5617653": {"__data__": {"id_": "08d86abf-0785-4394-9ee8-248da5617653", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "ea267aee-3967-404c-a7e9-d002ea1261b4", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "433c50c251f13e06f4443a24652ff3fe1384912cd9925d558d11eefc7d73706b", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "59fd3378-7f78-4b76-a992-e661390475ec", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "afef9e3c92e6dfb12fc2162b4a21118d1e46428be274b2b16e57b15f48387f45", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "b59a014a-440f-4089-bff1-ece70fc41bcd", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3661355cfc56f57f9055916077bb5adf55444b1bf755048cb52f24cba16efafc", "class_name": "RelatedNodeInfo"}}, "hash": "1a31cf538eaf371f07976dcd425d71fd5e93b7af12b678c895d0222f543119df", "text": "Machine Learning Notebook in Hex\n\nIf you choose to use your existing Hex account\nor [create a free 30-day trial\naccount](https://app.hex.tech/signup/quickstart-30), follow these steps to\nload the notebook and create a data connection to connect to Snowflake from\nHex.\n\n  1. Import Snowpark_For_Python_ML.ipynb as a Project in your account. For more information on importing, refer to the docs.\n  2. Then, instead of using the connection.json to connect to Snowflake, create a Data Connection and use that in the Machine Learning Notebook as shown below.\n\n!HEX Data Connection\n\nNote: You can also create shared data connections for your projects and users\nin your workspace. For more details, refer to the\n[docs](https://learn.hex.tech/docs/administration/workspace_settings/workspace-\nassets#shared-data-connections).\n\n  3. Replace the following code snippet in the notebook\n\n    \n    \n    connection_parameters = json.load(open('connection.json'))\n    session = Session.builder.configs(connection_parameters).create()\n    \n\n**with...**\n\n    \n    \n    import hextoolkit\n    hex_snowflake_conn = hextoolkit.get_data_connection('YOUR_DATA_CONNECTION_NAME')\n    session = hex_snowflake_conn.get_snowpark_session()\n    session.sql('USE SCHEMA DASH_SCHEMA').collect()\n    \n\nFollow these steps to build Streamlit application in Snowsight.\n\n**Step 1.** Click on **Streamlit** on the left navigation menu\n\n**Step 2.** Click on **\\+ Streamlit App** on the top right\n\n**Step 3.** Enter **App name**\n\n**Step 4.** Select **Warehouse** (X-Small) and **App location** (Database and\nSchema) where you'd like to create the Streamlit applicaton\n\n**Step 5.** Click on **Create**\n\n  * At this point, you will be provided code for an example Streamlit application\n\n**Step 6.** Replace sample application code displayed in the code editor on\nthe left with the code provided in\n[Snowpark_Streamlit_Revenue_Prediction_SiS.py](https://github.com/Snowflake-\nLabs/sfguide-ad-spend-roi-snowpark-python-streamlit-scikit-\nlearn/blob/main/Snowpark_Streamlit_Revenue_Prediction_SiS.py)\n\n**Step 7.** Click on **Run** on the top right\n\nIf all goes well, you should see the application in Snowsight as shown below.\n\n!Streamlit-in-Snowflake\n\n**Step 8.** Save data to Snowflake\n\nIn the application, adjust the advertising budget sliders to see the predicted\nROI for those allocations. You can also click on **Save to Snowflake** button\nto save the current allocations and predicted ROI into\nBUDGET_ALLOCATIONS_AND_ROI Snowflake table.\n\nIf you started/resumed the two tasks `monthly_revenue_data_pipeline_task` and\n`campaign_spend_data_pipeline_task` as part of the **Data Engineering** or\n**Data Pipelines** sections, then it is important that you run the following\ncommands to suspend those tasks in order to avoid unecessary resource\nutilization.\n\nIn Notebook using Snowpark Python API\n\n    \n    \n    session.sql(\"alter task campaign_spend_data_pipeline_task suspend\").collect()\n    session.sql(\"alter task monthly_revenue_data_pipeline_task suspend\").collect()\n    \n\nIn Snowsight\n\n    \n    \n    alter task campaign_spend_data_pipeline_task suspend;\n    alter task monthly_revenue_data_pipeline_task suspend;\n    \n\nCongratulations! You've successfully performed data engineering tasks and\ntrained a Linear Regression model to predict future ROI (Return On Investment)\nof variable advertising spend budgets across multiple channels including\nSearch, Video, Social Media, and Email using Snowpark for Python and scikit-\nlearn. And then you created a Streamlit application that uses that model to\ngenerate predictions on new budget allocations based on user input.\n\nWe would love your feedback on this QuickStart Guide! Please submit your\nfeedback using this Feedback Form.", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "b59a014a-440f-4089-bff1-ece70fc41bcd": {"__data__": {"id_": "b59a014a-440f-4089-bff1-ece70fc41bcd", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "7bb12367-2344-408c-981f-7424f080d9e7", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "232479b8924ac0e7d8c808bdf3a0792d0cbfa742a782d29534c5e808c99c3d1d", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "08d86abf-0785-4394-9ee8-248da5617653", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "1a31cf538eaf371f07976dcd425d71fd5e93b7af12b678c895d0222f543119df", "class_name": "RelatedNodeInfo"}, "3": {"node_id": "1c1ab13f-305d-4740-b58e-f8fba23a49a2", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "9eeff2db15a0af0d8d101e93de217f572593f1d34f26baa8db2c78f1b0780850", "class_name": "RelatedNodeInfo"}}, "hash": "3661355cfc56f57f9055916077bb5adf55444b1bf755048cb52f24cba16efafc", "text": "What You Learned\n\n  * How to analyze data and perform data engineering tasks using Snowpark DataFrames and APIs\n  * How to use open-source Python libraries from curated Snowflake Anaconda channel\n  * How to train ML model using Snowpark ML in Snowflake\n  * How to create Scalar and Vectorized Snowpark Python User-Defined Functions (UDFs) for online and offline inference respectively\n  * How to create Snowflake Tasks to automate data pipelining and (re)training of the model\n  * How to create Streamlit application that uses the Scalar UDF for inference", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}, "1c1ab13f-305d-4740-b58e-f8fba23a49a2": {"__data__": {"id_": "1c1ab13f-305d-4740-b58e-f8fba23a49a2", "embedding": null, "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "excluded_embed_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "excluded_llm_metadata_keys": ["file_name", "file_type", "file_size", "creation_date", "last_modified_date", "last_accessed_date"], "relationships": {"1": {"node_id": "159d1e7e-63ec-4219-9d12-5641b70950b0", "node_type": "4", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "6a4aa809b245f3b73a68ee3579cf1b5824ee3b098320a8e5f577eef7dddc80da", "class_name": "RelatedNodeInfo"}, "2": {"node_id": "b59a014a-440f-4089-bff1-ece70fc41bcd", "node_type": "1", "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}, "hash": "3661355cfc56f57f9055916077bb5adf55444b1bf755048cb52f24cba16efafc", "class_name": "RelatedNodeInfo"}}, "hash": "9eeff2db15a0af0d8d101e93de217f572593f1d34f26baa8db2c78f1b0780850", "text": "Related Resources\n\n  * Source Code on GitHub\n  * Intro to Machine Learning with Snowpark ML\n  * Advanced: Snowpark for Python Data Engineering Guide\n  * Advanced: Snowpark for Python Machine Learning Guide\n  * Snowpark for Python Developer Guide\n  * Snowpark for Python API Reference", "start_char_idx": null, "end_char_idx": null, "text_template": "{metadata_str}\n\n{content}", "metadata_template": "{key}: {value}", "metadata_seperator": "\n", "class_name": "TextNode"}, "__type__": "1"}}, "docstore/ref_doc_info": {"16ba89ae-afb1-41b9-8b68-a0bb40804ec1": {"node_ids": ["d5fd6b32-2ec5-4694-bc83-65670fa3dde5"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "a41622d0-5ce0-4a54-aa66-adf556aec1a3": {"node_ids": ["20f5d863-2928-4fc3-9d80-30e2abd7d2bb"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "22a7fc75-99e7-4941-a892-85e21ef0e3af": {"node_ids": ["3d8ec722-df1f-4da4-b0db-1b6d3b4ff52c", "cbc84ffe-7a9b-4f5c-9b64-00879822f9dc"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "4120034d-76ba-46e3-8bca-f866fe245a28": {"node_ids": ["ef18236d-f472-4fa5-99da-649dea88b574"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "6019b9d5-4ec0-4014-938b-b2d9d2e333cd": {"node_ids": ["d8811708-a7a8-48ac-b183-f2394b6c53ff"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "7fcdfcf4-e998-4585-acce-6b8e74a46f06": {"node_ids": ["b753d218-d568-4bfd-86ad-ca8c6c906b14"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "259ac5be-f8ee-4bf4-8b71-c75220a9de76": {"node_ids": ["bf0d85a2-9c23-44f6-8b8a-9bdaa3bff94d"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "489d5cb2-62c6-443e-aa71-6bab006a24d9": {"node_ids": ["02bc5bf1-d04b-49fd-a9a5-e61596725546"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "e4f7b0a3-1c41-4b02-80fe-88500bbcb6ba": {"node_ids": ["8dd3b393-32d8-470c-adc5-a36a9a1a69b8"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "8db00887-b0a1-473b-a4ce-0718face2a46": {"node_ids": ["c443c40e-97ec-4c94-85a0-ef6903d34bd1"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "d5dd1f7e-9420-4538-ad4a-5209993e1381": {"node_ids": ["3cc04899-14b9-4474-8d41-5cb0b467010a"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "cd17128d-326a-4903-a0c5-c77c59478b21": {"node_ids": ["f1259519-5803-4e5f-b1d6-c916d9673530"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "848363e0-a1b6-4dfd-afdc-21ecab16bf38": {"node_ids": ["fad4b56b-4079-47a3-9eb6-5263ed90c3d2"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "e00e35b5-cefc-48dd-90fe-a087fc48bafa": {"node_ids": ["6f162758-a4a3-4653-a4fd-ed3ff4478886"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "6777dfc7-7c50-4859-b0dd-4ff20ce0a807": {"node_ids": ["45670891-a9a8-4df7-b079-43d3b5930036"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "b20c423c-747a-4fd1-b70b-25fd5541150d": {"node_ids": ["216b39dd-ef82-4b3e-9c2e-bb3e1b3462a4"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "a83f26dc-de07-4ea1-9ac6-fdfa5e21c03b": {"node_ids": ["b2692c13-e04a-4199-a014-4d4c99a5ddc6"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "9850e7da-e939-4679-91de-3b74f083eba0": {"node_ids": ["974ee772-6a78-4661-b478-8a12ca496bb9"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "9a9e45bd-1dd1-4b46-81fd-afca52ddf738": {"node_ids": ["757cc912-623d-4754-a085-44a943745fe7"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "26d899e5-4ca8-404f-804d-6f4a34198abd": {"node_ids": ["6d602356-173b-415d-be7d-72b7774fb02b"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "dd557dd9-cde6-4ecc-a6a4-77d05d153c72": {"node_ids": ["9ad02b5a-e18f-409f-961f-2feb64cbc6f3"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "d192491e-17a2-4268-963d-a7198d755427": {"node_ids": ["a128c079-867b-45bf-be6a-657dd242a262"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "8470c0a5-1fe8-49d7-8587-0a7d7d9350a2": {"node_ids": ["9bba0cef-56d8-47ed-a9d0-56c4160a9b33"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "0f62b2ba-cb18-4783-a350-3d8915b98c22": {"node_ids": ["05207965-6db7-4bd2-a920-1ea3551d84ea"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "27841ea7-750a-4e61-8a44-9cbd1f276a72": {"node_ids": ["be9efd5a-cf46-4d80-8dc3-738b3c133882"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "533d490d-66db-4374-b0ad-aa58daebe4d4": {"node_ids": ["890493a5-7dde-4a6c-a126-c7b2aae40f29"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "7f04828b-e710-4f22-ac20-fb12b1f6232d": {"node_ids": ["b181769c-85d6-4891-9a91-ea8dc5bbd8b1"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "6aa938ae-d19a-446b-a26a-fbf0603194a0": {"node_ids": ["59e9aed6-3fa7-4314-bc22-4927536acb43"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "b11716ba-a1c3-4f99-b18d-699602cf7d0f": {"node_ids": ["e2c39dec-1733-450b-a75d-21d220dbc3c1"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "b0afb286-2e3e-458a-9403-6a0df4d391f0": {"node_ids": ["e2dc0bae-2725-4b53-8932-b04801b213da"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "3fff583d-c03e-48fd-81b0-b9c508f39652": {"node_ids": ["2154df07-a4b1-4354-be9b-1299666f2c9a"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "379627a1-e3ea-410e-9e88-54f3f1eca108": {"node_ids": ["fae3a583-32e3-4426-aead-f3ff30503893"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "3d083986-cd90-4bb6-a0d6-2b12c0586475": {"node_ids": ["6f2d4a0a-735d-43ec-8383-66ce3efec99d"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "af8bb432-4b28-4e85-82d6-6d6394cc0c5b": {"node_ids": ["9d12507f-c160-40ce-8d52-052b62108e36"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "f49a40a3-e652-4907-baa6-005cb1be6d2a": {"node_ids": ["0d594228-3f6a-4895-aa05-473c9d9452a9"], "metadata": {"file_path": "blogs/cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_name": "cloud_native_data_engineering_with_matillion_and_snowflake.md", "file_type": null, "file_size": 37879, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "54e6fc0d-abc1-4deb-a307-e7394dd94cb2": {"node_ids": ["1de43534-1583-44cd-9e89-92aa4eb159fa"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "0789ce2b-e67e-422b-9524-4c1d621fdd8e": {"node_ids": ["8520e4d9-f3d8-4f28-a19e-f8fa11d96062"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "d3830bb2-9319-4d36-809b-4bf042a5425a": {"node_ids": ["d119c5c6-da3c-4c76-8141-4807ee0e0cd7"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "e8b4be1e-62ae-42fe-b7db-7edaa00ad9d2": {"node_ids": ["af439ba4-cabe-4f5c-a932-d97ffb5e8694"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "d1e526e4-df9b-4acf-90c0-3ce95904cdf2": {"node_ids": ["83056970-e5bd-499c-acb0-0a8b69286fc0"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "dfa88cfb-b069-4aa5-b6e7-927043e99d45": {"node_ids": ["3e5f6e9a-a012-4886-8b64-aaea581a9400"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "1cbc2fbc-08dc-4e99-b3c9-1edb86059274": {"node_ids": ["75df7843-28c0-4292-8a1b-d3602f368d8d"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "5ba294b9-b3e3-406c-a010-7982418f5d37": {"node_ids": ["ddbd990e-fecc-46ce-9211-3593008b5ce2"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "c9255c40-ef20-4645-8caf-887ee7696e8d": {"node_ids": ["c9950a8b-f234-4146-8323-4fc6afe39e72"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "617de077-cf0a-4492-95e2-2ac6f47ff63c": {"node_ids": ["f8912097-4eaf-4bf4-aac1-4ea92fe955fd"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "31783ff5-3251-4cec-8961-dda483445836": {"node_ids": ["96518087-e613-428e-8dde-21d9e6a28fd6"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "b0e2acee-0b85-4acc-a013-666414387b97": {"node_ids": ["188d7463-3ea4-43cf-b882-350336167b88"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "f5bf5a52-aa63-4423-99ac-4db23fd33d35": {"node_ids": ["6363a797-e854-4f63-921a-42acf74c159d"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "9936fa3a-7f2b-487c-ae08-2ea27c7cde9f": {"node_ids": ["a2a6ae95-d3b9-425e-b8c7-e6ad04943e7f"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "5e6b9e75-ec1f-41e1-b906-de31982fe9b0": {"node_ids": ["fdb4be78-aecf-49b4-9c20-526edd1bcb62"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "0238e2e0-0416-4376-940b-b1e175b0c8af": {"node_ids": ["d84439e1-8cc2-4a9e-96aa-f526eae268cd"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "6c24a568-ea68-4406-b7c6-457c49bc72e2": {"node_ids": ["f13f1f6e-7ec0-47f3-9404-1a0f0b9c2d06"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "04b9ec0d-f234-434e-a7c3-4d85325be579": {"node_ids": ["b9ab5cc2-a2b9-49d8-8dfc-9d6dfc64d132"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "c299da0c-1ebc-41c2-b783-a5be5af2cdb5": {"node_ids": ["df706406-7ac4-4d19-b374-432b5423e099"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "6d82dc7b-c9b6-441d-8a61-b974258085d3": {"node_ids": ["72075545-360f-4f95-b410-3937b04db244"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "f8400d86-cd0a-422c-8497-7097f4e701d0": {"node_ids": ["2c65d021-7bdb-4560-a589-5b9009a09e67"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "06cb8027-5654-448c-abf5-55cc62dbbf38": {"node_ids": ["2c5a27bd-3997-4f51-8f02-d7b02df60f16"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "5d620880-54b2-480a-850b-f2d1fa63c5c3": {"node_ids": ["f591a6e6-0912-4caa-a3dd-a8ecaf24cc4b"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "838e01ec-713d-4a8f-a0b1-ce1e9660836d": {"node_ids": ["2e1752f9-5040-4706-9dac-e77d7c376e76"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "781b4df7-f027-474f-85e7-f04d491d7bbd": {"node_ids": ["0b0fb3d4-337b-4713-9d09-d67bdb98b372"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "6aef757b-2705-4b4c-85de-3705841202fb": {"node_ids": ["cfff6798-af44-462e-a88e-fdb72cdd053e"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "93f0d803-f3fe-455d-a437-91ceebe39e03": {"node_ids": ["a4c590bf-3aca-42af-8546-66241fc59004"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "169ad65b-6139-4ce3-be60-a81550f8af9e": {"node_ids": ["3f699fd8-fa21-46d3-807a-caae1df13f57"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "530319fb-f437-4f72-9d5e-7526e0bb8564": {"node_ids": ["4a503199-4a12-4813-ba4c-735e18c9f451"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "4b153848-3b09-4250-922a-a0273dec19dd": {"node_ids": ["2e7fc0d2-2bf8-49c8-9de2-e0b3edb63ab9"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "b89ae138-d312-4360-a76e-36feae737b7f": {"node_ids": ["82f1ab77-c5e9-4b39-a93a-acf57edeb8d6"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "4918253a-db34-4ce0-9b96-785aa7a4659c": {"node_ids": ["b597de2e-68f6-40c2-8a06-88021253370a"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "d643b7d2-4ebd-413d-bd60-586e58d3a387": {"node_ids": ["639048d9-c24f-4680-b64f-e1f608a232f8"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "56386cb6-8c14-4aa6-8bb6-6085f63062b0": {"node_ids": ["2fa1383d-11fd-43da-aa36-a2495640907f"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "03593344-c1fb-45b6-a39b-984c3992b147": {"node_ids": ["b341b476-aee5-46e4-a8fc-e4849caabc1d"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "52e875c2-8342-4bce-bc5f-9920ece1517c": {"node_ids": ["ad426243-3edc-4210-9101-e57c2d2896c9"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "f68ab3a8-6c62-4704-95b9-267e36e9bd3e": {"node_ids": ["4781c58f-470e-467d-b2e1-88a4d6c3a508"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "af91a16d-f4ba-4dc3-b34f-e846b69df9e6": {"node_ids": ["fc16ae55-1fe8-4f12-ae2f-3874f325b13c"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "e644e1ea-d4be-4740-a876-8fe026651a3a": {"node_ids": ["f5cddbb2-4e8d-4f83-9ec6-b9947ca8bd28"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "bcdd6387-f1c1-4fe9-b5e5-c7940e5e3efa": {"node_ids": ["1d4f13bd-4d14-4602-ac6d-cd0ae918c989"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "3d040ded-0cc2-4d2e-bd99-035708c152e1": {"node_ids": ["6d4ba6c4-5fdc-43a9-9f9d-fa04622770e2"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "88c74ffa-111f-453a-a2bf-f264e5904c77": {"node_ids": ["0015ed86-0850-48f9-9e41-888c6e9a411e"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "69bf4d8c-4782-45f3-a468-74d49873df83": {"node_ids": ["641ff123-3660-4228-b549-d0b1cdaf4e6a"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "0d36202a-648c-4c68-be47-b71ed769f8b5": {"node_ids": ["e20270d5-ed4e-494c-8b79-9db1a0a0c35b"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "784ccd52-66a6-4e4d-8340-6048220e91d4": {"node_ids": ["798be441-f4f4-4f28-9790-b06d4e6f5f74"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "8e109689-d5f9-4bdb-a88e-03925419cac0": {"node_ids": ["9824f763-2143-4c00-b27e-ba8447a02b5b"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "be0a8aa4-341d-4dae-8e09-171028879662": {"node_ids": ["0ed30b6d-e050-4b7b-b0c2-c3686bacf8b9"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "442c6f4a-066d-42b1-a2e2-48e1af44f583": {"node_ids": ["4826b065-56d8-49c7-a208-348f8758b9ba"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "456d6a23-92c2-4d4f-895c-49110d44ae7e": {"node_ids": ["4d36d302-803a-4107-b63c-56ea5ac89295"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "25bf98e8-2d7f-4d16-98c9-d97cfaae6cc5": {"node_ids": ["2cf833da-e926-4b77-9c99-334451d5d6d5"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "d7661e42-c331-47a9-85db-6167f15394dd": {"node_ids": ["e17e57af-3662-4cd0-87b2-6ed03bce68f6"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "99e2e083-ff3e-4077-aa66-d68737386858": {"node_ids": ["97b88142-b7e8-44e6-b582-ea887b54a6fb"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "cad399f2-85f7-424a-9d39-ff5f8dae78ec": {"node_ids": ["5c1dfcdc-f2d8-4a56-b53b-f4fbeb6a6d60"], "metadata": {"file_path": "blogs/data_engineering_pipelines_with_snowpark_python.md", "file_name": "data_engineering_pipelines_with_snowpark_python.md", "file_type": null, "file_size": 55546, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "67bdb4d8-d636-49cd-a8bf-4ffabb768f2b": {"node_ids": ["8028d491-3d1e-4aa2-b06d-c6cb1bf3ec31"], "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "a9c3575a-f0fb-4a1b-931d-6eaa4eabe4a8": {"node_ids": ["e9a7e783-5682-4394-bc34-647b4c0465f0"], "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "19b42217-41ff-4ffd-9605-ae352b3d28df": {"node_ids": ["f39a84fe-2119-4eca-83b4-60b792eb714f"], "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "a1645c90-d59d-43b7-8b69-dba53db5c265": {"node_ids": ["6f0c669f-7a10-4b66-8186-64403ae8b472", "3c00b2c4-d83b-487c-b073-faa4236b73ae", "97e3483a-7d8f-41bf-9a3b-4dd6c8c8f3a3"], "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "2e70bdf5-483a-4405-ad00-91f1e0be7d82": {"node_ids": ["70853f1a-1634-4b4e-afa2-0dcd5f8f2945"], "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "fbea1b28-cb58-4a28-998c-280f74969772": {"node_ids": ["b7d2f1b9-d088-46e0-b36b-8a123a879e7f", "82dec902-c62d-4aca-a27b-660785531335"], "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "d4ed1f0f-4f53-4b79-9551-3406119737b0": {"node_ids": ["26d18597-fd6f-4ddf-a60a-fdd9a97b4cd8", "856ca02a-0d46-4064-b8b4-0ebe676ad5bc", "36f661ae-69f7-4df9-abf7-1b1686815cf0"], "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "132a1cf6-1b50-41ba-8b05-0abb8ae21fdf": {"node_ids": ["9cb8d6fe-5e94-4d0a-8757-80f54c55edc4"], "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "f155ac7c-c2e9-4f94-a98c-55aca5ba6981": {"node_ids": ["0e338248-0ca6-409b-9490-954fd3418a82"], "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "9a77c1a4-7e2f-4219-a16d-9ffdd0dd5542": {"node_ids": ["b57e5c60-02fb-4f32-9769-6b5a74025a4c"], "metadata": {"file_path": "blogs/data_engineering_with_apache_airflow.md", "file_name": "data_engineering_with_apache_airflow.md", "file_type": null, "file_size": 30976, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "3c98bff8-ca97-4771-ac4a-a44f68c8ee6b": {"node_ids": ["8c08473b-1ed8-40b3-ab77-f65fa2007f88"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "14d9e1da-4499-4fa2-9397-85b6bedf50f7": {"node_ids": ["738ced3c-77b3-465d-a927-243d06d5c544"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "4fb59aff-ded2-42fe-be81-b240fa7c3639": {"node_ids": ["f07f87f5-1afe-4f83-ba83-95de478ee1c4"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "e27de034-04bf-4483-abfe-0a3a782b6b02": {"node_ids": ["9a3daed2-bc53-4d66-a91f-6e628187e7fd"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "e9c6edee-b509-4101-8111-1617c70c0ac2": {"node_ids": ["fb4d892d-a610-4ca7-a33f-9eccb3b7f453"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "0cbbfaff-e21e-40e1-afc1-d64219a33373": {"node_ids": ["29d73faf-0607-4c27-84ea-b18b1a5cd632"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "ba9aa5bc-0a3b-4f41-a209-acbc0d38ff11": {"node_ids": ["9ccb34e9-2c64-43ae-9d74-21e7b3a1b20a"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "f74f7195-e059-4a8a-97a1-e657a59b0a27": {"node_ids": ["a6457415-ec74-4622-a9a7-11f5137b3c29"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "aa724f7b-41f0-40ed-aa9b-5e650d545a1c": {"node_ids": ["45374ec0-83f0-42e4-8e78-e72ec0a07316"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "d6666747-3eb9-430e-8e64-491ba82ea26f": {"node_ids": ["58d272df-4b03-409e-8ba8-cb41c9fe546e"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "1ab4fc40-fa27-4849-a153-ace10e32c2f6": {"node_ids": ["f3ec63c7-3b2a-42b3-99f9-105780a9d8f7", "bca25276-dc78-45b6-ab8f-c75102eca0ca", "e06f7fb3-4d22-4f4a-ba79-1bc9bea6c4a0"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "84db4db8-c9e3-43b4-8b14-7153aaa4bde8": {"node_ids": ["d50ca402-2158-4ebd-ac9d-c654feeefffd"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "5de429b9-7892-4e70-b594-f3814edf8a11": {"node_ids": ["85bfb1a4-88aa-4f7c-9aa9-63d5c2d01a25"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "8a7a76b9-527b-4e53-8015-20f796fa05f9": {"node_ids": ["e3f7f78e-eecb-4e8a-a948-6c9555c00928"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "cb9e1c68-4209-4e61-b3d4-f2029464956e": {"node_ids": ["3dbb325a-3961-47f6-b1f6-f30a1f07d47d"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "56008cbf-4830-419e-a072-23973cb9f38a": {"node_ids": ["17e88fac-7f5f-4fe3-a8d4-9316d8fb3801"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "e43bb6eb-5a67-49a9-b1aa-168447f11868": {"node_ids": ["63217bee-58e9-4bc1-865d-98418b0e9da2"], "metadata": {"file_path": "blogs/data_engineering_with_snowpark_python_and_dbt.md", "file_name": "data_engineering_with_snowpark_python_and_dbt.md", "file_type": null, "file_size": 27337, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "b7eb2722-b9fc-4e96-837e-3c311a14d922": {"node_ids": ["b886c905-bcea-4ee3-aba9-7ab75149538f"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "2922b33a-2de8-491a-aa77-eeb1aa649ee4": {"node_ids": ["f3728820-8d11-4de2-9fda-9e86dde06085"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "f37d1afd-727e-4df5-bca4-4f27852e6060": {"node_ids": ["3983fd76-81b5-470d-9e9e-2f37df8f9c2b"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "5cd37e51-9621-4ad2-b857-aca530b20899": {"node_ids": ["03a070b8-881f-42b7-95c0-573ce57274bc"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "389f2c75-8475-445d-87d4-5f40ac7012f4": {"node_ids": ["da1891cf-271a-41ef-b888-bb9aa255ac7b"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "607224dd-30c1-40e3-afe3-1a2205542859": {"node_ids": ["9b296380-1b68-4ad9-88ce-1648362b175a"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "cb2a2d58-0000-4dc0-97c4-3c942287aa85": {"node_ids": ["96fed465-7783-4922-a0f7-d6e65f806136"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "cb422583-53ad-449a-93a7-e499daab257b": {"node_ids": ["634c3fe9-27a1-49a3-a830-da87c356d905"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "8aca293f-d757-46ce-b66a-8321f5422e82": {"node_ids": ["f2043159-94ab-4494-bf09-156d1d6bf39f"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "4e4523ce-d22b-4cfb-9ee1-61bc462a630e": {"node_ids": ["e38fa34b-fa4e-4b24-a96b-986be8e74004"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "ec1a4890-8bbe-4dc4-ab06-62ba9326de8a": {"node_ids": ["383d988d-0ee7-4cf8-ada8-4a1c812a6700"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "5a08ab8c-13cd-4713-a71b-54644cd34614": {"node_ids": ["1f66bf9e-2d92-4643-af5c-0c2770a363a2"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "c9db68f9-2ac7-49bc-a5c8-e972138b3294": {"node_ids": ["49a91a70-5d36-464a-bc60-e5ec420e6340"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "7f3befc3-89d6-450a-9591-b22f30b71b4d": {"node_ids": ["e4da969f-b9e1-45e2-b6b7-9cb840dcf511"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "41ad57af-db56-432e-9473-80db7722049f": {"node_ids": ["6a60acc7-dce9-4d89-b12c-602afe592465"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "570497e1-9600-49d0-8517-da7b966b29ef": {"node_ids": ["ba583341-04b7-4d03-bbb0-74fef69f88d4"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "5a4a4cbe-4336-4c1e-a4d9-7ce32945cb93": {"node_ids": ["cf6207db-f6f6-4e1e-a552-1e0d78b11c12"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "f54bd317-fca1-409a-a58d-d329d58b2fe5": {"node_ids": ["7ac749c2-25dc-427e-bbf6-7bc153884d75"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "9edbdfce-5668-495f-b7a7-c438597f6ec1": {"node_ids": ["59fd3378-7f78-4b76-a992-e661390475ec"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "ea267aee-3967-404c-a7e9-d002ea1261b4": {"node_ids": ["08d86abf-0785-4394-9ee8-248da5617653"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "7bb12367-2344-408c-981f-7424f080d9e7": {"node_ids": ["b59a014a-440f-4089-bff1-ece70fc41bcd"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}, "159d1e7e-63ec-4219-9d12-5641b70950b0": {"node_ids": ["1c1ab13f-305d-4740-b58e-f8fba23a49a2"], "metadata": {"file_path": "blogs/getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_name": "getting_started_with_dataengineering_ml_using_snowpark_python.md", "file_type": null, "file_size": 27584, "creation_date": "2023-11-22", "last_modified_date": "2023-11-22", "last_accessed_date": "2023-11-22"}}}}